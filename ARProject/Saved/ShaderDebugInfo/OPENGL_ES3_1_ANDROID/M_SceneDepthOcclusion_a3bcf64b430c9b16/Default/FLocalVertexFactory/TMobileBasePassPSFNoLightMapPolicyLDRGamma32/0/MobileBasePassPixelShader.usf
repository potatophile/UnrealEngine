#line 1 "DumpShaderDefinesAsCommentedCode"
// #define ALLOW_STATIC_LIGHTING 1
// #define AMPLIFICATIONSHADER 0
// #define CLEAR_COAT_BOTTOM_NORMAL 0
// #define COMPILER_DEFINE #define
// #define COMPILER_DXC 1
// #define COMPUTESHADER 0
// #define DO_CHECK 1
// #define DO_GUARD_SLOW 0
// #define DUAL_SOURCE_COLOR_BLENDING_ENABLED 0
// #define DXT5_NORMALMAPS 0
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0
// #define ENABLE_AMBIENT_OCCLUSION 0
// #define ENABLE_CLUSTERED_LIGHTS 0
// #define ENABLE_CLUSTERED_REFLECTION 0
// #define ENABLE_SKY_LIGHT 0
// #define FORWARD_SHADING 0
// #define GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION 0
// #define GBUFFER_HAS_VELOCITY 0
// #define GBUFFER_REFACTOR 1
// #define GENERATE_SPHERICAL_PARTICLE_NORMALS 0
// #define GEOMETRYSHADER 0
// #define HAS_INVERTED_Z_BUFFER 1
// #define HAS_PRIMITIVE_UNIFORM_BUFFER 1
// #define INSTANCED_STEREO 0
// #define INTERPOLATE_VERTEX_COLOR 0
// #define IRIS_NORMAL 0
// #define IS_BASE_PASS 1
// #define IS_MATERIAL_SHADER 1
// #define IS_MOBILE_BASE_PASS 1
// #define IS_MOBILE_DEFERREDSHADING_SUBPASS 0
// #define IS_MOBILE_DEPTHREAD_SUBPASS 1
// #define LEGACY_MATERIAL_ENERGYCONSERVATION 0
// #define LOCAL_LIGHT_DATA_STRIDE 6
// #define MATERIAL_ALLOW_NEGATIVE_EMISSIVECOLOR 0
// #define MATERIAL_COMPUTE_FOG_PER_PIXEL 0
// #define MATERIAL_CONTACT_SHADOWS 0
// #define MATERIAL_DECAL_READ_MASK 7
// #define MATERIAL_DITHER_OPACITY_MASK 0
// #define MATERIAL_DOMAIN_POSTPROCESS 1
// #define MATERIAL_ENABLE_TRANSLUCENCY_CLOUD_FOGGING 0
// #define MATERIAL_ENABLE_TRANSLUCENCY_FOGGING 1
// #define MATERIAL_FORWARD_BLENDS_SKYLIGHT_CUBEMAPS 0
// #define MATERIAL_FULLY_ROUGH 0
// #define MATERIAL_HQ_FORWARD_REFLECTION_CAPTURES 0
// #define MATERIAL_IS_SKY 0
// #define MATERIAL_IS_STRATA 0
// #define MATERIAL_ISTHINSURFACE 0
// #define MATERIAL_NONMETAL 1
// #define MATERIAL_NORMAL_CURVATURE_TO_ROUGHNESS 0
// #define MATERIAL_OUTPUT_OPACITY_AS_ALPHA 1
// #define MATERIAL_PLANAR_FORWARD_REFLECTIONS 0
// #define MATERIAL_ROUGHDIFFUSE 0
// #define MATERIAL_SHADINGMODEL_UNLIT 1
// #define MATERIAL_SINGLE_SHADINGMODEL 1
// #define MATERIAL_SKY_ATMOSPHERE 0
// #define MATERIAL_SSR 0
// #define MATERIAL_TANGENTSPACENORMAL 1
// #define MATERIAL_TWOSIDED 0
// #define MATERIAL_USE_ALPHA_TO_COVERAGE 0
// #define MATERIAL_USE_LM_DIRECTIONALITY 1
// #define MATERIAL_USE_PREINTEGRATED_GF 0
// #define MATERIAL_USES_ANISOTROPY 0
// #define MATERIAL_USES_SCENE_COLOR_COPY 0
// #define MATERIALBLENDING_TRANSLUCENT 1
// #define MATERIALDECALRESPONSEMASK 7
// #define MATERIALDOMAIN_POSTPROCESS 1
// #define MAX_NUM_LIGHTMAP_COEF 2
// #define MESHSHADER 0
// #define MOBILE_DEFERRED_SHADING 0
// #define MOBILE_HIGH_QUALITY_BRDF 0
// #define MOBILE_MULTI_VIEW 0
// #define MOBILE_QL_DISABLE_MATERIAL_NORMAL 0
// #define MOBILE_QL_FORCE_DISABLE_PREINTEGRATEDGF 0
// #define MOBILE_QL_FORCE_FULLY_ROUGH 0
// #define MOBILE_QL_FORCE_NONMETAL 0
// #define MOBILE_SHADOW_QUALITY 2
// #define MULTI_VIEW 0
// #define NEEDS_INSTANCE_LOCAL_TO_WORLD_PS 0
// #define NEEDS_INSTANCE_WORLD_TO_LOCAL_PS 0
// #define NEEDS_PARTICLE_COLOR 0
// #define NEEDS_PARTICLE_LOCAL_TO_WORLD 0
// #define NEEDS_PARTICLE_WORLD_TO_LOCAL 0
// #define NUM_CULLED_GRID_PRIMITIVE_TYPES 2
// #define NUM_CULLED_LIGHTS_GRID_STRIDE 2
// #define NUM_VIRTUALTEXTURE_SAMPLES 0
// #define OUTPUT_GAMMA_SPACE 1
// #define OUTPUT_MOBILE_HDR 0
// #define PIXELSHADER 1
// #define PIXELSHADEROUTPUT_MRT0 1
// #define PLATFORM_ALLOW_SCENE_DATA_COMPRESSED_TRANSFORMS 0
// #define PLATFORM_SUPPORTS_BINDLESS 0
// #define PLATFORM_SUPPORTS_CLIP_DISTANCE 0
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 0
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER0 0
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER1 0
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0
// #define POST_PROCESS_ALPHA 0
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1
// #define PROJECT_MOBILE_ENABLE_MOVABLE_SPOTLIGHT_SHADOWS 0
// #define PROJECT_OIT 0
// #define PROJECT_STRATA_BACKCOMPATIBILITY 0
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 1
// #define PROJECT_SUPPORTS_LUMEN 1
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 0
// #define QL_FORCEDISABLE_LM_DIRECTIONALITY 0
// #define RAY_TRACING_DYNAMIC_MESH_IN_LOCAL_SPACE 1
// #define RAYCALLABLESHADER 0
// #define RAYGENSHADER 0
// #define RAYHITGROUPSHADER 0
// #define RAYMISSSHADER 0
// #define REFRACTION_ROOT_NODE_OVERRIDES_DEFAULT 0
// #define REFRACTION_USE_NONE 1
// #define SELECTIVE_BASEPASS_OUTPUTS 0
// #define SHADING_PATH_MOBILE 1
// #define STRATA_ADVANCED_DEBUG_ENABLED 0
// #define STRATA_ENABLED 0
// #define STRATA_OPAQUE_ROUGH_REFRACTION_ENABLED 0
// #define STRATA_USE_ACCURATE_SRGB 0
// #define SUPPORT_CLOUD_SHADOW_ON_FORWARD_LIT_TRANSLUCENT 0
// #define SUPPORT_CLOUD_SHADOW_ON_SINGLE_LAYER_WATER 0
// #define SUPPORT_GPUSKIN_PASSTHROUGH 0
// #define SUPPORT_RECTLIGHT_ON_FORWARD_LIT_TRANSLUCENT 0
// #define SUPPORT_VSM_FOWARD_QUALITY 0
// #define TEXTURE_SAMPLE_DEBUG 0
// #define TRANSLUCENCY_LIGHTING_VOLUMETRIC_NONDIRECTIONAL 1
// #define TRANSLUCENT_SHADOW_WITH_MASKED_OPACITY 0
// #define TRANSLUCENT_WRITING_FRONT_LAYER_TRANSPARENCY 0
// #define TRANSLUCENT_WRITING_VELOCITY 0
// #define UE_LWC_RENDER_TILE_SIZE 2097152.00f
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_2PI 0.673652053f
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_PI 0.673652053f
// #define UE_LWC_RENDER_TILE_SIZE_RCP 4.76837158e-07f
// #define UE_LWC_RENDER_TILE_SIZE_RSQRT 0.000690533954f
// #define UE_LWC_RENDER_TILE_SIZE_SQRT 1448.15466f
// #define USE_DBUFFER 0
// #define USE_DITHERED_LOD_TRANSITION_FROM_MATERIAL 0
// #define USE_SCENE_DEPTH_AUX 0
// #define USE_SHADOWMASKTEXTURE 0
// #define USES_DISTORTION 0
// #define USES_EMISSIVE_COLOR 1
// #define USES_PER_INSTANCE_CUSTOM_DATA 0
// #define USES_PER_INSTANCE_RANDOM 0
// #define USES_TRANSFORM_VECTOR 0
// #define USES_VERTEX_INTERPOLATOR 0
// #define USES_WORLD_POSITION_OFFSET 0
// #define VELOCITY_ENCODE_DEPTH 1
// #define VERTEXSHADER 0
// #define VF_SUPPORTS_PRIMITIVE_SCENE_DATA 0
// #define VF_SUPPORTS_SPEEDTREE_WIND 1
// #define VIRTUAL_TEXTURE_ANISOTROPIC_FILTERING 0
// #define VIRTUAL_TEXTURE_MANUAL_TRILINEAR_FILTERING 1
// #define WANT_PIXEL_DEPTH_OFFSET 0
// #define WORKING_COLOR_SPACE_IS_SRGB 1

#line   1 "/Engine/Private/MobileBasePassPixelShader.usf"






#line   7 "/Engine/Private/Common.ush"


#line   7 "/Engine/Public/Platform.ush"


#line   7 "/Engine/Public/FP16Math.ush"




















	
	
	
	
	
	
	










#line   9 "/Engine/Public/Platform.ush"
























	
	
#line  10 "/Engine/Public/Platform/GL/GLCommon.ush"



#line  34 "/Engine/Public/Platform.ush"





#line   3 "/Engine/Public/BindlessResources.ush"



















#line  43 "/Engine/Public/BindlessResources.ush"

	
	
	

	


#line  70 "/Engine/Public/BindlessResources.ush"

	
	
	

	

































#line  39 "/Engine/Public/Platform.ush"




#line   6 "/Engine/Public/ShaderVersion.ush"
#line  43 "/Engine/Public/Platform.ush"










































































































































































	








#line 241 "/Engine/Public/Platform.ush"

	
	
	
	
	
	
	
	





#line 305 "/Engine/Public/Platform.ush"

	

	
		
		
	




	
		
		
	










































	
	
	
	
	











































	



	
	
	
	
	



	
















































































void ShaderYield()
{
	
}



















































































































































































































	

	void WriteDispatchIndirectArgs(RWBuffer<uint> RWIndirectDispatchArgsBuffer, in uint InIndex, in uint InIndirectArgX, in uint InIndirectArgY, in uint InIndirectArgZ)
	{
		RWIndirectDispatchArgsBuffer[3 * InIndex + 0] = InIndirectArgX;
		RWIndirectDispatchArgsBuffer[3 * InIndex + 1] = InIndirectArgY;
		RWIndirectDispatchArgsBuffer[3 * InIndex + 2] = InIndirectArgZ;
	}


void WriteDispatchIndirectArgs(RWBuffer<uint> RWIndirectDispatchArgsBuffer, in uint InIndex, in uint3 InIndirectArg)
{
	WriteDispatchIndirectArgs(RWIndirectDispatchArgsBuffer, InIndex, InIndirectArg.x, InIndirectArg.y, InIndirectArg.z);
}





























float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}

#line 891 "/Engine/Public/Platform.ush"








#line 925 "/Engine/Public/Platform.ush"

  bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); } bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); } bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); } bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); } bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); } bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); } bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); } bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); } bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 




  int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); } int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); } int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); } int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); } int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); } int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); } int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); } int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); } int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 
  float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); } float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); } float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); } float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); } float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); } float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); } float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); } float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); } float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 











bool  and_internal(bool  a, bool  b) { return bool(a && b); }
bool2 and_internal(bool2 a, bool2 b) { return bool2(a.x && b.x, a.y && b.y); }
bool3 and_internal(bool3 a, bool3 b) { return bool3(a.x && b.x, a.y && b.y, a.z && b.z); }
bool4 and_internal(bool4 a, bool4 b) { return bool4(a.x && b.x, a.y && b.y, a.z && b.z, a.w && b.w); }

bool  or_internal(bool  a, bool  b) { return bool(a || b); }
bool2 or_internal(bool2 a, bool2 b) { return bool2(a.x || b.x, a.y || b.y); }
bool3 or_internal(bool3 a, bool3 b) { return bool3(a.x || b.x, a.y || b.y, a.z || b.z); }
bool4 or_internal(bool4 a, bool4 b) { return bool4(a.x || b.x, a.y || b.y, a.z || b.z, a.w || b.w); }




#line 976 "/Engine/Public/Platform.ush"




float  CondMask(bool Cond, float  Src0, float  Src1) { return Cond ? Src0 : Src1; }
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

int  CondMask(bool Cond, int  Src0, int  Src1) { return Cond ? Src0 : Src1; }
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

uint  CondMask(bool Cond, uint  Src0, uint  Src1) { return Cond ? Src0 : Src1; }
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }









uint BitFieldInsertU32(uint Mask, uint Preserve, uint Enable)
{
	return (Preserve & Mask) | (Enable & ~Mask);
}

uint BitFieldExtractU32(uint Data, uint Size, uint Offset)
{
	
	
	Size &= 31;
	Offset &= 31;
	return (Data >> Offset) & ((1u << Size) - 1u);
}

int BitFieldExtractI32(int Data, uint Size, uint Offset)
{
	Size &= 31u;
	Offset &= 31u;
	const uint Shift = (32u - Size) & 31u;
	const int Value = (Data >> Offset) & int((1u << Size) - 1u);
	return (Value << Shift) >> Shift;
}

uint BitFieldMaskU32(uint MaskWidth, uint MaskLocation)
{
	MaskWidth &= 31u;
	MaskLocation &= 31u;

	return ((1u << MaskWidth) - 1u) << MaskLocation;
}





int MulI24(int I1, int I2)
{
	
	return (I1 * I2);
}

uint MulU24(uint U1, uint U2)
{
	
	return U1 * U2;
}

int MadI24(int I1, int I2, int I3)
{
	
	return I1 * I2 + I3;
}

uint MadU24(uint U1, uint U2, uint U3)
{
	
	return U1 * U2 + U3;
}



uint Padding(uint Value, uint Pow2)
{
	return (Value + Pow2 - 1u) & ~(Pow2 - 1u);
}

uint CeilLog2(uint Value)
{
	return Value < 2u ? 0u : firstbithigh(Value - 1u) + 1u;
}

float BitFieldExtractFloat(uint Bits, uint Count, uint Offset)
{
	return BitFieldExtractU32(Bits, Count, Offset) / (float)BitFieldMaskU32(Count, 0u);
}



uint BitAlignU32(uint High, uint Low, uint Shift)
{
	Shift &= 31u;

	uint Result = Low >> Shift;
	Result |= Shift > 0u ? (High << (32u - Shift)) : 0u;
	return Result;
}




uint ByteAlignU32(uint High, uint Low, uint Shift)
{
	return BitAlignU32(High, Low, Shift * 8);
}











uint2 PackUlongType(uint2 Value)
{
	return Value;
}

uint2 UnpackUlongType(uint2 Value)
{
	return Value;
}




uint MaskedBitCount( uint2 Bits, uint Index )
{
	bool bLow = Index < 32;

	uint Mask = 1u << ( Index - ( bLow ? 0 : 32 ) );
	Mask -= 1;

	uint Offset;
	Offset  = countbits( Bits.x & ( bLow ? Mask : ~0u ) );
	Offset += countbits( Bits.y & ( bLow ? 0 : Mask ) );
	return Offset;
}











#line 1184 "/Engine/Public/Platform.ush"




	









	
	







	
		
	






















#line   9 "/Engine/Private/Common.ush"



	
	
	
	
	
	
	












struct FloatDeriv
{
	float Value;
	float Ddx;
	float Ddy;
};

struct FloatDeriv2
{
	float2 Value;
	float2 Ddx;
	float2 Ddy;
};

struct FloatDeriv3
{
	float3 Value;
	float3 Ddx;
	float3 Ddy;
};

struct FloatDeriv4
{
	float4 Value;
	float4 Ddx;
	float4 Ddy;
};

FloatDeriv ConstructFloatDeriv(float InValue, float InDdx, float InDdy)
{
	FloatDeriv Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv2 ConstructFloatDeriv2(float2 InValue, float2 InDdx, float2 InDdy)
{
	FloatDeriv2 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv3 ConstructFloatDeriv3(float3 InValue, float3 InDdx, float3 InDdy)
{
	FloatDeriv3 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv4 ConstructFloatDeriv4(float4 InValue, float4 InDdx, float4 InDdy)
{
	FloatDeriv4 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}















const static min16float PI = 3.1415926535897932f;
const static float MaxHalfFloat = 65504.0f;
const static float Max11BitsFloat = 65024.0f;
const static float Max10BitsFloat = 64512.0f;
const static float3 Max111110BitsFloat3 = float3(Max11BitsFloat, Max11BitsFloat, Max10BitsFloat);


















	
		
	
























	


	



#line   3 "/Engine/Private/GeneratedUniformBufferTypes.ush"





#line   3 "/Engine/Private/Nanite/NanitePackedNaniteView.ush"


struct FPackedNaniteView
{
	float4x4	SVPositionToTranslatedWorld;
	float4x4	ViewToTranslatedWorld;

	float4x4	TranslatedWorldToView;
	float4x4	TranslatedWorldToClip;
	float4x4	TranslatedWorldToSubpixelClip;	
	float4x4	ViewToClip;
	float4x4	ClipToRelativeWorld;

	float4x4	PrevTranslatedWorldToView;
	float4x4	PrevTranslatedWorldToClip;
	float4x4	PrevViewToClip;
	float4x4	PrevClipToRelativeWorld;

	int4		ViewRect;
	float4		ViewSizeAndInvSize;
	float4		ClipSpaceScaleOffset;
	float3		RelativePreViewTranslation;
	float		ViewTilePositionX;
	float3		RelativePrevPreViewTranslation;
	float		ViewTilePositionY;
	float3		RelativeWorldCameraOrigin;
	float		ViewTilePositionZ;
	float3		DrawDistanceOriginTranslatedWorld;
	float		RangeBasedCullingDistance;
	float3		ViewForward;
	float 		NearPlane;

	float4		TranslatedGlobalClipPlane; 

	float3		MatrixTilePosition;
	float		Padding1;

	float2		LODScales;
	float		MinBoundsRadiusSq;
	uint		StreamingPriorityCategory_AndFlags;

	int4		TargetLayerIdX_AndMipLevelY_AndNumMipLevelsZ;

	int4		HZBTestViewRect;
};
#line   8 "/Engine/Private/GeneratedUniformBufferTypes.ush"



#line   3 "/Engine/Private/HairStrands/HairStrandsVisibilityCommonStruct.ush"


struct FPackedHairSample
{
	float Depth;
	uint  PrimitiveID_MacroGroupID;
	uint  Tangent_Coverage8bit;
	uint  BaseColor_Roughness;
	uint  Specular_LightChannels_Backlit;
};

struct FPackedHairVis
{
	uint Depth_Coverage8bit;
	uint PrimitiveID_MaterialID;
};

struct FPackedHairVisPPLL
{
	uint Depth_Coverage8bit;
	uint PrimitiveID_MaterialID;
	uint NextNodeIndex;
};
#line  11 "/Engine/Private/GeneratedUniformBufferTypes.ush"

#line   3 "/Engine/Private/HairStrands/HairStrandsVoxelPageCommonStruct.ush"


struct FPackedVirtualVoxelNodeDesc  
{
	float3	TranslatedWorldMinAABB;
	uint	PackedPageIndexResolution; 
	float3	TranslatedWorldMaxAABB;
	uint	PageIndexOffset_VoxelWorldSize;
}; 

struct FVoxelizationViewInfo
{
	float4x4 TranslatedWorldToClip;
	float3   ViewForward;
	float    Pad0;
	uint2    RasterResolution;
	float2   Pad1;
};  
#line  12 "/Engine/Private/GeneratedUniformBufferTypes.ush"

#line   3 "/Engine/Private/HairStrands/HairStrandsDeepShadowCommonStruct.ush"


struct FDeepShadowViewInfo
{
	float4x4 TranslatedWorldToClipScaledBiased; 
	float4x4 TranslatedWorldToClip;
	float4 AtlasScaleBias; 
	float3   ViewForward;
	float    MinRadiusAtDepth1;
};
#line  13 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 166 "/Engine/Private/Common.ush"



#line   1 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line   2 "/Engine/Generated/UniformBuffers/View.ush"

cbuffer   View 
{
	 float4x4  View_TranslatedWorldToClip;
	 float4x4  View_TranslatedWorldToSubpixelClip;
	 float4x4  View_RelativeWorldToClip;
	 float4x4  View_ClipToRelativeWorld;
	 float4x4  View_TranslatedWorldToView;
	 float4x4  View_ViewToTranslatedWorld;
	 float4x4  View_TranslatedWorldToCameraView;
	 float4x4  View_CameraViewToTranslatedWorld;
	 float4x4  View_ViewToClip;
	 float4x4  View_ViewToClipNoAA;
	 float4x4  View_ClipToView;
	 float4x4  View_ClipToTranslatedWorld;
	 float4x4  View_SVPositionToTranslatedWorld;
	 float4x4  View_ScreenToRelativeWorld;
	 float4x4  View_ScreenToTranslatedWorld;
	 float4x4  View_MobileMultiviewShadowTransform;
	 float3  View_ViewTilePosition;
	 float  PrePadding_View_1036;
	 float3  View_MatrixTilePosition;
	 float  PrePadding_View_1052;
	 min16float3  View_ViewForward;
	 min16float  PrePadding_View_1068;
	 min16float3  View_ViewUp;
	 min16float  PrePadding_View_1084;
	 min16float3  View_ViewRight;
	 min16float  PrePadding_View_1100;
	 min16float3  View_HMDViewNoRollUp;
	 min16float  PrePadding_View_1116;
	 min16float3  View_HMDViewNoRollRight;
	 min16float  PrePadding_View_1132;
	 float4  View_InvDeviceZToWorldZTransform;
	 min16float4  View_ScreenPositionScaleBias;
	 float3  View_RelativeWorldCameraOrigin;
	 float  PrePadding_View_1180;
	 float3  View_TranslatedWorldCameraOrigin;
	 float  PrePadding_View_1196;
	 float3  View_RelativeWorldViewOrigin;
	 float  PrePadding_View_1212;
	 float3  View_RelativePreViewTranslation;
	 float  PrePadding_View_1228;
	 float4x4  View_PrevViewToClip;
	 float4x4  View_PrevClipToView;
	 float4x4  View_PrevTranslatedWorldToClip;
	 float4x4  View_PrevTranslatedWorldToView;
	 float4x4  View_PrevViewToTranslatedWorld;
	 float4x4  View_PrevTranslatedWorldToCameraView;
	 float4x4  View_PrevCameraViewToTranslatedWorld;
	 float3  View_PrevTranslatedWorldCameraOrigin;
	 float  PrePadding_View_1692;
	 float3  View_PrevRelativeWorldCameraOrigin;
	 float  PrePadding_View_1708;
	 float3  View_PrevRelativeWorldViewOrigin;
	 float  PrePadding_View_1724;
	 float3  View_RelativePrevPreViewTranslation;
	 float  PrePadding_View_1740;
	 float4x4  View_PrevClipToRelativeWorld;
	 float4x4  View_PrevScreenToTranslatedWorld;
	 float4x4  View_ClipToPrevClip;
	 float4x4  View_ClipToPrevClipWithAA;
	 float4  View_TemporalAAJitter;
	 float4  View_GlobalClippingPlane;
	 float2  View_FieldOfViewWideAngles;
	 float2  View_PrevFieldOfViewWideAngles;
	 min16float4  View_ViewRectMin;
	 float4  View_ViewSizeAndInvSize;
	 uint4  View_ViewRectMinAndSize;
	 float4  View_LightProbeSizeRatioAndInvSizeRatio;
	 float4  View_BufferSizeAndInvSize;
	 float4  View_BufferBilinearUVMinMax;
	 float4  View_ScreenToViewSpace;
	 float2  View_BufferToSceneTextureScale;
	 float2  View_ResolutionFractionAndInv;
	 int  View_NumSceneColorMSAASamples;
	 float  View_PreExposure;
	 float  View_OneOverPreExposure;
	 float  PrePadding_View_2188;
	 min16float4  View_DiffuseOverrideParameter;
	 min16float4  View_SpecularOverrideParameter;
	 min16float4  View_NormalOverrideParameter;
	 min16float2  View_RoughnessOverrideParameter;
	 float  View_PrevFrameGameTime;
	 float  View_PrevFrameRealTime;
	 min16float  View_OutOfBoundsMask;
	 min16float  PrePadding_View_2260;
	 min16float  PrePadding_View_2264;
	 min16float  PrePadding_View_2268;
	 float3  View_WorldCameraMovementSinceLastFrame;
	 float  View_CullingSign;
	 min16float  View_NearPlane;
	 float  View_GameTime;
	 float  View_RealTime;
	 float  View_DeltaTime;
	 float  View_MaterialTextureMipBias;
	 float  View_MaterialTextureDerivativeMultiply;
	 uint  View_Random;
	 uint  View_FrameNumber;
	 uint  View_StateFrameIndexMod8;
	 uint  View_StateFrameIndex;
	 uint  View_DebugViewModeMask;
	 uint  View_WorldIsPaused;
	 min16float  View_CameraCut;
	 min16float  View_UnlitViewmodeMask;
	 min16float  PrePadding_View_2344;
	 min16float  PrePadding_View_2348;
	 min16float4  View_DirectionalLightColor;
	 min16float3  View_DirectionalLightDirection;
	 min16float  PrePadding_View_2380;
	 float4  View_TranslucencyLightingVolumeMin[2];
	 float4  View_TranslucencyLightingVolumeInvSize[2];
	 float4  View_TemporalAAParams;
	 float4  View_CircleDOFParams;
	 float  View_DepthOfFieldSensorWidth;
	 float  View_DepthOfFieldFocalDistance;
	 float  View_DepthOfFieldScale;
	 float  View_DepthOfFieldFocalLength;
	 float  View_DepthOfFieldFocalRegion;
	 float  View_DepthOfFieldNearTransitionRegion;
	 float  View_DepthOfFieldFarTransitionRegion;
	 float  View_MotionBlurNormalizedToPixel;
	 float  View_GeneralPurposeTweak;
	 float  View_GeneralPurposeTweak2;
	 min16float  View_DemosaicVposOffset;
	 float  View_DecalDepthBias;
	 float3  View_IndirectLightingColorScale;
	 float  PrePadding_View_2540;
	 float3  View_PrecomputedIndirectLightingColorScale;
	 float  PrePadding_View_2556;
	 float3  View_PrecomputedIndirectSpecularColorScale;
	 float  PrePadding_View_2572;
	 float4  View_AtmosphereLightDirection[2];
	 float4  View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  View_AtmosphereLightIlluminanceOuterSpace[2];
	 float4  View_AtmosphereLightDiscLuminance[2];
	 float4  View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  View_SkyViewLutSizeAndInvSize;
	 float3  View_SkyCameraTranslatedWorldOrigin;
	 float  PrePadding_View_2764;
	 float4  View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  View_SkyViewLutReferential;
	 float4  View_SkyAtmosphereSkyLuminanceFactor;
	 float  View_SkyAtmospherePresentInScene;
	 float  View_SkyAtmosphereHeightFogContribution;
	 float  View_SkyAtmosphereBottomRadiusKm;
	 float  View_SkyAtmosphereTopRadiusKm;
	 float4  View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float  PrePadding_View_2920;
	 float  PrePadding_View_2924;
	 float3  View_NormalCurvatureToRoughnessScaleBias;
	 float  View_RenderingReflectionCaptureMask;
	 float  View_RealTimeReflectionCapture;
	 float  View_RealTimeReflectionCapturePreExposure;
	 float  PrePadding_View_2952;
	 float  PrePadding_View_2956;
	 float4  View_AmbientCubemapTint;
	 float  View_AmbientCubemapIntensity;
	 float  View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  View_SkyLightAffectReflectionFlag;
	 float  View_SkyLightAffectGlobalIlluminationFlag;
	 float4  View_SkyLightColor;
	 float4  View_MobileSkyIrradianceEnvironmentMap[8];
	 float  View_MobilePreviewMode;
	 float  View_HMDEyePaddingOffset;
	 min16float  View_ReflectionCubemapMaxMip;
	 float  View_ShowDecalsMask;
	 uint  View_DistanceFieldAOSpecularOcclusionMode;
	 float  View_IndirectCapsuleSelfShadowingIntensity;
	 float  PrePadding_View_3160;
	 float  PrePadding_View_3164;
	 float3  View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int  View_StereoPassIndex;
	 float4  View_GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  View_GlobalDistanceFieldMipFactor;
	 float  View_GlobalDistanceFieldMipTransition;
	 int  View_GlobalDistanceFieldClipmapSizeInPages;
	 int  PrePadding_View_3580;
	 float3  View_GlobalDistanceFieldInvPageAtlasSize;
	 float  PrePadding_View_3596;
	 float3  View_GlobalDistanceFieldInvCoverageAtlasSize;
	 float  View_GlobalVolumeDimension;
	 float  View_GlobalVolumeTexelSize;
	 float  View_MaxGlobalDFAOConeDistance;
	 uint  View_NumGlobalSDFClipmaps;
	 float  View_CoveredExpandSurfaceScale;
	 float  View_NotCoveredExpandSurfaceScale;
	 float  View_NotCoveredMinStepScale;
	 float  View_DitheredTransparencyStepThreshold;
	 float  View_DitheredTransparencyTraceThreshold;
	 int2  View_CursorPosition;
	 float  View_bCheckerboardSubsurfaceProfileRendering;
	 float  PrePadding_View_3660;
	 float3  View_VolumetricFogInvGridSize;
	 float  PrePadding_View_3676;
	 float3  View_VolumetricFogGridZParams;
	 float  PrePadding_View_3692;
	 float2  View_VolumetricFogSVPosToVolumeUV;
	 float2  View_VolumetricFogScreenUVToHistoryVolumeUV;
	 float  View_VolumetricFogMaxDistance;
	 float  PrePadding_View_3716;
	 float  PrePadding_View_3720;
	 float  PrePadding_View_3724;
	 float3  View_VolumetricLightmapWorldToUVScale;
	 float  PrePadding_View_3740;
	 float3  View_VolumetricLightmapWorldToUVAdd;
	 float  PrePadding_View_3756;
	 float3  View_VolumetricLightmapIndirectionTextureSize;
	 float  View_VolumetricLightmapBrickSize;
	 float3  View_VolumetricLightmapBrickTexelSize;
	 float  View_IndirectLightingCacheShowFlag;
	 float  View_EyeToPixelSpreadAngle;
	 float  PrePadding_View_3796;
	 float  PrePadding_View_3800;
	 float  PrePadding_View_3804;
	 float4  View_XRPassthroughCameraUVs[2];
	 float  View_GlobalVirtualTextureMipBias;
	 uint  View_VirtualTextureFeedbackShift;
	 uint  View_VirtualTextureFeedbackMask;
	 uint  View_VirtualTextureFeedbackStride;
	 uint  View_VirtualTextureFeedbackJitterOffset;
	 uint  View_VirtualTextureFeedbackSampleOffset;
	 uint  PrePadding_View_3864;
	 uint  PrePadding_View_3868;
	 float4  View_RuntimeVirtualTextureMipLevel;
	 float2  View_RuntimeVirtualTexturePackHeight;
	 float  PrePadding_View_3896;
	 float  PrePadding_View_3900;
	 float4  View_RuntimeVirtualTextureDebugParams;
	 float  View_OverrideLandscapeLOD;
	 int  View_FarShadowStaticMeshLODBias;
	 float  View_MinRoughness;
	 float  PrePadding_View_3932;
	 float4  View_HairRenderInfo;
	 uint  View_EnableSkyLight;
	 uint  View_HairRenderInfoBits;
	 uint  View_HairComponents;
	 float  View_bSubsurfacePostprocessEnabled;
	 float4  View_SSProfilesTextureSizeAndInvSize;
	 float4  View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float3  View_PhysicsFieldClipmapCenter;
	 float  View_PhysicsFieldClipmapDistance;
	 int  View_PhysicsFieldClipmapResolution;
	 int  View_PhysicsFieldClipmapExponent;
	 int  View_PhysicsFieldClipmapCount;
	 int  View_PhysicsFieldTargetCount;
	 int4  View_PhysicsFieldTargets[32];
	 uint  View_InstanceSceneDataSOAStride;
	 uint  View_GPUSceneViewId;
	 float  View_ViewResolutionFraction;
	 float  View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler ;
	 uint  PrePadding_View_4564;
	 uint BindlessSampler_View_MaterialTextureBilinearClampedSampler ;
	 uint  PrePadding_View_4572;
	 uint BindlessResource_View_VolumetricLightmapIndirectionTexture ;
	 uint  PrePadding_View_4580;
	 uint BindlessResource_View_VolumetricLightmapBrickAmbientVector ;
	 uint  PrePadding_View_4588;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0 ;
	 uint  PrePadding_View_4596;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1 ;
	 uint  PrePadding_View_4604;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2 ;
	 uint  PrePadding_View_4612;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3 ;
	 uint  PrePadding_View_4620;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4 ;
	 uint  PrePadding_View_4628;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5 ;
	 uint  PrePadding_View_4636;
	 uint BindlessResource_View_SkyBentNormalBrickTexture ;
	 uint  PrePadding_View_4644;
	 uint BindlessResource_View_DirectionalLightShadowingBrickTexture ;
	 uint  PrePadding_View_4652;
	 uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint  PrePadding_View_4660;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler0 ;
	 uint  PrePadding_View_4668;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler1 ;
	 uint  PrePadding_View_4676;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler2 ;
	 uint  PrePadding_View_4684;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler3 ;
	 uint  PrePadding_View_4692;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler4 ;
	 uint  PrePadding_View_4700;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler5 ;
	 uint  PrePadding_View_4708;
	 uint BindlessSampler_View_SkyBentNormalTextureSampler ;
	 uint  PrePadding_View_4716;
	 uint BindlessSampler_View_DirectionalLightShadowingTextureSampler ;
	 uint  PrePadding_View_4724;
	 uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture ;
	 uint  PrePadding_View_4732;
	 uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint  PrePadding_View_4740;
	 uint BindlessResource_View_GlobalDistanceFieldPageTableTexture ;
	 uint  PrePadding_View_4748;
	 uint BindlessResource_View_GlobalDistanceFieldMipTexture ;
	 uint  PrePadding_View_4756;
	 uint BindlessResource_View_AtmosphereTransmittanceTexture ;
	 uint  PrePadding_View_4764;
	 uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler ;
	 uint  PrePadding_View_4772;
	 uint BindlessResource_View_AtmosphereIrradianceTexture ;
	 uint  PrePadding_View_4780;
	 uint BindlessSampler_View_AtmosphereIrradianceTextureSampler ;
	 uint  PrePadding_View_4788;
	 uint BindlessResource_View_AtmosphereInscatterTexture ;
	 uint  PrePadding_View_4796;
	 uint BindlessSampler_View_AtmosphereInscatterTextureSampler ;
	 uint  PrePadding_View_4804;
	 uint BindlessResource_View_PerlinNoiseGradientTexture ;
	 uint  PrePadding_View_4812;
	 uint BindlessSampler_View_PerlinNoiseGradientTextureSampler ;
	 uint  PrePadding_View_4820;
	 uint BindlessResource_View_PerlinNoise3DTexture ;
	 uint  PrePadding_View_4828;
	 uint BindlessSampler_View_PerlinNoise3DTextureSampler ;
	 uint  PrePadding_View_4836;
	 uint BindlessResource_View_SobolSamplingTexture ;
	 uint  PrePadding_View_4844;
	 uint BindlessSampler_View_SharedPointWrappedSampler ;
	 uint  PrePadding_View_4852;
	 uint BindlessSampler_View_SharedPointClampedSampler ;
	 uint  PrePadding_View_4860;
	 uint BindlessSampler_View_SharedBilinearWrappedSampler ;
	 uint  PrePadding_View_4868;
	 uint BindlessSampler_View_SharedBilinearClampedSampler ;
	 uint  PrePadding_View_4876;
	 uint BindlessSampler_View_SharedBilinearAnisoClampedSampler ;
	 uint  PrePadding_View_4884;
	 uint BindlessSampler_View_SharedTrilinearWrappedSampler ;
	 uint  PrePadding_View_4892;
	 uint BindlessSampler_View_SharedTrilinearClampedSampler ;
	 uint  PrePadding_View_4900;
	 uint BindlessResource_View_PreIntegratedBRDF ;
	 uint  PrePadding_View_4908;
	 uint BindlessSampler_View_PreIntegratedBRDFSampler ;
	 uint  PrePadding_View_4916;
	 uint BindlessResource_View_PrimitiveSceneData ;
	 uint  PrePadding_View_4924;
	 uint BindlessResource_View_InstanceSceneData ;
	 uint  PrePadding_View_4932;
	 uint BindlessResource_View_InstancePayloadData ;
	 uint  PrePadding_View_4940;
	 uint BindlessResource_View_LightmapSceneData ;
	 uint  PrePadding_View_4948;
	 uint BindlessResource_View_SkyIrradianceEnvironmentMap ;
	 uint  PrePadding_View_4956;
	 uint BindlessResource_View_TransmittanceLutTexture ;
	 uint  PrePadding_View_4964;
	 uint BindlessSampler_View_TransmittanceLutTextureSampler ;
	 uint  PrePadding_View_4972;
	 uint BindlessResource_View_SkyViewLutTexture ;
	 uint  PrePadding_View_4980;
	 uint BindlessSampler_View_SkyViewLutTextureSampler ;
	 uint  PrePadding_View_4988;
	 uint BindlessResource_View_DistantSkyLightLutTexture ;
	 uint  PrePadding_View_4996;
	 uint BindlessSampler_View_DistantSkyLightLutTextureSampler ;
	 uint  PrePadding_View_5004;
	 uint BindlessResource_View_CameraAerialPerspectiveVolume ;
	 uint  PrePadding_View_5012;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler ;
	 uint  PrePadding_View_5020;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly ;
	 uint  PrePadding_View_5028;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint  PrePadding_View_5036;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly ;
	 uint  PrePadding_View_5044;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint  PrePadding_View_5052;
	 uint BindlessResource_View_HairScatteringLUTTexture ;
	 uint  PrePadding_View_5060;
	 uint BindlessSampler_View_HairScatteringLUTSampler ;
	 uint  PrePadding_View_5068;
	 uint BindlessResource_View_LTCMatTexture ;
	 uint  PrePadding_View_5076;
	 uint BindlessSampler_View_LTCMatSampler ;
	 uint  PrePadding_View_5084;
	 uint BindlessResource_View_LTCAmpTexture ;
	 uint  PrePadding_View_5092;
	 uint BindlessSampler_View_LTCAmpSampler ;
	 uint  PrePadding_View_5100;
	 uint  View_bShadingEnergyConservation;
	 uint  View_bShadingEnergyPreservation;
	 uint BindlessResource_View_ShadingEnergyGGXSpecTexture ;
	 uint  PrePadding_View_5116;
	 uint BindlessResource_View_ShadingEnergyGGXGlassTexture ;
	 uint  PrePadding_View_5124;
	 uint BindlessResource_View_ShadingEnergyClothSpecTexture ;
	 uint  PrePadding_View_5132;
	 uint BindlessResource_View_ShadingEnergyDiffuseTexture ;
	 uint  PrePadding_View_5140;
	 uint BindlessSampler_View_ShadingEnergySampler ;
	 uint  PrePadding_View_5148;
	 uint BindlessResource_View_SSProfilesTexture ;
	 uint  PrePadding_View_5156;
	 uint BindlessSampler_View_SSProfilesSampler ;
	 uint  PrePadding_View_5164;
	 uint BindlessSampler_View_SSProfilesTransmissionSampler ;
	 uint  PrePadding_View_5172;
	 uint BindlessResource_View_SSProfilesPreIntegratedTexture ;
	 uint  PrePadding_View_5180;
	 uint BindlessSampler_View_SSProfilesPreIntegratedSampler ;
	 uint  PrePadding_View_5188;
	 uint BindlessResource_View_WaterIndirection ;
	 uint  PrePadding_View_5196;
	 uint BindlessResource_View_WaterData ;
	 uint  PrePadding_View_5204;
	 uint  PrePadding_View_5208;
	 uint  PrePadding_View_5212;
	 float4  View_RectLightAtlasSizeAndInvSize;
	 float  View_RectLightAtlasMaxMipLevel;
	 float  PrePadding_View_5236;
	 uint BindlessResource_View_RectLightAtlasTexture ;
	 uint  PrePadding_View_5244;
	 uint BindlessSampler_View_RectLightAtlasSampler ;
	 uint  PrePadding_View_5252;
	 uint  PrePadding_View_5256;
	 uint  PrePadding_View_5260;
	 float4  View_IESAtlasSizeAndInvSize;
	 uint BindlessResource_View_IESAtlasTexture ;
	 uint  PrePadding_View_5284;
	 uint BindlessSampler_View_IESAtlasSampler ;
	 uint  PrePadding_View_5292;
	 uint BindlessSampler_View_LandscapeWeightmapSampler ;
	 uint  PrePadding_View_5300;
	 uint BindlessResource_View_LandscapeIndirection ;
	 uint  PrePadding_View_5308;
	 uint BindlessResource_View_LandscapePerComponentData ;
	 uint  PrePadding_View_5316;
	 uint BindlessResource_View_VTFeedbackBuffer ;
	 uint  PrePadding_View_5324;
	 uint BindlessResource_View_EditorVisualizeLevelInstanceIds ;
	 uint  PrePadding_View_5332;
	 uint BindlessResource_View_EditorSelectedHitProxyIds ;
	 uint  PrePadding_View_5340;
	 uint BindlessResource_View_PhysicsFieldClipmapBuffer ;
	 uint  PrePadding_View_5348;
	 uint  PrePadding_View_5352;
	 uint  PrePadding_View_5356;
	 float3  View_TLASRelativePreViewTranslation;
	 float  PrePadding_View_5372;
	 float3  View_TLASViewTilePosition;
}
  SamplerState  View_MaterialTextureBilinearWrapedSampler ;
  SamplerState  View_MaterialTextureBilinearClampedSampler ;
  Texture3D<uint4>  View_VolumetricLightmapIndirectionTexture ;
  Texture3D  View_VolumetricLightmapBrickAmbientVector ;
  Texture3D  View_VolumetricLightmapBrickSHCoefficients0 ;
  Texture3D  View_VolumetricLightmapBrickSHCoefficients1 ;
  Texture3D  View_VolumetricLightmapBrickSHCoefficients2 ;
  Texture3D  View_VolumetricLightmapBrickSHCoefficients3 ;
  Texture3D  View_VolumetricLightmapBrickSHCoefficients4 ;
  Texture3D  View_VolumetricLightmapBrickSHCoefficients5 ;
  Texture3D  View_SkyBentNormalBrickTexture ;
  Texture3D  View_DirectionalLightShadowingBrickTexture ;
  SamplerState  View_VolumetricLightmapBrickAmbientVectorSampler ;
  SamplerState  View_VolumetricLightmapTextureSampler0 ;
  SamplerState  View_VolumetricLightmapTextureSampler1 ;
  SamplerState  View_VolumetricLightmapTextureSampler2 ;
  SamplerState  View_VolumetricLightmapTextureSampler3 ;
  SamplerState  View_VolumetricLightmapTextureSampler4 ;
  SamplerState  View_VolumetricLightmapTextureSampler5 ;
  SamplerState  View_SkyBentNormalTextureSampler ;
  SamplerState  View_DirectionalLightShadowingTextureSampler ;
  Texture3D  View_GlobalDistanceFieldPageAtlasTexture ;
  Texture3D  View_GlobalDistanceFieldCoverageAtlasTexture ;
  Texture3D<uint>  View_GlobalDistanceFieldPageTableTexture ;
  Texture3D  View_GlobalDistanceFieldMipTexture ;
  Texture2D  View_AtmosphereTransmittanceTexture ;
  SamplerState  View_AtmosphereTransmittanceTextureSampler ;
  Texture2D  View_AtmosphereIrradianceTexture ;
  SamplerState  View_AtmosphereIrradianceTextureSampler ;
  Texture3D  View_AtmosphereInscatterTexture ;
  SamplerState  View_AtmosphereInscatterTextureSampler ;
  Texture2D  View_PerlinNoiseGradientTexture ;
  SamplerState  View_PerlinNoiseGradientTextureSampler ;
  Texture3D  View_PerlinNoise3DTexture ;
  SamplerState  View_PerlinNoise3DTextureSampler ;
  Texture2D<uint>  View_SobolSamplingTexture ;
  SamplerState  View_SharedPointWrappedSampler ;
  SamplerState  View_SharedPointClampedSampler ;
  SamplerState  View_SharedBilinearWrappedSampler ;
  SamplerState  View_SharedBilinearClampedSampler ;
  SamplerState  View_SharedBilinearAnisoClampedSampler ;
  SamplerState  View_SharedTrilinearWrappedSampler ;
  SamplerState  View_SharedTrilinearClampedSampler ;
  Texture2D  View_PreIntegratedBRDF ;
  SamplerState  View_PreIntegratedBRDFSampler ;
  StructuredBuffer<float4>  View_PrimitiveSceneData ;
  StructuredBuffer<float4>  View_InstanceSceneData ;
  StructuredBuffer<float4>  View_InstancePayloadData ;
  StructuredBuffer<float4>  View_LightmapSceneData ;
  StructuredBuffer<float4>  View_SkyIrradianceEnvironmentMap ;
  Texture2D  View_TransmittanceLutTexture ;
  SamplerState  View_TransmittanceLutTextureSampler ;
  Texture2D  View_SkyViewLutTexture ;
  SamplerState  View_SkyViewLutTextureSampler ;
  Texture2D  View_DistantSkyLightLutTexture ;
  SamplerState  View_DistantSkyLightLutTextureSampler ;
  Texture3D  View_CameraAerialPerspectiveVolume ;
  SamplerState  View_CameraAerialPerspectiveVolumeSampler ;
  Texture3D  View_CameraAerialPerspectiveVolumeMieOnly ;
  SamplerState  View_CameraAerialPerspectiveVolumeMieOnlySampler ;
  Texture3D  View_CameraAerialPerspectiveVolumeRayOnly ;
  SamplerState  View_CameraAerialPerspectiveVolumeRayOnlySampler ;
  Texture3D  View_HairScatteringLUTTexture ;
  SamplerState  View_HairScatteringLUTSampler ;
  Texture2D  View_LTCMatTexture ;
  SamplerState  View_LTCMatSampler ;
  Texture2D  View_LTCAmpTexture ;
  SamplerState  View_LTCAmpSampler ;
  Texture2D<float2>  View_ShadingEnergyGGXSpecTexture ;
  Texture3D<float2>  View_ShadingEnergyGGXGlassTexture ;
  Texture2D<float2>  View_ShadingEnergyClothSpecTexture ;
  Texture2D<float>  View_ShadingEnergyDiffuseTexture ;
  SamplerState  View_ShadingEnergySampler ;
  Texture2D  View_SSProfilesTexture ;
  SamplerState  View_SSProfilesSampler ;
  SamplerState  View_SSProfilesTransmissionSampler ;
  Texture2DArray  View_SSProfilesPreIntegratedTexture ;
  SamplerState  View_SSProfilesPreIntegratedSampler ;
  Buffer<float4>  View_WaterIndirection ;
  Buffer<float4>  View_WaterData ;
  Texture2D<float4>  View_RectLightAtlasTexture ;
  SamplerState  View_RectLightAtlasSampler ;
  Texture2DArray<float>  View_IESAtlasTexture ;
  SamplerState  View_IESAtlasSampler ;
  SamplerState  View_LandscapeWeightmapSampler ;
  Buffer<uint>  View_LandscapeIndirection ;
  Buffer<float>  View_LandscapePerComponentData ;
  RWBuffer<uint>  View_VTFeedbackBuffer ;
  Buffer<uint>  View_EditorVisualizeLevelInstanceIds ;
  Buffer<uint>  View_EditorSelectedHitProxyIds ;
  Buffer<float>  View_PhysicsFieldClipmapBuffer ;
/*atic const struct
{
	 float4x4  TranslatedWorldToClip;
	 float4x4  TranslatedWorldToSubpixelClip;
	 float4x4  RelativeWorldToClip;
	 float4x4  ClipToRelativeWorld;
	 float4x4  TranslatedWorldToView;
	 float4x4  ViewToTranslatedWorld;
	 float4x4  TranslatedWorldToCameraView;
	 float4x4  CameraViewToTranslatedWorld;
	 float4x4  ViewToClip;
	 float4x4  ViewToClipNoAA;
	 float4x4  ClipToView;
	 float4x4  ClipToTranslatedWorld;
	 float4x4  SVPositionToTranslatedWorld;
	 float4x4  ScreenToRelativeWorld;
	 float4x4  ScreenToTranslatedWorld;
	 float4x4  MobileMultiviewShadowTransform;
	 float3  ViewTilePosition;
	 float3  MatrixTilePosition;
	 min16float3  ViewForward;
	 min16float3  ViewUp;
	 min16float3  ViewRight;
	 min16float3  HMDViewNoRollUp;
	 min16float3  HMDViewNoRollRight;
	 float4  InvDeviceZToWorldZTransform;
	 min16float4  ScreenPositionScaleBias;
	 float3  RelativeWorldCameraOrigin;
	 float3  TranslatedWorldCameraOrigin;
	 float3  RelativeWorldViewOrigin;
	 float3  RelativePreViewTranslation;
	 float4x4  PrevViewToClip;
	 float4x4  PrevClipToView;
	 float4x4  PrevTranslatedWorldToClip;
	 float4x4  PrevTranslatedWorldToView;
	 float4x4  PrevViewToTranslatedWorld;
	 float4x4  PrevTranslatedWorldToCameraView;
	 float4x4  PrevCameraViewToTranslatedWorld;
	 float3  PrevTranslatedWorldCameraOrigin;
	 float3  PrevRelativeWorldCameraOrigin;
	 float3  PrevRelativeWorldViewOrigin;
	 float3  RelativePrevPreViewTranslation;
	 float4x4  PrevClipToRelativeWorld;
	 float4x4  PrevScreenToTranslatedWorld;
	 float4x4  ClipToPrevClip;
	 float4x4  ClipToPrevClipWithAA;
	 float4  TemporalAAJitter;
	 float4  GlobalClippingPlane;
	 float2  FieldOfViewWideAngles;
	 float2  PrevFieldOfViewWideAngles;
	 min16float4  ViewRectMin;
	 float4  ViewSizeAndInvSize;
	 uint4  ViewRectMinAndSize;
	 float4  LightProbeSizeRatioAndInvSizeRatio;
	 float4  BufferSizeAndInvSize;
	 float4  BufferBilinearUVMinMax;
	 float4  ScreenToViewSpace;
	 float2  BufferToSceneTextureScale;
	 float2  ResolutionFractionAndInv;
	 int  NumSceneColorMSAASamples;
	 float  PreExposure;
	 float  OneOverPreExposure;
	 min16float4  DiffuseOverrideParameter;
	 min16float4  SpecularOverrideParameter;
	 min16float4  NormalOverrideParameter;
	 min16float2  RoughnessOverrideParameter;
	 float  PrevFrameGameTime;
	 float  PrevFrameRealTime;
	 min16float  OutOfBoundsMask;
	 float3  WorldCameraMovementSinceLastFrame;
	 float  CullingSign;
	 min16float  NearPlane;
	 float  GameTime;
	 float  RealTime;
	 float  DeltaTime;
	 float  MaterialTextureMipBias;
	 float  MaterialTextureDerivativeMultiply;
	 uint  Random;
	 uint  FrameNumber;
	 uint  StateFrameIndexMod8;
	 uint  StateFrameIndex;
	 uint  DebugViewModeMask;
	 uint  WorldIsPaused;
	 min16float  CameraCut;
	 min16float  UnlitViewmodeMask;
	 min16float4  DirectionalLightColor;
	 min16float3  DirectionalLightDirection;
	 float4  TranslucencyLightingVolumeMin[2];
	 float4  TranslucencyLightingVolumeInvSize[2];
	 float4  TemporalAAParams;
	 float4  CircleDOFParams;
	 float  DepthOfFieldSensorWidth;
	 float  DepthOfFieldFocalDistance;
	 float  DepthOfFieldScale;
	 float  DepthOfFieldFocalLength;
	 float  DepthOfFieldFocalRegion;
	 float  DepthOfFieldNearTransitionRegion;
	 float  DepthOfFieldFarTransitionRegion;
	 float  MotionBlurNormalizedToPixel;
	 float  GeneralPurposeTweak;
	 float  GeneralPurposeTweak2;
	 min16float  DemosaicVposOffset;
	 float  DecalDepthBias;
	 float3  IndirectLightingColorScale;
	 float3  PrecomputedIndirectLightingColorScale;
	 float3  PrecomputedIndirectSpecularColorScale;
	 float4  AtmosphereLightDirection[2];
	 float4  AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  AtmosphereLightIlluminanceOuterSpace[2];
	 float4  AtmosphereLightDiscLuminance[2];
	 float4  AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  SkyViewLutSizeAndInvSize;
	 float3  SkyCameraTranslatedWorldOrigin;
	 float4  SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  SkyViewLutReferential;
	 float4  SkyAtmosphereSkyLuminanceFactor;
	 float  SkyAtmospherePresentInScene;
	 float  SkyAtmosphereHeightFogContribution;
	 float  SkyAtmosphereBottomRadiusKm;
	 float  SkyAtmosphereTopRadiusKm;
	 float4  SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float3  NormalCurvatureToRoughnessScaleBias;
	 float  RenderingReflectionCaptureMask;
	 float  RealTimeReflectionCapture;
	 float  RealTimeReflectionCapturePreExposure;
	 float4  AmbientCubemapTint;
	 float  AmbientCubemapIntensity;
	 float  SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  SkyLightAffectReflectionFlag;
	 float  SkyLightAffectGlobalIlluminationFlag;
	 float4  SkyLightColor;
	 float4  MobileSkyIrradianceEnvironmentMap[8];
	 float  MobilePreviewMode;
	 float  HMDEyePaddingOffset;
	 min16float  ReflectionCubemapMaxMip;
	 float  ShowDecalsMask;
	 uint  DistanceFieldAOSpecularOcclusionMode;
	 float  IndirectCapsuleSelfShadowingIntensity;
	 float3  ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int  StereoPassIndex;
	 float4  GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  GlobalDistanceFieldMipFactor;
	 float  GlobalDistanceFieldMipTransition;
	 int  GlobalDistanceFieldClipmapSizeInPages;
	 float3  GlobalDistanceFieldInvPageAtlasSize;
	 float3  GlobalDistanceFieldInvCoverageAtlasSize;
	 float  GlobalVolumeDimension;
	 float  GlobalVolumeTexelSize;
	 float  MaxGlobalDFAOConeDistance;
	 uint  NumGlobalSDFClipmaps;
	 float  CoveredExpandSurfaceScale;
	 float  NotCoveredExpandSurfaceScale;
	 float  NotCoveredMinStepScale;
	 float  DitheredTransparencyStepThreshold;
	 float  DitheredTransparencyTraceThreshold;
	 int2  CursorPosition;
	 float  bCheckerboardSubsurfaceProfileRendering;
	 float3  VolumetricFogInvGridSize;
	 float3  VolumetricFogGridZParams;
	 float2  VolumetricFogSVPosToVolumeUV;
	 float2  VolumetricFogScreenUVToHistoryVolumeUV;
	 float  VolumetricFogMaxDistance;
	 float3  VolumetricLightmapWorldToUVScale;
	 float3  VolumetricLightmapWorldToUVAdd;
	 float3  VolumetricLightmapIndirectionTextureSize;
	 float  VolumetricLightmapBrickSize;
	 float3  VolumetricLightmapBrickTexelSize;
	 float  IndirectLightingCacheShowFlag;
	 float  EyeToPixelSpreadAngle;
	 float4  XRPassthroughCameraUVs[2];
	 float  GlobalVirtualTextureMipBias;
	 uint  VirtualTextureFeedbackShift;
	 uint  VirtualTextureFeedbackMask;
	 uint  VirtualTextureFeedbackStride;
	 uint  VirtualTextureFeedbackJitterOffset;
	 uint  VirtualTextureFeedbackSampleOffset;
	 float4  RuntimeVirtualTextureMipLevel;
	 float2  RuntimeVirtualTexturePackHeight;
	 float4  RuntimeVirtualTextureDebugParams;
	 float  OverrideLandscapeLOD;
	 int  FarShadowStaticMeshLODBias;
	 float  MinRoughness;
	 float4  HairRenderInfo;
	 uint  EnableSkyLight;
	 uint  HairRenderInfoBits;
	 uint  HairComponents;
	 float  bSubsurfacePostprocessEnabled;
	 float4  SSProfilesTextureSizeAndInvSize;
	 float4  SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float3  PhysicsFieldClipmapCenter;
	 float  PhysicsFieldClipmapDistance;
	 int  PhysicsFieldClipmapResolution;
	 int  PhysicsFieldClipmapExponent;
	 int  PhysicsFieldClipmapCount;
	 int  PhysicsFieldTargetCount;
	 int4  PhysicsFieldTargets[32];
	 uint  InstanceSceneDataSOAStride;
	 uint  GPUSceneViewId;
	 float  ViewResolutionFraction;
	 float  SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 uint  bShadingEnergyConservation;
	 uint  bShadingEnergyPreservation;
	 float4  RectLightAtlasSizeAndInvSize;
	 float  RectLightAtlasMaxMipLevel;
	 float4  IESAtlasSizeAndInvSize;
	 float3  TLASRelativePreViewTranslation;
	 float3  TLASViewTilePosition;
	SamplerState MaterialTextureBilinearWrapedSampler;
	SamplerState MaterialTextureBilinearClampedSampler;
	Texture3D<uint4> VolumetricLightmapIndirectionTexture;
	Texture3D VolumetricLightmapBrickAmbientVector;
	Texture3D VolumetricLightmapBrickSHCoefficients0;
	Texture3D VolumetricLightmapBrickSHCoefficients1;
	Texture3D VolumetricLightmapBrickSHCoefficients2;
	Texture3D VolumetricLightmapBrickSHCoefficients3;
	Texture3D VolumetricLightmapBrickSHCoefficients4;
	Texture3D VolumetricLightmapBrickSHCoefficients5;
	Texture3D SkyBentNormalBrickTexture;
	Texture3D DirectionalLightShadowingBrickTexture;
	SamplerState VolumetricLightmapBrickAmbientVectorSampler;
	SamplerState VolumetricLightmapTextureSampler0;
	SamplerState VolumetricLightmapTextureSampler1;
	SamplerState VolumetricLightmapTextureSampler2;
	SamplerState VolumetricLightmapTextureSampler3;
	SamplerState VolumetricLightmapTextureSampler4;
	SamplerState VolumetricLightmapTextureSampler5;
	SamplerState SkyBentNormalTextureSampler;
	SamplerState DirectionalLightShadowingTextureSampler;
	Texture3D GlobalDistanceFieldPageAtlasTexture;
	Texture3D GlobalDistanceFieldCoverageAtlasTexture;
	Texture3D<uint> GlobalDistanceFieldPageTableTexture;
	Texture3D GlobalDistanceFieldMipTexture;
	Texture2D AtmosphereTransmittanceTexture;
	SamplerState AtmosphereTransmittanceTextureSampler;
	Texture2D AtmosphereIrradianceTexture;
	SamplerState AtmosphereIrradianceTextureSampler;
	Texture3D AtmosphereInscatterTexture;
	SamplerState AtmosphereInscatterTextureSampler;
	Texture2D PerlinNoiseGradientTexture;
	SamplerState PerlinNoiseGradientTextureSampler;
	Texture3D PerlinNoise3DTexture;
	SamplerState PerlinNoise3DTextureSampler;
	Texture2D<uint> SobolSamplingTexture;
	SamplerState SharedPointWrappedSampler;
	SamplerState SharedPointClampedSampler;
	SamplerState SharedBilinearWrappedSampler;
	SamplerState SharedBilinearClampedSampler;
	SamplerState SharedBilinearAnisoClampedSampler;
	SamplerState SharedTrilinearWrappedSampler;
	SamplerState SharedTrilinearClampedSampler;
	Texture2D PreIntegratedBRDF;
	SamplerState PreIntegratedBRDFSampler;
	StructuredBuffer<float4> PrimitiveSceneData;
	StructuredBuffer<float4> InstanceSceneData;
	StructuredBuffer<float4> InstancePayloadData;
	StructuredBuffer<float4> LightmapSceneData;
	StructuredBuffer<float4> SkyIrradianceEnvironmentMap;
	Texture2D TransmittanceLutTexture;
	SamplerState TransmittanceLutTextureSampler;
	Texture2D SkyViewLutTexture;
	SamplerState SkyViewLutTextureSampler;
	Texture2D DistantSkyLightLutTexture;
	SamplerState DistantSkyLightLutTextureSampler;
	Texture3D CameraAerialPerspectiveVolume;
	SamplerState CameraAerialPerspectiveVolumeSampler;
	Texture3D CameraAerialPerspectiveVolumeMieOnly;
	SamplerState CameraAerialPerspectiveVolumeMieOnlySampler;
	Texture3D CameraAerialPerspectiveVolumeRayOnly;
	SamplerState CameraAerialPerspectiveVolumeRayOnlySampler;
	Texture3D HairScatteringLUTTexture;
	SamplerState HairScatteringLUTSampler;
	Texture2D LTCMatTexture;
	SamplerState LTCMatSampler;
	Texture2D LTCAmpTexture;
	SamplerState LTCAmpSampler;
	Texture2D<float2> ShadingEnergyGGXSpecTexture;
	Texture3D<float2> ShadingEnergyGGXGlassTexture;
	Texture2D<float2> ShadingEnergyClothSpecTexture;
	Texture2D<float> ShadingEnergyDiffuseTexture;
	SamplerState ShadingEnergySampler;
	Texture2D SSProfilesTexture;
	SamplerState SSProfilesSampler;
	SamplerState SSProfilesTransmissionSampler;
	Texture2DArray SSProfilesPreIntegratedTexture;
	SamplerState SSProfilesPreIntegratedSampler;
	Buffer<float4> WaterIndirection;
	Buffer<float4> WaterData;
	Texture2D<float4> RectLightAtlasTexture;
	SamplerState RectLightAtlasSampler;
	Texture2DArray<float> IESAtlasTexture;
	SamplerState IESAtlasSampler;
	SamplerState LandscapeWeightmapSampler;
	Buffer<uint> LandscapeIndirection;
	Buffer<float> LandscapePerComponentData;
	RWBuffer<uint> VTFeedbackBuffer;
	Buffer<uint> EditorVisualizeLevelInstanceIds;
	Buffer<uint> EditorSelectedHitProxyIds;
	Buffer<float> PhysicsFieldClipmapBuffer;
} View = {View_TranslatedWorldToClip,View_TranslatedWorldToSubpixelClip,View_RelativeWorldToClip,View_ClipToRelativeWorld,View_TranslatedWorldToView,View_ViewToTranslatedWorld,View_TranslatedWorldToCameraView,View_CameraViewToTranslatedWorld,View_ViewToClip,View_ViewToClipNoAA,View_ClipToView,View_ClipToTranslatedWorld,View_SVPositionToTranslatedWorld,View_ScreenToRelativeWorld,View_ScreenToTranslatedWorld,View_MobileMultiviewShadowTransform,View_ViewTilePosition,View_MatrixTilePosition,View_ViewForward,View_ViewUp,View_ViewRight,View_HMDViewNoRollUp,View_HMDViewNoRollRight,View_InvDeviceZToWorldZTransform,View_ScreenPositionScaleBias,View_RelativeWorldCameraOrigin,View_TranslatedWorldCameraOrigin,View_RelativeWorldViewOrigin,View_RelativePreViewTranslation,View_PrevViewToClip,View_PrevClipToView,View_PrevTranslatedWorldToClip,View_PrevTranslatedWorldToView,View_PrevViewToTranslatedWorld,View_PrevTranslatedWorldToCameraView,View_PrevCameraViewToTranslatedWorld,View_PrevTranslatedWorldCameraOrigin,View_PrevRelativeWorldCameraOrigin,View_PrevRelativeWorldViewOrigin,View_RelativePrevPreViewTranslation,View_PrevClipToRelativeWorld,View_PrevScreenToTranslatedWorld,View_ClipToPrevClip,View_ClipToPrevClipWithAA,View_TemporalAAJitter,View_GlobalClippingPlane,View_FieldOfViewWideAngles,View_PrevFieldOfViewWideAngles,View_ViewRectMin,View_ViewSizeAndInvSize,View_ViewRectMinAndSize,View_LightProbeSizeRatioAndInvSizeRatio,View_BufferSizeAndInvSize,View_BufferBilinearUVMinMax,View_ScreenToViewSpace,View_BufferToSceneTextureScale,View_ResolutionFractionAndInv,View_NumSceneColorMSAASamples,View_PreExposure,View_OneOverPreExposure,View_DiffuseOverrideParameter,View_SpecularOverrideParameter,View_NormalOverrideParameter,View_RoughnessOverrideParameter,View_PrevFrameGameTime,View_PrevFrameRealTime,View_OutOfBoundsMask,View_WorldCameraMovementSinceLastFrame,View_CullingSign,View_NearPlane,View_GameTime,View_RealTime,View_DeltaTime,View_MaterialTextureMipBias,View_MaterialTextureDerivativeMultiply,View_Random,View_FrameNumber,View_StateFrameIndexMod8,View_StateFrameIndex,View_DebugViewModeMask,View_WorldIsPaused,View_CameraCut,View_UnlitViewmodeMask,View_DirectionalLightColor,View_DirectionalLightDirection,View_TranslucencyLightingVolumeMin,View_TranslucencyLightingVolumeInvSize,View_TemporalAAParams,View_CircleDOFParams,View_DepthOfFieldSensorWidth,View_DepthOfFieldFocalDistance,View_DepthOfFieldScale,View_DepthOfFieldFocalLength,View_DepthOfFieldFocalRegion,View_DepthOfFieldNearTransitionRegion,View_DepthOfFieldFarTransitionRegion,View_MotionBlurNormalizedToPixel,View_GeneralPurposeTweak,View_GeneralPurposeTweak2,View_DemosaicVposOffset,View_DecalDepthBias,View_IndirectLightingColorScale,View_PrecomputedIndirectLightingColorScale,View_PrecomputedIndirectSpecularColorScale,View_AtmosphereLightDirection,View_AtmosphereLightIlluminanceOnGroundPostTransmittance,View_AtmosphereLightIlluminanceOuterSpace,View_AtmosphereLightDiscLuminance,View_AtmosphereLightDiscCosHalfApexAngle_PPTrans,View_SkyViewLutSizeAndInvSize,View_SkyCameraTranslatedWorldOrigin,View_SkyPlanetTranslatedWorldCenterAndViewHeight,View_SkyViewLutReferential,View_SkyAtmosphereSkyLuminanceFactor,View_SkyAtmospherePresentInScene,View_SkyAtmosphereHeightFogContribution,View_SkyAtmosphereBottomRadiusKm,View_SkyAtmosphereTopRadiusKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,View_SkyAtmosphereAerialPerspectiveStartDepthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,View_SkyAtmosphereApplyCameraAerialPerspectiveVolume,View_NormalCurvatureToRoughnessScaleBias,View_RenderingReflectionCaptureMask,View_RealTimeReflectionCapture,View_RealTimeReflectionCapturePreExposure,View_AmbientCubemapTint,View_AmbientCubemapIntensity,View_SkyLightApplyPrecomputedBentNormalShadowingFlag,View_SkyLightAffectReflectionFlag,View_SkyLightAffectGlobalIlluminationFlag,View_SkyLightColor,View_MobileSkyIrradianceEnvironmentMap,View_MobilePreviewMode,View_HMDEyePaddingOffset,View_ReflectionCubemapMaxMip,View_ShowDecalsMask,View_DistanceFieldAOSpecularOcclusionMode,View_IndirectCapsuleSelfShadowingIntensity,View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,View_StereoPassIndex,View_GlobalVolumeTranslatedCenterAndExtent,View_GlobalVolumeTranslatedWorldToUVAddAndMul,View_GlobalDistanceFieldMipTranslatedWorldToUVScale,View_GlobalDistanceFieldMipTranslatedWorldToUVBias,View_GlobalDistanceFieldMipFactor,View_GlobalDistanceFieldMipTransition,View_GlobalDistanceFieldClipmapSizeInPages,View_GlobalDistanceFieldInvPageAtlasSize,View_GlobalDistanceFieldInvCoverageAtlasSize,View_GlobalVolumeDimension,View_GlobalVolumeTexelSize,View_MaxGlobalDFAOConeDistance,View_NumGlobalSDFClipmaps,View_CoveredExpandSurfaceScale,View_NotCoveredExpandSurfaceScale,View_NotCoveredMinStepScale,View_DitheredTransparencyStepThreshold,View_DitheredTransparencyTraceThreshold,View_CursorPosition,View_bCheckerboardSubsurfaceProfileRendering,View_VolumetricFogInvGridSize,View_VolumetricFogGridZParams,View_VolumetricFogSVPosToVolumeUV,View_VolumetricFogScreenUVToHistoryVolumeUV,View_VolumetricFogMaxDistance,View_VolumetricLightmapWorldToUVScale,View_VolumetricLightmapWorldToUVAdd,View_VolumetricLightmapIndirectionTextureSize,View_VolumetricLightmapBrickSize,View_VolumetricLightmapBrickTexelSize,View_IndirectLightingCacheShowFlag,View_EyeToPixelSpreadAngle,View_XRPassthroughCameraUVs,View_GlobalVirtualTextureMipBias,View_VirtualTextureFeedbackShift,View_VirtualTextureFeedbackMask,View_VirtualTextureFeedbackStride,View_VirtualTextureFeedbackJitterOffset,View_VirtualTextureFeedbackSampleOffset,View_RuntimeVirtualTextureMipLevel,View_RuntimeVirtualTexturePackHeight,View_RuntimeVirtualTextureDebugParams,View_OverrideLandscapeLOD,View_FarShadowStaticMeshLODBias,View_MinRoughness,View_HairRenderInfo,View_EnableSkyLight,View_HairRenderInfoBits,View_HairComponents,View_bSubsurfacePostprocessEnabled,View_SSProfilesTextureSizeAndInvSize,View_SSProfilesPreIntegratedTextureSizeAndInvSize,View_PhysicsFieldClipmapCenter,View_PhysicsFieldClipmapDistance,View_PhysicsFieldClipmapResolution,View_PhysicsFieldClipmapExponent,View_PhysicsFieldClipmapCount,View_PhysicsFieldTargetCount,View_PhysicsFieldTargets,View_InstanceSceneDataSOAStride,View_GPUSceneViewId,View_ViewResolutionFraction,View_SubSurfaceColorAsTransmittanceAtDistanceInMeters,View_bShadingEnergyConservation,View_bShadingEnergyPreservation,View_RectLightAtlasSizeAndInvSize,View_RectLightAtlasMaxMipLevel,View_IESAtlasSizeAndInvSize,View_TLASRelativePreViewTranslation,View_TLASViewTilePosition,View_MaterialTextureBilinearWrapedSampler,View_MaterialTextureBilinearClampedSampler,View_VolumetricLightmapIndirectionTexture,View_VolumetricLightmapBrickAmbientVector,View_VolumetricLightmapBrickSHCoefficients0,View_VolumetricLightmapBrickSHCoefficients1,View_VolumetricLightmapBrickSHCoefficients2,View_VolumetricLightmapBrickSHCoefficients3,View_VolumetricLightmapBrickSHCoefficients4,View_VolumetricLightmapBrickSHCoefficients5,View_SkyBentNormalBrickTexture,View_DirectionalLightShadowingBrickTexture,View_VolumetricLightmapBrickAmbientVectorSampler,View_VolumetricLightmapTextureSampler0,View_VolumetricLightmapTextureSampler1,View_VolumetricLightmapTextureSampler2,View_VolumetricLightmapTextureSampler3,View_VolumetricLightmapTextureSampler4,View_VolumetricLightmapTextureSampler5,View_SkyBentNormalTextureSampler,View_DirectionalLightShadowingTextureSampler,View_GlobalDistanceFieldPageAtlasTexture,View_GlobalDistanceFieldCoverageAtlasTexture,View_GlobalDistanceFieldPageTableTexture,View_GlobalDistanceFieldMipTexture,View_AtmosphereTransmittanceTexture,View_AtmosphereTransmittanceTextureSampler,View_AtmosphereIrradianceTexture,View_AtmosphereIrradianceTextureSampler,View_AtmosphereInscatterTexture,View_AtmosphereInscatterTextureSampler,View_PerlinNoiseGradientTexture,View_PerlinNoiseGradientTextureSampler,View_PerlinNoise3DTexture,View_PerlinNoise3DTextureSampler,View_SobolSamplingTexture,View_SharedPointWrappedSampler,View_SharedPointClampedSampler,View_SharedBilinearWrappedSampler,View_SharedBilinearClampedSampler,View_SharedBilinearAnisoClampedSampler,View_SharedTrilinearWrappedSampler,View_SharedTrilinearClampedSampler,View_PreIntegratedBRDF,View_PreIntegratedBRDFSampler,View_PrimitiveSceneData,View_InstanceSceneData,View_InstancePayloadData,View_LightmapSceneData,View_SkyIrradianceEnvironmentMap,View_TransmittanceLutTexture,View_TransmittanceLutTextureSampler,View_SkyViewLutTexture,View_SkyViewLutTextureSampler,View_DistantSkyLightLutTexture,View_DistantSkyLightLutTextureSampler,View_CameraAerialPerspectiveVolume,View_CameraAerialPerspectiveVolumeSampler,View_CameraAerialPerspectiveVolumeMieOnly,View_CameraAerialPerspectiveVolumeMieOnlySampler,View_CameraAerialPerspectiveVolumeRayOnly,View_CameraAerialPerspectiveVolumeRayOnlySampler,View_HairScatteringLUTTexture,View_HairScatteringLUTSampler,View_LTCMatTexture,View_LTCMatSampler,View_LTCAmpTexture,View_LTCAmpSampler,View_ShadingEnergyGGXSpecTexture,View_ShadingEnergyGGXGlassTexture,View_ShadingEnergyClothSpecTexture,View_ShadingEnergyDiffuseTexture,View_ShadingEnergySampler,View_SSProfilesTexture,View_SSProfilesSampler,View_SSProfilesTransmissionSampler,View_SSProfilesPreIntegratedTexture,View_SSProfilesPreIntegratedSampler,View_WaterIndirection,View_WaterData,View_RectLightAtlasTexture,View_RectLightAtlasSampler,View_IESAtlasTexture,View_IESAtlasSampler,View_LandscapeWeightmapSampler,View_LandscapeIndirection,View_LandscapePerComponentData,View_VTFeedbackBuffer,View_EditorVisualizeLevelInstanceIds,View_EditorSelectedHitProxyIds,View_PhysicsFieldClipmapBuffer,*/

#line   1 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/Strata.ush"

cbuffer   Strata 
{
	 uint  Strata_MaxBytesPerPixel;
	 uint  Strata_bRoughDiffuse;
	 uint  Strata_PeelLayersAboveDepth;
	 uint  Strata_bRoughnessTracking;
	 int  Strata_SliceStoringDebugStrataTreeData;
	 int  Strata_FirstSliceStoringStrataSSSData;
	 uint  Strata_TileSize;
	 uint  Strata_TileSizeLog2;
	 int2  Strata_TileCount;
	 int2  Strata_TileOffset;
	 int2  Strata_OverflowTileCount;
	 int2  Strata_OverflowTileOffset;
	 uint BindlessResource_Strata_MaterialTextureArray ;
	 uint  PrePadding_Strata_68;
	 uint BindlessResource_Strata_TopLayerTexture ;
	 uint  PrePadding_Strata_76;
	 uint BindlessResource_Strata_OpaqueRoughRefractionTexture ;
	 uint  PrePadding_Strata_84;
	 uint BindlessResource_Strata_BSDFOffsetTexture ;
	 uint  PrePadding_Strata_92;
	 uint BindlessResource_Strata_BSDFTileTexture ;
	 uint  PrePadding_Strata_100;
	 uint BindlessResource_Strata_BSDFTileCountBuffer ;
}
  Texture2DArray<uint>  Strata_MaterialTextureArray ;
  Texture2D<uint2>  Strata_TopLayerTexture ;
  Texture2D<float3>  Strata_OpaqueRoughRefractionTexture ;
  Texture2D<uint>  Strata_BSDFOffsetTexture ;
  Texture2D<uint>  Strata_BSDFTileTexture ;
  Buffer<uint>  Strata_BSDFTileCountBuffer ;
/*atic const struct
{
	 uint  MaxBytesPerPixel;
	 uint  bRoughDiffuse;
	 uint  PeelLayersAboveDepth;
	 uint  bRoughnessTracking;
	 int  SliceStoringDebugStrataTreeData;
	 int  FirstSliceStoringStrataSSSData;
	 uint  TileSize;
	 uint  TileSizeLog2;
	 int2  TileCount;
	 int2  TileOffset;
	 int2  OverflowTileCount;
	 int2  OverflowTileOffset;
	Texture2DArray<uint> MaterialTextureArray;
	Texture2D<uint2> TopLayerTexture;
	Texture2D<float3> OpaqueRoughRefractionTexture;
	Texture2D<uint> BSDFOffsetTexture;
	Texture2D<uint> BSDFTileTexture;
	Buffer<uint> BSDFTileCountBuffer;
} Strata = {Strata_MaxBytesPerPixel,Strata_bRoughDiffuse,Strata_PeelLayersAboveDepth,Strata_bRoughnessTracking,Strata_SliceStoringDebugStrataTreeData,Strata_FirstSliceStoringStrataSSSData,Strata_TileSize,Strata_TileSizeLog2,Strata_TileCount,Strata_TileOffset,Strata_OverflowTileCount,Strata_OverflowTileOffset,Strata_MaterialTextureArray,Strata_TopLayerTexture,Strata_OpaqueRoughRefractionTexture,Strata_BSDFOffsetTexture,Strata_BSDFTileTexture,Strata_BSDFTileCountBuffer,*/

#line   2 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/DrawRectangleParameters.ush"

cbuffer   DrawRectangleParameters 
{
	 float4  DrawRectangleParameters_PosScaleBias;
	 float4  DrawRectangleParameters_UVScaleBias;
	 float4  DrawRectangleParameters_InvTargetSizeAndTextureSize;
}
/*atic const struct
{
	 float4  PosScaleBias;
	 float4  UVScaleBias;
	 float4  InvTargetSizeAndTextureSize;
} DrawRectangleParameters = {DrawRectangleParameters_PosScaleBias,DrawRectangleParameters_UVScaleBias,DrawRectangleParameters_InvTargetSizeAndTextureSize,*/

#line   3 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/InstancedView.ush"

cbuffer   InstancedView 
{
	 float4x4  InstancedView_TranslatedWorldToClip[2];
	 float4x4  InstancedView_TranslatedWorldToSubpixelClip[2];
	 float4x4  InstancedView_RelativeWorldToClip[2];
	 float4x4  InstancedView_ClipToRelativeWorld[2];
	 float4x4  InstancedView_TranslatedWorldToView[2];
	 float4x4  InstancedView_ViewToTranslatedWorld[2];
	 float4x4  InstancedView_TranslatedWorldToCameraView[2];
	 float4x4  InstancedView_CameraViewToTranslatedWorld[2];
	 float4x4  InstancedView_ViewToClip[2];
	 float4x4  InstancedView_ViewToClipNoAA[2];
	 float4x4  InstancedView_ClipToView[2];
	 float4x4  InstancedView_ClipToTranslatedWorld[2];
	 float4x4  InstancedView_SVPositionToTranslatedWorld[2];
	 float4x4  InstancedView_ScreenToRelativeWorld[2];
	 float4x4  InstancedView_ScreenToTranslatedWorld[2];
	 float4x4  InstancedView_MobileMultiviewShadowTransform[2];
	 float3  InstancedView_ViewTilePosition;
	 float  PrePadding_InstancedView_2060;
	 float3  InstancedView_MatrixTilePosition;
	 float  PrePadding_InstancedView_2076;
	 min16float3  InstancedView_ViewForward;
	 min16float  PrePadding_InstancedView_2092;
	 min16float3  InstancedView_ViewUp;
	 min16float  PrePadding_InstancedView_2108;
	 min16float3  InstancedView_ViewRight;
	 min16float  PrePadding_InstancedView_2124;
	 min16float4  InstancedView_HMDViewNoRollUp[2];
	 min16float4  InstancedView_HMDViewNoRollRight[2];
	 float4  InstancedView_InvDeviceZToWorldZTransform[2];
	 min16float4  InstancedView_ScreenPositionScaleBias[2];
	 float4  InstancedView_RelativeWorldCameraOrigin[2];
	 float4  InstancedView_TranslatedWorldCameraOrigin[2];
	 float4  InstancedView_RelativeWorldViewOrigin[2];
	 float4  InstancedView_RelativePreViewTranslation[2];
	 float4x4  InstancedView_PrevViewToClip[2];
	 float4x4  InstancedView_PrevClipToView[2];
	 float4x4  InstancedView_PrevTranslatedWorldToClip[2];
	 float4x4  InstancedView_PrevTranslatedWorldToView[2];
	 float4x4  InstancedView_PrevViewToTranslatedWorld[2];
	 float4x4  InstancedView_PrevTranslatedWorldToCameraView[2];
	 float4x4  InstancedView_PrevCameraViewToTranslatedWorld[2];
	 float4  InstancedView_PrevTranslatedWorldCameraOrigin[2];
	 float4  InstancedView_PrevRelativeWorldCameraOrigin[2];
	 float4  InstancedView_PrevRelativeWorldViewOrigin[2];
	 float4  InstancedView_RelativePrevPreViewTranslation[2];
	 float4x4  InstancedView_PrevClipToRelativeWorld[2];
	 float4x4  InstancedView_PrevScreenToTranslatedWorld[2];
	 float4x4  InstancedView_ClipToPrevClip[2];
	 float4x4  InstancedView_ClipToPrevClipWithAA[2];
	 float4  InstancedView_TemporalAAJitter[2];
	 float4  InstancedView_GlobalClippingPlane[2];
	 float4  InstancedView_FieldOfViewWideAngles[2];
	 float4  InstancedView_PrevFieldOfViewWideAngles[2];
	 min16float4  InstancedView_ViewRectMin[2];
	 float4  InstancedView_ViewSizeAndInvSize;
	 uint4  InstancedView_ViewRectMinAndSize;
	 float4  InstancedView_LightProbeSizeRatioAndInvSizeRatio;
	 float4  InstancedView_BufferSizeAndInvSize;
	 float4  InstancedView_BufferBilinearUVMinMax[2];
	 float4  InstancedView_ScreenToViewSpace[2];
	 float4  InstancedView_BufferToSceneTextureScale[2];
	 float2  InstancedView_ResolutionFractionAndInv;
	 int  InstancedView_NumSceneColorMSAASamples;
	 float  InstancedView_PreExposure;
	 float  InstancedView_OneOverPreExposure;
	 float  PrePadding_InstancedView_4260;
	 float  PrePadding_InstancedView_4264;
	 float  PrePadding_InstancedView_4268;
	 min16float4  InstancedView_DiffuseOverrideParameter;
	 min16float4  InstancedView_SpecularOverrideParameter;
	 min16float4  InstancedView_NormalOverrideParameter;
	 min16float2  InstancedView_RoughnessOverrideParameter;
	 float  InstancedView_PrevFrameGameTime;
	 float  InstancedView_PrevFrameRealTime;
	 min16float  InstancedView_OutOfBoundsMask;
	 min16float  PrePadding_InstancedView_4340;
	 min16float  PrePadding_InstancedView_4344;
	 min16float  PrePadding_InstancedView_4348;
	 float4  InstancedView_WorldCameraMovementSinceLastFrame[2];
	 float  InstancedView_CullingSign;
	 float  PrePadding_InstancedView_4388;
	 float  PrePadding_InstancedView_4392;
	 float  PrePadding_InstancedView_4396;
	 min16float4  InstancedView_NearPlane[2];
	 float  InstancedView_GameTime;
	 float  InstancedView_RealTime;
	 float  InstancedView_DeltaTime;
	 float  InstancedView_MaterialTextureMipBias;
	 float  InstancedView_MaterialTextureDerivativeMultiply;
	 uint  InstancedView_Random;
	 uint  InstancedView_FrameNumber;
	 uint  InstancedView_StateFrameIndexMod8;
	 uint  InstancedView_StateFrameIndex;
	 uint  InstancedView_DebugViewModeMask;
	 uint  InstancedView_WorldIsPaused;
	 min16float  InstancedView_CameraCut;
	 min16float  InstancedView_UnlitViewmodeMask;
	 min16float  PrePadding_InstancedView_4484;
	 min16float  PrePadding_InstancedView_4488;
	 min16float  PrePadding_InstancedView_4492;
	 min16float4  InstancedView_DirectionalLightColor;
	 min16float3  InstancedView_DirectionalLightDirection;
	 min16float  PrePadding_InstancedView_4524;
	 float4  InstancedView_TranslucencyLightingVolumeMin[2];
	 float4  InstancedView_TranslucencyLightingVolumeInvSize[2];
	 float4  InstancedView_TemporalAAParams;
	 float4  InstancedView_CircleDOFParams;
	 float  InstancedView_DepthOfFieldSensorWidth;
	 float  InstancedView_DepthOfFieldFocalDistance;
	 float  InstancedView_DepthOfFieldScale;
	 float  InstancedView_DepthOfFieldFocalLength;
	 float  InstancedView_DepthOfFieldFocalRegion;
	 float  InstancedView_DepthOfFieldNearTransitionRegion;
	 float  InstancedView_DepthOfFieldFarTransitionRegion;
	 float  InstancedView_MotionBlurNormalizedToPixel;
	 float  InstancedView_GeneralPurposeTweak;
	 float  InstancedView_GeneralPurposeTweak2;
	 min16float  InstancedView_DemosaicVposOffset;
	 float  InstancedView_DecalDepthBias;
	 float3  InstancedView_IndirectLightingColorScale;
	 float  PrePadding_InstancedView_4684;
	 float3  InstancedView_PrecomputedIndirectLightingColorScale;
	 float  PrePadding_InstancedView_4700;
	 float3  InstancedView_PrecomputedIndirectSpecularColorScale;
	 float  PrePadding_InstancedView_4716;
	 float4  InstancedView_AtmosphereLightDirection[2];
	 float4  InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  InstancedView_AtmosphereLightIlluminanceOuterSpace[2];
	 float4  InstancedView_AtmosphereLightDiscLuminance[2];
	 float4  InstancedView_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  InstancedView_SkyViewLutSizeAndInvSize;
	 float3  InstancedView_SkyCameraTranslatedWorldOrigin;
	 float  PrePadding_InstancedView_4908;
	 float4  InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  InstancedView_SkyViewLutReferential;
	 float4  InstancedView_SkyAtmosphereSkyLuminanceFactor;
	 float  InstancedView_SkyAtmospherePresentInScene;
	 float  InstancedView_SkyAtmosphereHeightFogContribution;
	 float  InstancedView_SkyAtmosphereBottomRadiusKm;
	 float  InstancedView_SkyAtmosphereTopRadiusKm;
	 float4  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float  PrePadding_InstancedView_5064;
	 float  PrePadding_InstancedView_5068;
	 float3  InstancedView_NormalCurvatureToRoughnessScaleBias;
	 float  InstancedView_RenderingReflectionCaptureMask;
	 float  InstancedView_RealTimeReflectionCapture;
	 float  InstancedView_RealTimeReflectionCapturePreExposure;
	 float  PrePadding_InstancedView_5096;
	 float  PrePadding_InstancedView_5100;
	 float4  InstancedView_AmbientCubemapTint;
	 float  InstancedView_AmbientCubemapIntensity;
	 float  InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  InstancedView_SkyLightAffectReflectionFlag;
	 float  InstancedView_SkyLightAffectGlobalIlluminationFlag;
	 float4  InstancedView_SkyLightColor;
	 float4  InstancedView_MobileSkyIrradianceEnvironmentMap[8];
	 float  InstancedView_MobilePreviewMode;
	 float  PrePadding_InstancedView_5284;
	 float  PrePadding_InstancedView_5288;
	 float  PrePadding_InstancedView_5292;
	 float4  InstancedView_HMDEyePaddingOffset[2];
	 min16float  InstancedView_ReflectionCubemapMaxMip;
	 float  InstancedView_ShowDecalsMask;
	 uint  InstancedView_DistanceFieldAOSpecularOcclusionMode;
	 float  InstancedView_IndirectCapsuleSelfShadowingIntensity;
	 float3  InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 float  PrePadding_InstancedView_5356;
	 int4  InstancedView_StereoPassIndex[2];
	 float4  InstancedView_GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  InstancedView_GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  InstancedView_GlobalDistanceFieldMipFactor;
	 float  InstancedView_GlobalDistanceFieldMipTransition;
	 int  InstancedView_GlobalDistanceFieldClipmapSizeInPages;
	 int  PrePadding_InstancedView_5788;
	 float3  InstancedView_GlobalDistanceFieldInvPageAtlasSize;
	 float  PrePadding_InstancedView_5804;
	 float3  InstancedView_GlobalDistanceFieldInvCoverageAtlasSize;
	 float  InstancedView_GlobalVolumeDimension;
	 float  InstancedView_GlobalVolumeTexelSize;
	 float  InstancedView_MaxGlobalDFAOConeDistance;
	 uint  InstancedView_NumGlobalSDFClipmaps;
	 float  InstancedView_CoveredExpandSurfaceScale;
	 float  InstancedView_NotCoveredExpandSurfaceScale;
	 float  InstancedView_NotCoveredMinStepScale;
	 float  InstancedView_DitheredTransparencyStepThreshold;
	 float  InstancedView_DitheredTransparencyTraceThreshold;
	 int2  InstancedView_CursorPosition;
	 float  InstancedView_bCheckerboardSubsurfaceProfileRendering;
	 float  PrePadding_InstancedView_5868;
	 float3  InstancedView_VolumetricFogInvGridSize;
	 float  PrePadding_InstancedView_5884;
	 float3  InstancedView_VolumetricFogGridZParams;
	 float  PrePadding_InstancedView_5900;
	 float2  InstancedView_VolumetricFogSVPosToVolumeUV;
	 float2  InstancedView_VolumetricFogScreenUVToHistoryVolumeUV;
	 float  InstancedView_VolumetricFogMaxDistance;
	 float  PrePadding_InstancedView_5924;
	 float  PrePadding_InstancedView_5928;
	 float  PrePadding_InstancedView_5932;
	 float3  InstancedView_VolumetricLightmapWorldToUVScale;
	 float  PrePadding_InstancedView_5948;
	 float3  InstancedView_VolumetricLightmapWorldToUVAdd;
	 float  PrePadding_InstancedView_5964;
	 float3  InstancedView_VolumetricLightmapIndirectionTextureSize;
	 float  InstancedView_VolumetricLightmapBrickSize;
	 float3  InstancedView_VolumetricLightmapBrickTexelSize;
	 float  InstancedView_IndirectLightingCacheShowFlag;
	 float  InstancedView_EyeToPixelSpreadAngle;
	 float  PrePadding_InstancedView_6004;
	 float  PrePadding_InstancedView_6008;
	 float  PrePadding_InstancedView_6012;
	 float4  InstancedView_XRPassthroughCameraUVs[2];
	 float  InstancedView_GlobalVirtualTextureMipBias;
	 uint  InstancedView_VirtualTextureFeedbackShift;
	 uint  InstancedView_VirtualTextureFeedbackMask;
	 uint  InstancedView_VirtualTextureFeedbackStride;
	 uint  InstancedView_VirtualTextureFeedbackJitterOffset;
	 uint  InstancedView_VirtualTextureFeedbackSampleOffset;
	 uint  PrePadding_InstancedView_6072;
	 uint  PrePadding_InstancedView_6076;
	 float4  InstancedView_RuntimeVirtualTextureMipLevel;
	 float2  InstancedView_RuntimeVirtualTexturePackHeight;
	 float  PrePadding_InstancedView_6104;
	 float  PrePadding_InstancedView_6108;
	 float4  InstancedView_RuntimeVirtualTextureDebugParams;
	 float  InstancedView_OverrideLandscapeLOD;
	 int  InstancedView_FarShadowStaticMeshLODBias;
	 float  InstancedView_MinRoughness;
	 float  PrePadding_InstancedView_6140;
	 float4  InstancedView_HairRenderInfo;
	 uint  InstancedView_EnableSkyLight;
	 uint  InstancedView_HairRenderInfoBits;
	 uint  InstancedView_HairComponents;
	 float  InstancedView_bSubsurfacePostprocessEnabled;
	 float4  InstancedView_SSProfilesTextureSizeAndInvSize;
	 float4  InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float3  InstancedView_PhysicsFieldClipmapCenter;
	 float  InstancedView_PhysicsFieldClipmapDistance;
	 int  InstancedView_PhysicsFieldClipmapResolution;
	 int  InstancedView_PhysicsFieldClipmapExponent;
	 int  InstancedView_PhysicsFieldClipmapCount;
	 int  InstancedView_PhysicsFieldTargetCount;
	 int4  InstancedView_PhysicsFieldTargets[32];
	 uint  InstancedView_InstanceSceneDataSOAStride;
	 uint  PrePadding_InstancedView_6756;
	 uint  PrePadding_InstancedView_6760;
	 uint  PrePadding_InstancedView_6764;
	 uint4  InstancedView_GPUSceneViewId[2];
	 float  InstancedView_ViewResolutionFraction;
	 float  InstancedView_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
}
/*atic const struct
{
	 float4x4  TranslatedWorldToClip[2];
	 float4x4  TranslatedWorldToSubpixelClip[2];
	 float4x4  RelativeWorldToClip[2];
	 float4x4  ClipToRelativeWorld[2];
	 float4x4  TranslatedWorldToView[2];
	 float4x4  ViewToTranslatedWorld[2];
	 float4x4  TranslatedWorldToCameraView[2];
	 float4x4  CameraViewToTranslatedWorld[2];
	 float4x4  ViewToClip[2];
	 float4x4  ViewToClipNoAA[2];
	 float4x4  ClipToView[2];
	 float4x4  ClipToTranslatedWorld[2];
	 float4x4  SVPositionToTranslatedWorld[2];
	 float4x4  ScreenToRelativeWorld[2];
	 float4x4  ScreenToTranslatedWorld[2];
	 float4x4  MobileMultiviewShadowTransform[2];
	 float3  ViewTilePosition;
	 float3  MatrixTilePosition;
	 min16float3  ViewForward;
	 min16float3  ViewUp;
	 min16float3  ViewRight;
	 min16float4  HMDViewNoRollUp[2];
	 min16float4  HMDViewNoRollRight[2];
	 float4  InvDeviceZToWorldZTransform[2];
	 min16float4  ScreenPositionScaleBias[2];
	 float4  RelativeWorldCameraOrigin[2];
	 float4  TranslatedWorldCameraOrigin[2];
	 float4  RelativeWorldViewOrigin[2];
	 float4  RelativePreViewTranslation[2];
	 float4x4  PrevViewToClip[2];
	 float4x4  PrevClipToView[2];
	 float4x4  PrevTranslatedWorldToClip[2];
	 float4x4  PrevTranslatedWorldToView[2];
	 float4x4  PrevViewToTranslatedWorld[2];
	 float4x4  PrevTranslatedWorldToCameraView[2];
	 float4x4  PrevCameraViewToTranslatedWorld[2];
	 float4  PrevTranslatedWorldCameraOrigin[2];
	 float4  PrevRelativeWorldCameraOrigin[2];
	 float4  PrevRelativeWorldViewOrigin[2];
	 float4  RelativePrevPreViewTranslation[2];
	 float4x4  PrevClipToRelativeWorld[2];
	 float4x4  PrevScreenToTranslatedWorld[2];
	 float4x4  ClipToPrevClip[2];
	 float4x4  ClipToPrevClipWithAA[2];
	 float4  TemporalAAJitter[2];
	 float4  GlobalClippingPlane[2];
	 float4  FieldOfViewWideAngles[2];
	 float4  PrevFieldOfViewWideAngles[2];
	 min16float4  ViewRectMin[2];
	 float4  ViewSizeAndInvSize;
	 uint4  ViewRectMinAndSize;
	 float4  LightProbeSizeRatioAndInvSizeRatio;
	 float4  BufferSizeAndInvSize;
	 float4  BufferBilinearUVMinMax[2];
	 float4  ScreenToViewSpace[2];
	 float4  BufferToSceneTextureScale[2];
	 float2  ResolutionFractionAndInv;
	 int  NumSceneColorMSAASamples;
	 float  PreExposure;
	 float  OneOverPreExposure;
	 min16float4  DiffuseOverrideParameter;
	 min16float4  SpecularOverrideParameter;
	 min16float4  NormalOverrideParameter;
	 min16float2  RoughnessOverrideParameter;
	 float  PrevFrameGameTime;
	 float  PrevFrameRealTime;
	 min16float  OutOfBoundsMask;
	 float4  WorldCameraMovementSinceLastFrame[2];
	 float  CullingSign;
	 min16float4  NearPlane[2];
	 float  GameTime;
	 float  RealTime;
	 float  DeltaTime;
	 float  MaterialTextureMipBias;
	 float  MaterialTextureDerivativeMultiply;
	 uint  Random;
	 uint  FrameNumber;
	 uint  StateFrameIndexMod8;
	 uint  StateFrameIndex;
	 uint  DebugViewModeMask;
	 uint  WorldIsPaused;
	 min16float  CameraCut;
	 min16float  UnlitViewmodeMask;
	 min16float4  DirectionalLightColor;
	 min16float3  DirectionalLightDirection;
	 float4  TranslucencyLightingVolumeMin[2];
	 float4  TranslucencyLightingVolumeInvSize[2];
	 float4  TemporalAAParams;
	 float4  CircleDOFParams;
	 float  DepthOfFieldSensorWidth;
	 float  DepthOfFieldFocalDistance;
	 float  DepthOfFieldScale;
	 float  DepthOfFieldFocalLength;
	 float  DepthOfFieldFocalRegion;
	 float  DepthOfFieldNearTransitionRegion;
	 float  DepthOfFieldFarTransitionRegion;
	 float  MotionBlurNormalizedToPixel;
	 float  GeneralPurposeTweak;
	 float  GeneralPurposeTweak2;
	 min16float  DemosaicVposOffset;
	 float  DecalDepthBias;
	 float3  IndirectLightingColorScale;
	 float3  PrecomputedIndirectLightingColorScale;
	 float3  PrecomputedIndirectSpecularColorScale;
	 float4  AtmosphereLightDirection[2];
	 float4  AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  AtmosphereLightIlluminanceOuterSpace[2];
	 float4  AtmosphereLightDiscLuminance[2];
	 float4  AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  SkyViewLutSizeAndInvSize;
	 float3  SkyCameraTranslatedWorldOrigin;
	 float4  SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  SkyViewLutReferential;
	 float4  SkyAtmosphereSkyLuminanceFactor;
	 float  SkyAtmospherePresentInScene;
	 float  SkyAtmosphereHeightFogContribution;
	 float  SkyAtmosphereBottomRadiusKm;
	 float  SkyAtmosphereTopRadiusKm;
	 float4  SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float3  NormalCurvatureToRoughnessScaleBias;
	 float  RenderingReflectionCaptureMask;
	 float  RealTimeReflectionCapture;
	 float  RealTimeReflectionCapturePreExposure;
	 float4  AmbientCubemapTint;
	 float  AmbientCubemapIntensity;
	 float  SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  SkyLightAffectReflectionFlag;
	 float  SkyLightAffectGlobalIlluminationFlag;
	 float4  SkyLightColor;
	 float4  MobileSkyIrradianceEnvironmentMap[8];
	 float  MobilePreviewMode;
	 float4  HMDEyePaddingOffset[2];
	 min16float  ReflectionCubemapMaxMip;
	 float  ShowDecalsMask;
	 uint  DistanceFieldAOSpecularOcclusionMode;
	 float  IndirectCapsuleSelfShadowingIntensity;
	 float3  ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int4  StereoPassIndex[2];
	 float4  GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  GlobalDistanceFieldMipFactor;
	 float  GlobalDistanceFieldMipTransition;
	 int  GlobalDistanceFieldClipmapSizeInPages;
	 float3  GlobalDistanceFieldInvPageAtlasSize;
	 float3  GlobalDistanceFieldInvCoverageAtlasSize;
	 float  GlobalVolumeDimension;
	 float  GlobalVolumeTexelSize;
	 float  MaxGlobalDFAOConeDistance;
	 uint  NumGlobalSDFClipmaps;
	 float  CoveredExpandSurfaceScale;
	 float  NotCoveredExpandSurfaceScale;
	 float  NotCoveredMinStepScale;
	 float  DitheredTransparencyStepThreshold;
	 float  DitheredTransparencyTraceThreshold;
	 int2  CursorPosition;
	 float  bCheckerboardSubsurfaceProfileRendering;
	 float3  VolumetricFogInvGridSize;
	 float3  VolumetricFogGridZParams;
	 float2  VolumetricFogSVPosToVolumeUV;
	 float2  VolumetricFogScreenUVToHistoryVolumeUV;
	 float  VolumetricFogMaxDistance;
	 float3  VolumetricLightmapWorldToUVScale;
	 float3  VolumetricLightmapWorldToUVAdd;
	 float3  VolumetricLightmapIndirectionTextureSize;
	 float  VolumetricLightmapBrickSize;
	 float3  VolumetricLightmapBrickTexelSize;
	 float  IndirectLightingCacheShowFlag;
	 float  EyeToPixelSpreadAngle;
	 float4  XRPassthroughCameraUVs[2];
	 float  GlobalVirtualTextureMipBias;
	 uint  VirtualTextureFeedbackShift;
	 uint  VirtualTextureFeedbackMask;
	 uint  VirtualTextureFeedbackStride;
	 uint  VirtualTextureFeedbackJitterOffset;
	 uint  VirtualTextureFeedbackSampleOffset;
	 float4  RuntimeVirtualTextureMipLevel;
	 float2  RuntimeVirtualTexturePackHeight;
	 float4  RuntimeVirtualTextureDebugParams;
	 float  OverrideLandscapeLOD;
	 int  FarShadowStaticMeshLODBias;
	 float  MinRoughness;
	 float4  HairRenderInfo;
	 uint  EnableSkyLight;
	 uint  HairRenderInfoBits;
	 uint  HairComponents;
	 float  bSubsurfacePostprocessEnabled;
	 float4  SSProfilesTextureSizeAndInvSize;
	 float4  SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float3  PhysicsFieldClipmapCenter;
	 float  PhysicsFieldClipmapDistance;
	 int  PhysicsFieldClipmapResolution;
	 int  PhysicsFieldClipmapExponent;
	 int  PhysicsFieldClipmapCount;
	 int  PhysicsFieldTargetCount;
	 int4  PhysicsFieldTargets[32];
	 uint  InstanceSceneDataSOAStride;
	 uint4  GPUSceneViewId[2];
	 float  ViewResolutionFraction;
	 float  SubSurfaceColorAsTransmittanceAtDistanceInMeters;
} InstancedView = {InstancedView_TranslatedWorldToClip,InstancedView_TranslatedWorldToSubpixelClip,InstancedView_RelativeWorldToClip,InstancedView_ClipToRelativeWorld,InstancedView_TranslatedWorldToView,InstancedView_ViewToTranslatedWorld,InstancedView_TranslatedWorldToCameraView,InstancedView_CameraViewToTranslatedWorld,InstancedView_ViewToClip,InstancedView_ViewToClipNoAA,InstancedView_ClipToView,InstancedView_ClipToTranslatedWorld,InstancedView_SVPositionToTranslatedWorld,InstancedView_ScreenToRelativeWorld,InstancedView_ScreenToTranslatedWorld,InstancedView_MobileMultiviewShadowTransform,InstancedView_ViewTilePosition,InstancedView_MatrixTilePosition,InstancedView_ViewForward,InstancedView_ViewUp,InstancedView_ViewRight,InstancedView_HMDViewNoRollUp,InstancedView_HMDViewNoRollRight,InstancedView_InvDeviceZToWorldZTransform,InstancedView_ScreenPositionScaleBias,InstancedView_RelativeWorldCameraOrigin,InstancedView_TranslatedWorldCameraOrigin,InstancedView_RelativeWorldViewOrigin,InstancedView_RelativePreViewTranslation,InstancedView_PrevViewToClip,InstancedView_PrevClipToView,InstancedView_PrevTranslatedWorldToClip,InstancedView_PrevTranslatedWorldToView,InstancedView_PrevViewToTranslatedWorld,InstancedView_PrevTranslatedWorldToCameraView,InstancedView_PrevCameraViewToTranslatedWorld,InstancedView_PrevTranslatedWorldCameraOrigin,InstancedView_PrevRelativeWorldCameraOrigin,InstancedView_PrevRelativeWorldViewOrigin,InstancedView_RelativePrevPreViewTranslation,InstancedView_PrevClipToRelativeWorld,InstancedView_PrevScreenToTranslatedWorld,InstancedView_ClipToPrevClip,InstancedView_ClipToPrevClipWithAA,InstancedView_TemporalAAJitter,InstancedView_GlobalClippingPlane,InstancedView_FieldOfViewWideAngles,InstancedView_PrevFieldOfViewWideAngles,InstancedView_ViewRectMin,InstancedView_ViewSizeAndInvSize,InstancedView_ViewRectMinAndSize,InstancedView_LightProbeSizeRatioAndInvSizeRatio,InstancedView_BufferSizeAndInvSize,InstancedView_BufferBilinearUVMinMax,InstancedView_ScreenToViewSpace,InstancedView_BufferToSceneTextureScale,InstancedView_ResolutionFractionAndInv,InstancedView_NumSceneColorMSAASamples,InstancedView_PreExposure,InstancedView_OneOverPreExposure,InstancedView_DiffuseOverrideParameter,InstancedView_SpecularOverrideParameter,InstancedView_NormalOverrideParameter,InstancedView_RoughnessOverrideParameter,InstancedView_PrevFrameGameTime,InstancedView_PrevFrameRealTime,InstancedView_OutOfBoundsMask,InstancedView_WorldCameraMovementSinceLastFrame,InstancedView_CullingSign,InstancedView_NearPlane,InstancedView_GameTime,InstancedView_RealTime,InstancedView_DeltaTime,InstancedView_MaterialTextureMipBias,InstancedView_MaterialTextureDerivativeMultiply,InstancedView_Random,InstancedView_FrameNumber,InstancedView_StateFrameIndexMod8,InstancedView_StateFrameIndex,InstancedView_DebugViewModeMask,InstancedView_WorldIsPaused,InstancedView_CameraCut,InstancedView_UnlitViewmodeMask,InstancedView_DirectionalLightColor,InstancedView_DirectionalLightDirection,InstancedView_TranslucencyLightingVolumeMin,InstancedView_TranslucencyLightingVolumeInvSize,InstancedView_TemporalAAParams,InstancedView_CircleDOFParams,InstancedView_DepthOfFieldSensorWidth,InstancedView_DepthOfFieldFocalDistance,InstancedView_DepthOfFieldScale,InstancedView_DepthOfFieldFocalLength,InstancedView_DepthOfFieldFocalRegion,InstancedView_DepthOfFieldNearTransitionRegion,InstancedView_DepthOfFieldFarTransitionRegion,InstancedView_MotionBlurNormalizedToPixel,InstancedView_GeneralPurposeTweak,InstancedView_GeneralPurposeTweak2,InstancedView_DemosaicVposOffset,InstancedView_DecalDepthBias,InstancedView_IndirectLightingColorScale,InstancedView_PrecomputedIndirectLightingColorScale,InstancedView_PrecomputedIndirectSpecularColorScale,InstancedView_AtmosphereLightDirection,InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance,InstancedView_AtmosphereLightIlluminanceOuterSpace,InstancedView_AtmosphereLightDiscLuminance,InstancedView_AtmosphereLightDiscCosHalfApexAngle_PPTrans,InstancedView_SkyViewLutSizeAndInvSize,InstancedView_SkyCameraTranslatedWorldOrigin,InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight,InstancedView_SkyViewLutReferential,InstancedView_SkyAtmosphereSkyLuminanceFactor,InstancedView_SkyAtmospherePresentInScene,InstancedView_SkyAtmosphereHeightFogContribution,InstancedView_SkyAtmosphereBottomRadiusKm,InstancedView_SkyAtmosphereTopRadiusKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume,InstancedView_NormalCurvatureToRoughnessScaleBias,InstancedView_RenderingReflectionCaptureMask,InstancedView_RealTimeReflectionCapture,InstancedView_RealTimeReflectionCapturePreExposure,InstancedView_AmbientCubemapTint,InstancedView_AmbientCubemapIntensity,InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag,InstancedView_SkyLightAffectReflectionFlag,InstancedView_SkyLightAffectGlobalIlluminationFlag,InstancedView_SkyLightColor,InstancedView_MobileSkyIrradianceEnvironmentMap,InstancedView_MobilePreviewMode,InstancedView_HMDEyePaddingOffset,InstancedView_ReflectionCubemapMaxMip,InstancedView_ShowDecalsMask,InstancedView_DistanceFieldAOSpecularOcclusionMode,InstancedView_IndirectCapsuleSelfShadowingIntensity,InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,InstancedView_StereoPassIndex,InstancedView_GlobalVolumeTranslatedCenterAndExtent,InstancedView_GlobalVolumeTranslatedWorldToUVAddAndMul,InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVScale,InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVBias,InstancedView_GlobalDistanceFieldMipFactor,InstancedView_GlobalDistanceFieldMipTransition,InstancedView_GlobalDistanceFieldClipmapSizeInPages,InstancedView_GlobalDistanceFieldInvPageAtlasSize,InstancedView_GlobalDistanceFieldInvCoverageAtlasSize,InstancedView_GlobalVolumeDimension,InstancedView_GlobalVolumeTexelSize,InstancedView_MaxGlobalDFAOConeDistance,InstancedView_NumGlobalSDFClipmaps,InstancedView_CoveredExpandSurfaceScale,InstancedView_NotCoveredExpandSurfaceScale,InstancedView_NotCoveredMinStepScale,InstancedView_DitheredTransparencyStepThreshold,InstancedView_DitheredTransparencyTraceThreshold,InstancedView_CursorPosition,InstancedView_bCheckerboardSubsurfaceProfileRendering,InstancedView_VolumetricFogInvGridSize,InstancedView_VolumetricFogGridZParams,InstancedView_VolumetricFogSVPosToVolumeUV,InstancedView_VolumetricFogScreenUVToHistoryVolumeUV,InstancedView_VolumetricFogMaxDistance,InstancedView_VolumetricLightmapWorldToUVScale,InstancedView_VolumetricLightmapWorldToUVAdd,InstancedView_VolumetricLightmapIndirectionTextureSize,InstancedView_VolumetricLightmapBrickSize,InstancedView_VolumetricLightmapBrickTexelSize,InstancedView_IndirectLightingCacheShowFlag,InstancedView_EyeToPixelSpreadAngle,InstancedView_XRPassthroughCameraUVs,InstancedView_GlobalVirtualTextureMipBias,InstancedView_VirtualTextureFeedbackShift,InstancedView_VirtualTextureFeedbackMask,InstancedView_VirtualTextureFeedbackStride,InstancedView_VirtualTextureFeedbackJitterOffset,InstancedView_VirtualTextureFeedbackSampleOffset,InstancedView_RuntimeVirtualTextureMipLevel,InstancedView_RuntimeVirtualTexturePackHeight,InstancedView_RuntimeVirtualTextureDebugParams,InstancedView_OverrideLandscapeLOD,InstancedView_FarShadowStaticMeshLODBias,InstancedView_MinRoughness,InstancedView_HairRenderInfo,InstancedView_EnableSkyLight,InstancedView_HairRenderInfoBits,InstancedView_HairComponents,InstancedView_bSubsurfacePostprocessEnabled,InstancedView_SSProfilesTextureSizeAndInvSize,InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize,InstancedView_PhysicsFieldClipmapCenter,InstancedView_PhysicsFieldClipmapDistance,InstancedView_PhysicsFieldClipmapResolution,InstancedView_PhysicsFieldClipmapExponent,InstancedView_PhysicsFieldClipmapCount,InstancedView_PhysicsFieldTargetCount,InstancedView_PhysicsFieldTargets,InstancedView_InstanceSceneDataSOAStride,InstancedView_GPUSceneViewId,InstancedView_ViewResolutionFraction,InstancedView_SubSurfaceColorAsTransmittanceAtDistanceInMeters,*/

#line   4 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/SceneTexturesStruct.ush"

cbuffer   SceneTexturesStruct 
{
	 uint BindlessResource_SceneTexturesStruct_SceneColorTexture ;
	 uint  PrePadding_SceneTexturesStruct_4;
	 uint BindlessResource_SceneTexturesStruct_SceneDepthTexture ;
	 uint  PrePadding_SceneTexturesStruct_12;
	 uint BindlessResource_SceneTexturesStruct_GBufferATexture ;
	 uint  PrePadding_SceneTexturesStruct_20;
	 uint BindlessResource_SceneTexturesStruct_GBufferBTexture ;
	 uint  PrePadding_SceneTexturesStruct_28;
	 uint BindlessResource_SceneTexturesStruct_GBufferCTexture ;
	 uint  PrePadding_SceneTexturesStruct_36;
	 uint BindlessResource_SceneTexturesStruct_GBufferDTexture ;
	 uint  PrePadding_SceneTexturesStruct_44;
	 uint BindlessResource_SceneTexturesStruct_GBufferETexture ;
	 uint  PrePadding_SceneTexturesStruct_52;
	 uint BindlessResource_SceneTexturesStruct_GBufferFTexture ;
	 uint  PrePadding_SceneTexturesStruct_60;
	 uint BindlessResource_SceneTexturesStruct_GBufferVelocityTexture ;
	 uint  PrePadding_SceneTexturesStruct_68;
	 uint BindlessResource_SceneTexturesStruct_ScreenSpaceAOTexture ;
	 uint  PrePadding_SceneTexturesStruct_76;
	 uint BindlessResource_SceneTexturesStruct_CustomDepthTexture ;
	 uint  PrePadding_SceneTexturesStruct_84;
	 uint BindlessResource_SceneTexturesStruct_CustomStencilTexture ;
	 uint  PrePadding_SceneTexturesStruct_92;
	 uint BindlessSampler_SceneTexturesStruct_PointClampSampler ;
}
  Texture2D  SceneTexturesStruct_SceneColorTexture ;
  Texture2D  SceneTexturesStruct_SceneDepthTexture ;
  Texture2D  SceneTexturesStruct_GBufferATexture ;
  Texture2D  SceneTexturesStruct_GBufferBTexture ;
  Texture2D  SceneTexturesStruct_GBufferCTexture ;
  Texture2D  SceneTexturesStruct_GBufferDTexture ;
  Texture2D  SceneTexturesStruct_GBufferETexture ;
  Texture2D  SceneTexturesStruct_GBufferFTexture ;
  Texture2D  SceneTexturesStruct_GBufferVelocityTexture ;
  Texture2D  SceneTexturesStruct_ScreenSpaceAOTexture ;
  Texture2D  SceneTexturesStruct_CustomDepthTexture ;
  Texture2D<uint2>  SceneTexturesStruct_CustomStencilTexture ;
  SamplerState  SceneTexturesStruct_PointClampSampler ;
/*atic const struct
{
	Texture2D SceneColorTexture;
	Texture2D SceneDepthTexture;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D GBufferETexture;
	Texture2D GBufferFTexture;
	Texture2D GBufferVelocityTexture;
	Texture2D ScreenSpaceAOTexture;
	Texture2D CustomDepthTexture;
	Texture2D<uint2> CustomStencilTexture;
	SamplerState PointClampSampler;
} SceneTexturesStruct = {SceneTexturesStruct_SceneColorTexture,SceneTexturesStruct_SceneDepthTexture,SceneTexturesStruct_GBufferATexture,SceneTexturesStruct_GBufferBTexture,SceneTexturesStruct_GBufferCTexture,SceneTexturesStruct_GBufferDTexture,SceneTexturesStruct_GBufferETexture,SceneTexturesStruct_GBufferFTexture,SceneTexturesStruct_GBufferVelocityTexture,SceneTexturesStruct_ScreenSpaceAOTexture,SceneTexturesStruct_CustomDepthTexture,SceneTexturesStruct_CustomStencilTexture,SceneTexturesStruct_PointClampSampler,*/

#line   5 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/MobileReflectionCapture.ush"

cbuffer   MobileReflectionCapture 
{
	 float4  MobileReflectionCapture_Params;
	 uint BindlessResource_MobileReflectionCapture_Texture ;
	 uint  PrePadding_MobileReflectionCapture_20;
	 uint BindlessSampler_MobileReflectionCapture_TextureSampler ;
}
  TextureCube  MobileReflectionCapture_Texture ;
  SamplerState  MobileReflectionCapture_TextureSampler ;
/*atic const struct
{
	 float4  Params;
	TextureCube Texture;
	SamplerState TextureSampler;
} MobileReflectionCapture = {MobileReflectionCapture_Params,MobileReflectionCapture_Texture,MobileReflectionCapture_TextureSampler,*/

#line   6 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/InstanceVF.ush"

cbuffer   InstanceVF 
{
	 uint BindlessResource_InstanceVF_VertexFetch_InstanceOriginBuffer ;
	 uint  PrePadding_InstanceVF_4;
	 uint BindlessResource_InstanceVF_VertexFetch_InstanceTransformBuffer ;
	 uint  PrePadding_InstanceVF_12;
	 uint BindlessResource_InstanceVF_VertexFetch_InstanceLightmapBuffer ;
	 uint  PrePadding_InstanceVF_20;
	 uint BindlessResource_InstanceVF_InstanceCustomDataBuffer ;
	 uint  PrePadding_InstanceVF_28;
	 int  InstanceVF_NumCustomDataFloats;
}
  Buffer<float4>  InstanceVF_VertexFetch_InstanceOriginBuffer ;
  Buffer<float4>  InstanceVF_VertexFetch_InstanceTransformBuffer ;
  Buffer<float4>  InstanceVF_VertexFetch_InstanceLightmapBuffer ;
  Buffer<float>  InstanceVF_InstanceCustomDataBuffer ;
/*atic const struct
{
	 int  NumCustomDataFloats;
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
	Buffer<float> InstanceCustomDataBuffer;
} InstanceVF = {InstanceVF_NumCustomDataFloats,InstanceVF_VertexFetch_InstanceOriginBuffer,InstanceVF_VertexFetch_InstanceTransformBuffer,InstanceVF_VertexFetch_InstanceLightmapBuffer,InstanceVF_InstanceCustomDataBuffer,*/

#line   7 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/SingleLayerWater.ush"

cbuffer   SingleLayerWater 
{
	 uint BindlessResource_SingleLayerWater_SceneColorWithoutSingleLayerWaterTexture ;
	 uint  PrePadding_SingleLayerWater_4;
	 uint BindlessSampler_SingleLayerWater_SceneColorWithoutSingleLayerWaterSampler ;
	 uint  PrePadding_SingleLayerWater_12;
	 uint BindlessResource_SingleLayerWater_SceneDepthWithoutSingleLayerWaterTexture ;
	 uint  PrePadding_SingleLayerWater_20;
	 uint BindlessSampler_SingleLayerWater_SceneDepthWithoutSingleLayerWaterSampler ;
	 uint  PrePadding_SingleLayerWater_28;
	 uint BindlessResource_SingleLayerWater_CustomDepthTexture ;
	 uint  PrePadding_SingleLayerWater_36;
	 uint BindlessResource_SingleLayerWater_CustomStencilTexture ;
	 uint  PrePadding_SingleLayerWater_44;
	 uint BindlessSampler_SingleLayerWater_CustomDepthSampler ;
	 uint  PrePadding_SingleLayerWater_52;
	 uint  PrePadding_SingleLayerWater_56;
	 uint  PrePadding_SingleLayerWater_60;
	 float4  SingleLayerWater_SceneWithoutSingleLayerWaterMinMaxUV;
	 float4  SingleLayerWater_DistortionParams;
	 float2  SingleLayerWater_SceneWithoutSingleLayerWaterTextureSize;
	 float2  SingleLayerWater_SceneWithoutSingleLayerWaterInvTextureSize;
	 uint  SingleLayerWater_bMainDirectionalLightVSMFiltering;
	 uint  SingleLayerWater_bSeparateMainDirLightLuminance;
	 float  PrePadding_SingleLayerWater_ForwardDirLightCloudShadow_120;
	 float  PrePadding_SingleLayerWater_ForwardDirLightCloudShadow_124;
	 float4x4  SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTranslatedWorldToLightClipMatrix;
	 float  SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapFarDepthKm;
	 float  PrePadding_SingleLayerWater_ForwardDirLightCloudShadow_196;
	 uint BindlessResource_SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTexture ;
	 uint  PrePadding_SingleLayerWater_ForwardDirLightCloudShadow_204;
	 uint BindlessSampler_SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapSampler ;
	 uint  PrePadding_SingleLayerWater_ForwardDirLightCloudShadow_212;
	 float  SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapStrength;
	 float  PrePadding_SingleLayerWater_BlueNoise_220;
	 int3  SingleLayerWater_BlueNoise_Dimensions;
	 int  PrePadding_SingleLayerWater_BlueNoise_236;
	 int3  SingleLayerWater_BlueNoise_ModuloMasks;
	 int  PrePadding_SingleLayerWater_BlueNoise_252;
	 uint BindlessResource_SingleLayerWater_BlueNoise_ScalarTexture ;
	 uint  PrePadding_SingleLayerWater_BlueNoise_260;
	 uint BindlessResource_SingleLayerWater_BlueNoise_Vec2Texture ;
}
  Texture2D<float3>  SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTexture ;
  SamplerState  SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapSampler ;
  Texture2D  SingleLayerWater_BlueNoise_ScalarTexture ;
  Texture2D  SingleLayerWater_BlueNoise_Vec2Texture ;
  Texture2D  SingleLayerWater_SceneColorWithoutSingleLayerWaterTexture ;
  SamplerState  SingleLayerWater_SceneColorWithoutSingleLayerWaterSampler ;
  Texture2D  SingleLayerWater_SceneDepthWithoutSingleLayerWaterTexture ;
  SamplerState  SingleLayerWater_SceneDepthWithoutSingleLayerWaterSampler ;
  Texture2D  SingleLayerWater_CustomDepthTexture ;
  Texture2D<uint2>  SingleLayerWater_CustomStencilTexture ;
  SamplerState  SingleLayerWater_CustomDepthSampler ;
/*atic const struct
{
	 float4  SceneWithoutSingleLayerWaterMinMaxUV;
	 float4  DistortionParams;
	 float2  SceneWithoutSingleLayerWaterTextureSize;
	 float2  SceneWithoutSingleLayerWaterInvTextureSize;
	 uint  bMainDirectionalLightVSMFiltering;
	 uint  bSeparateMainDirLightLuminance;
struct {
	 float4x4  CloudShadowmapTranslatedWorldToLightClipMatrix;
	 float  CloudShadowmapFarDepthKm;
	 float  CloudShadowmapStrength;
	Texture2D<float3> CloudShadowmapTexture;
	SamplerState CloudShadowmapSampler;
} ForwardDirLightCloudShadow;
struct {
	 int3  Dimensions;
	 int3  ModuloMasks;
	Texture2D ScalarTexture;
	Texture2D Vec2Texture;
} BlueNoise;
	Texture2D SceneColorWithoutSingleLayerWaterTexture;
	SamplerState SceneColorWithoutSingleLayerWaterSampler;
	Texture2D SceneDepthWithoutSingleLayerWaterTexture;
	SamplerState SceneDepthWithoutSingleLayerWaterSampler;
	Texture2D CustomDepthTexture;
	Texture2D<uint2> CustomStencilTexture;
	SamplerState CustomDepthSampler;
} SingleLayerWater = {SingleLayerWater_SceneWithoutSingleLayerWaterMinMaxUV,SingleLayerWater_DistortionParams,SingleLayerWater_SceneWithoutSingleLayerWaterTextureSize,SingleLayerWater_SceneWithoutSingleLayerWaterInvTextureSize,SingleLayerWater_bMainDirectionalLightVSMFiltering,SingleLayerWater_bSeparateMainDirLightLuminance,{SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTranslatedWorldToLightClipMatrix,SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapFarDepthKm,SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapStrength,SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTexture,SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapSampler,},{SingleLayerWater_BlueNoise_Dimensions,SingleLayerWater_BlueNoise_ModuloMasks,SingleLayerWater_BlueNoise_ScalarTexture,SingleLayerWater_BlueNoise_Vec2Texture,},SingleLayerWater_SceneColorWithoutSingleLayerWaterTexture,SingleLayerWater_SceneColorWithoutSingleLayerWaterSampler,SingleLayerWater_SceneDepthWithoutSingleLayerWaterTexture,SingleLayerWater_SceneDepthWithoutSingleLayerWaterSampler,SingleLayerWater_CustomDepthTexture,SingleLayerWater_CustomStencilTexture,SingleLayerWater_CustomDepthSampler,*/

#line   8 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/PrimitiveDither.ush"

cbuffer   PrimitiveDither 
{
	 min16float  PrimitiveDither_LODFactor;
}
/*atic const struct
{
	 min16float  LODFactor;
} PrimitiveDither = {PrimitiveDither_LODFactor,*/

#line   9 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/PrimitiveFade.ush"

cbuffer   PrimitiveFade 
{
	 min16float2  PrimitiveFade_FadeTimeScaleBias;
}
/*atic const struct
{
	 min16float2  FadeTimeScaleBias;
} PrimitiveFade = {PrimitiveFade_FadeTimeScaleBias,*/

#line  10 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/DeferredDecal.ush"

cbuffer   DeferredDecal 
{
	 uint BindlessResource_DeferredDecal_PreviousFrameNormal ;
	 uint  PrePadding_DeferredDecal_4;
	 int  DeferredDecal_NormalReprojectionEnabled;
	 float  DeferredDecal_NormalReprojectionThresholdLow;
	 float  DeferredDecal_NormalReprojectionThresholdHigh;
	 float  DeferredDecal_NormalReprojectionThresholdScaleHelper;
	 float2  DeferredDecal_NormalReprojectionJitter;
}
  Texture2D  DeferredDecal_PreviousFrameNormal ;
/*atic const struct
{
	 int  NormalReprojectionEnabled;
	 float  NormalReprojectionThresholdLow;
	 float  NormalReprojectionThresholdHigh;
	 float  NormalReprojectionThresholdScaleHelper;
	 float2  NormalReprojectionJitter;
	Texture2D PreviousFrameNormal;
} DeferredDecal = {DeferredDecal_NormalReprojectionEnabled,DeferredDecal_NormalReprojectionThresholdLow,DeferredDecal_NormalReprojectionThresholdHigh,DeferredDecal_NormalReprojectionThresholdScaleHelper,DeferredDecal_NormalReprojectionJitter,DeferredDecal_PreviousFrameNormal,*/

#line  11 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/MobileSceneTextures.ush"

cbuffer   MobileSceneTextures 
{
	 uint BindlessResource_MobileSceneTextures_SceneColorTexture ;
	 uint  PrePadding_MobileSceneTextures_4;
	 uint BindlessSampler_MobileSceneTextures_SceneColorTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_12;
	 uint BindlessResource_MobileSceneTextures_SceneDepthTexture ;
	 uint  PrePadding_MobileSceneTextures_20;
	 uint BindlessSampler_MobileSceneTextures_SceneDepthTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_28;
	 uint BindlessResource_MobileSceneTextures_CustomDepthTexture ;
	 uint  PrePadding_MobileSceneTextures_36;
	 uint BindlessSampler_MobileSceneTextures_CustomDepthTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_44;
	 uint BindlessResource_MobileSceneTextures_CustomStencilTexture ;
	 uint  PrePadding_MobileSceneTextures_52;
	 uint BindlessResource_MobileSceneTextures_SceneVelocityTexture ;
	 uint  PrePadding_MobileSceneTextures_60;
	 uint BindlessSampler_MobileSceneTextures_SceneVelocityTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_68;
	 uint BindlessResource_MobileSceneTextures_GBufferATexture ;
	 uint  PrePadding_MobileSceneTextures_76;
	 uint BindlessResource_MobileSceneTextures_GBufferBTexture ;
	 uint  PrePadding_MobileSceneTextures_84;
	 uint BindlessResource_MobileSceneTextures_GBufferCTexture ;
	 uint  PrePadding_MobileSceneTextures_92;
	 uint BindlessResource_MobileSceneTextures_GBufferDTexture ;
	 uint  PrePadding_MobileSceneTextures_100;
	 uint BindlessResource_MobileSceneTextures_SceneDepthAuxTexture ;
	 uint  PrePadding_MobileSceneTextures_108;
	 uint BindlessSampler_MobileSceneTextures_GBufferATextureSampler ;
	 uint  PrePadding_MobileSceneTextures_116;
	 uint BindlessSampler_MobileSceneTextures_GBufferBTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_124;
	 uint BindlessSampler_MobileSceneTextures_GBufferCTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_132;
	 uint BindlessSampler_MobileSceneTextures_GBufferDTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_140;
	 uint BindlessSampler_MobileSceneTextures_SceneDepthAuxTextureSampler ;
}
  Texture2D  MobileSceneTextures_SceneColorTexture ;
  SamplerState  MobileSceneTextures_SceneColorTextureSampler ;
  Texture2D  MobileSceneTextures_SceneDepthTexture ;
  SamplerState  MobileSceneTextures_SceneDepthTextureSampler ;
  Texture2D  MobileSceneTextures_CustomDepthTexture ;
  SamplerState  MobileSceneTextures_CustomDepthTextureSampler ;
  Texture2D<uint2>  MobileSceneTextures_CustomStencilTexture ;
  Texture2D  MobileSceneTextures_SceneVelocityTexture ;
  SamplerState  MobileSceneTextures_SceneVelocityTextureSampler ;
  Texture2D  MobileSceneTextures_GBufferATexture ;
  Texture2D  MobileSceneTextures_GBufferBTexture ;
  Texture2D  MobileSceneTextures_GBufferCTexture ;
  Texture2D  MobileSceneTextures_GBufferDTexture ;
  Texture2D  MobileSceneTextures_SceneDepthAuxTexture ;
  SamplerState  MobileSceneTextures_GBufferATextureSampler ;
  SamplerState  MobileSceneTextures_GBufferBTextureSampler ;
  SamplerState  MobileSceneTextures_GBufferCTextureSampler ;
  SamplerState  MobileSceneTextures_GBufferDTextureSampler ;
  SamplerState  MobileSceneTextures_SceneDepthAuxTextureSampler ;
/*atic const struct
{
	Texture2D SceneColorTexture;
	SamplerState SceneColorTextureSampler;
	Texture2D SceneDepthTexture;
	SamplerState SceneDepthTextureSampler;
	Texture2D CustomDepthTexture;
	SamplerState CustomDepthTextureSampler;
	Texture2D<uint2> CustomStencilTexture;
	Texture2D SceneVelocityTexture;
	SamplerState SceneVelocityTextureSampler;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D SceneDepthAuxTexture;
	SamplerState GBufferATextureSampler;
	SamplerState GBufferBTextureSampler;
	SamplerState GBufferCTextureSampler;
	SamplerState GBufferDTextureSampler;
	SamplerState SceneDepthAuxTextureSampler;
} MobileSceneTextures = {MobileSceneTextures_SceneColorTexture,MobileSceneTextures_SceneColorTextureSampler,MobileSceneTextures_SceneDepthTexture,MobileSceneTextures_SceneDepthTextureSampler,MobileSceneTextures_CustomDepthTexture,MobileSceneTextures_CustomDepthTextureSampler,MobileSceneTextures_CustomStencilTexture,MobileSceneTextures_SceneVelocityTexture,MobileSceneTextures_SceneVelocityTextureSampler,MobileSceneTextures_GBufferATexture,MobileSceneTextures_GBufferBTexture,MobileSceneTextures_GBufferCTexture,MobileSceneTextures_GBufferDTexture,MobileSceneTextures_SceneDepthAuxTexture,MobileSceneTextures_GBufferATextureSampler,MobileSceneTextures_GBufferBTextureSampler,MobileSceneTextures_GBufferCTextureSampler,MobileSceneTextures_GBufferDTextureSampler,MobileSceneTextures_SceneDepthAuxTextureSampler,*/

#line  12 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/Primitive.ush"

cbuffer   Primitive 
{
	 uint  Primitive_Flags;
	 uint  Primitive_InstanceSceneDataOffset;
	 uint  Primitive_NumInstanceSceneDataEntries;
	 int  Primitive_SingleCaptureIndex;
	 float3  Primitive_TilePosition;
	 uint  Primitive_PrimitiveComponentId;
	 float4x4  Primitive_LocalToRelativeWorld;
	 float4x4  Primitive_RelativeWorldToLocal;
	 float4x4  Primitive_PreviousLocalToRelativeWorld;
	 float4x4  Primitive_PreviousRelativeWorldToLocal;
	 float4x4  Primitive_WorldToPreviousWorld;
	 min16float3  Primitive_InvNonUniformScale;
	 float  Primitive_ObjectBoundsX;
	 float4  Primitive_ObjectRelativeWorldPositionAndRadius;
	 float3  Primitive_ActorRelativeWorldPosition;
	 uint  Primitive_LightmapUVIndex;
	 min16float3  Primitive_ObjectOrientation;
	 uint  Primitive_LightmapDataIndex;
	 min16float4  Primitive_NonUniformScale;
	 float3  Primitive_PreSkinnedLocalBoundsMin;
	 uint  Primitive_NaniteResourceID;
	 float3  Primitive_PreSkinnedLocalBoundsMax;
	 uint  Primitive_NaniteHierarchyOffset;
	 float3  Primitive_LocalObjectBoundsMin;
	 float  Primitive_ObjectBoundsY;
	 float3  Primitive_LocalObjectBoundsMax;
	 float  Primitive_ObjectBoundsZ;
	 float3  Primitive_InstanceLocalBoundsCenter;
	 uint  Primitive_InstancePayloadDataOffset;
	 float3  Primitive_InstanceLocalBoundsExtent;
	 uint  Primitive_InstancePayloadDataStride;
	 float3  Primitive_WireframeColor;
	 uint  Primitive_PackedNaniteFlags;
	 float3  Primitive_LevelColor;
	 int  Primitive_PersistentPrimitiveIndex;
	 float2  Primitive_InstanceDrawDistanceMinMaxSquared;
	 float  Primitive_InstanceWPODisableDistanceSquared;
	 uint  Primitive_NaniteRayTracingDataOffset;
	 float  Primitive_MaxWPODisplacement;
	 uint  Primitive_CustomStencilValueAndMask;
	 uint  PrePadding_Primitive_584;
	 uint  PrePadding_Primitive_588;
	 float4  Primitive_CustomPrimitiveData[9];
}
/*atic const struct
{
	 uint  Flags;
	 uint  InstanceSceneDataOffset;
	 uint  NumInstanceSceneDataEntries;
	 int  SingleCaptureIndex;
	 float3  TilePosition;
	 uint  PrimitiveComponentId;
	 float4x4  LocalToRelativeWorld;
	 float4x4  RelativeWorldToLocal;
	 float4x4  PreviousLocalToRelativeWorld;
	 float4x4  PreviousRelativeWorldToLocal;
	 float4x4  WorldToPreviousWorld;
	 min16float3  InvNonUniformScale;
	 float  ObjectBoundsX;
	 float4  ObjectRelativeWorldPositionAndRadius;
	 float3  ActorRelativeWorldPosition;
	 uint  LightmapUVIndex;
	 min16float3  ObjectOrientation;
	 uint  LightmapDataIndex;
	 min16float4  NonUniformScale;
	 float3  PreSkinnedLocalBoundsMin;
	 uint  NaniteResourceID;
	 float3  PreSkinnedLocalBoundsMax;
	 uint  NaniteHierarchyOffset;
	 float3  LocalObjectBoundsMin;
	 float  ObjectBoundsY;
	 float3  LocalObjectBoundsMax;
	 float  ObjectBoundsZ;
	 float3  InstanceLocalBoundsCenter;
	 uint  InstancePayloadDataOffset;
	 float3  InstanceLocalBoundsExtent;
	 uint  InstancePayloadDataStride;
	 float3  WireframeColor;
	 uint  PackedNaniteFlags;
	 float3  LevelColor;
	 int  PersistentPrimitiveIndex;
	 float2  InstanceDrawDistanceMinMaxSquared;
	 float  InstanceWPODisableDistanceSquared;
	 uint  NaniteRayTracingDataOffset;
	 float  MaxWPODisplacement;
	 uint  CustomStencilValueAndMask;
	 float4  CustomPrimitiveData[9];
} Primitive = {Primitive_Flags,Primitive_InstanceSceneDataOffset,Primitive_NumInstanceSceneDataEntries,Primitive_SingleCaptureIndex,Primitive_TilePosition,Primitive_PrimitiveComponentId,Primitive_LocalToRelativeWorld,Primitive_RelativeWorldToLocal,Primitive_PreviousLocalToRelativeWorld,Primitive_PreviousRelativeWorldToLocal,Primitive_WorldToPreviousWorld,Primitive_InvNonUniformScale,Primitive_ObjectBoundsX,Primitive_ObjectRelativeWorldPositionAndRadius,Primitive_ActorRelativeWorldPosition,Primitive_LightmapUVIndex,Primitive_ObjectOrientation,Primitive_LightmapDataIndex,Primitive_NonUniformScale,Primitive_PreSkinnedLocalBoundsMin,Primitive_NaniteResourceID,Primitive_PreSkinnedLocalBoundsMax,Primitive_NaniteHierarchyOffset,Primitive_LocalObjectBoundsMin,Primitive_ObjectBoundsY,Primitive_LocalObjectBoundsMax,Primitive_ObjectBoundsZ,Primitive_InstanceLocalBoundsCenter,Primitive_InstancePayloadDataOffset,Primitive_InstanceLocalBoundsExtent,Primitive_InstancePayloadDataStride,Primitive_WireframeColor,Primitive_PackedNaniteFlags,Primitive_LevelColor,Primitive_PersistentPrimitiveIndex,Primitive_InstanceDrawDistanceMinMaxSquared,Primitive_InstanceWPODisableDistanceSquared,Primitive_NaniteRayTracingDataOffset,Primitive_MaxWPODisplacement,Primitive_CustomStencilValueAndMask,Primitive_CustomPrimitiveData,*/

#line  13 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/InstanceCulling.ush"

cbuffer   InstanceCulling 
{
	 uint BindlessResource_InstanceCulling_InstanceIdsBuffer ;
	 uint  PrePadding_InstanceCulling_4;
	 uint BindlessResource_InstanceCulling_PageInfoBuffer ;
	 uint  PrePadding_InstanceCulling_12;
	 uint  InstanceCulling_BufferCapacity;
}
  StructuredBuffer<uint>  InstanceCulling_InstanceIdsBuffer ;
  StructuredBuffer<uint>  InstanceCulling_PageInfoBuffer ;
/*atic const struct
{
	 uint  BufferCapacity;
	StructuredBuffer<uint> InstanceIdsBuffer;
	StructuredBuffer<uint> PageInfoBuffer;
} InstanceCulling = {InstanceCulling_BufferCapacity,InstanceCulling_InstanceIdsBuffer,InstanceCulling_PageInfoBuffer,*/

#line  14 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/SpeedTreeData.ush"

cbuffer   SpeedTreeData 
{
	 float4  SpeedTreeData_WindVector;
	 float4  SpeedTreeData_WindGlobal;
	 float4  SpeedTreeData_WindBranch;
	 float4  SpeedTreeData_WindBranchTwitch;
	 float4  SpeedTreeData_WindBranchWhip;
	 float4  SpeedTreeData_WindBranchAnchor;
	 float4  SpeedTreeData_WindBranchAdherences;
	 float4  SpeedTreeData_WindTurbulences;
	 float4  SpeedTreeData_WindLeaf1Ripple;
	 float4  SpeedTreeData_WindLeaf1Tumble;
	 float4  SpeedTreeData_WindLeaf1Twitch;
	 float4  SpeedTreeData_WindLeaf2Ripple;
	 float4  SpeedTreeData_WindLeaf2Tumble;
	 float4  SpeedTreeData_WindLeaf2Twitch;
	 float4  SpeedTreeData_WindFrondRipple;
	 float4  SpeedTreeData_WindRollingBranch;
	 float4  SpeedTreeData_WindRollingLeafAndDirection;
	 float4  SpeedTreeData_WindRollingNoise;
	 float4  SpeedTreeData_WindAnimation;
	 float4  SpeedTreeData_PrevWindVector;
	 float4  SpeedTreeData_PrevWindGlobal;
	 float4  SpeedTreeData_PrevWindBranch;
	 float4  SpeedTreeData_PrevWindBranchTwitch;
	 float4  SpeedTreeData_PrevWindBranchWhip;
	 float4  SpeedTreeData_PrevWindBranchAnchor;
	 float4  SpeedTreeData_PrevWindBranchAdherences;
	 float4  SpeedTreeData_PrevWindTurbulences;
	 float4  SpeedTreeData_PrevWindLeaf1Ripple;
	 float4  SpeedTreeData_PrevWindLeaf1Tumble;
	 float4  SpeedTreeData_PrevWindLeaf1Twitch;
	 float4  SpeedTreeData_PrevWindLeaf2Ripple;
	 float4  SpeedTreeData_PrevWindLeaf2Tumble;
	 float4  SpeedTreeData_PrevWindLeaf2Twitch;
	 float4  SpeedTreeData_PrevWindFrondRipple;
	 float4  SpeedTreeData_PrevWindRollingBranch;
	 float4  SpeedTreeData_PrevWindRollingLeafAndDirection;
	 float4  SpeedTreeData_PrevWindRollingNoise;
	 float4  SpeedTreeData_PrevWindAnimation;
}
/*atic const struct
{
	 float4  WindVector;
	 float4  WindGlobal;
	 float4  WindBranch;
	 float4  WindBranchTwitch;
	 float4  WindBranchWhip;
	 float4  WindBranchAnchor;
	 float4  WindBranchAdherences;
	 float4  WindTurbulences;
	 float4  WindLeaf1Ripple;
	 float4  WindLeaf1Tumble;
	 float4  WindLeaf1Twitch;
	 float4  WindLeaf2Ripple;
	 float4  WindLeaf2Tumble;
	 float4  WindLeaf2Twitch;
	 float4  WindFrondRipple;
	 float4  WindRollingBranch;
	 float4  WindRollingLeafAndDirection;
	 float4  WindRollingNoise;
	 float4  WindAnimation;
	 float4  PrevWindVector;
	 float4  PrevWindGlobal;
	 float4  PrevWindBranch;
	 float4  PrevWindBranchTwitch;
	 float4  PrevWindBranchWhip;
	 float4  PrevWindBranchAnchor;
	 float4  PrevWindBranchAdherences;
	 float4  PrevWindTurbulences;
	 float4  PrevWindLeaf1Ripple;
	 float4  PrevWindLeaf1Tumble;
	 float4  PrevWindLeaf1Twitch;
	 float4  PrevWindLeaf2Ripple;
	 float4  PrevWindLeaf2Tumble;
	 float4  PrevWindLeaf2Twitch;
	 float4  PrevWindFrondRipple;
	 float4  PrevWindRollingBranch;
	 float4  PrevWindRollingLeafAndDirection;
	 float4  PrevWindRollingNoise;
	 float4  PrevWindAnimation;
} SpeedTreeData = {SpeedTreeData_WindVector,SpeedTreeData_WindGlobal,SpeedTreeData_WindBranch,SpeedTreeData_WindBranchTwitch,SpeedTreeData_WindBranchWhip,SpeedTreeData_WindBranchAnchor,SpeedTreeData_WindBranchAdherences,SpeedTreeData_WindTurbulences,SpeedTreeData_WindLeaf1Ripple,SpeedTreeData_WindLeaf1Tumble,SpeedTreeData_WindLeaf1Twitch,SpeedTreeData_WindLeaf2Ripple,SpeedTreeData_WindLeaf2Tumble,SpeedTreeData_WindLeaf2Twitch,SpeedTreeData_WindFrondRipple,SpeedTreeData_WindRollingBranch,SpeedTreeData_WindRollingLeafAndDirection,SpeedTreeData_WindRollingNoise,SpeedTreeData_WindAnimation,SpeedTreeData_PrevWindVector,SpeedTreeData_PrevWindGlobal,SpeedTreeData_PrevWindBranch,SpeedTreeData_PrevWindBranchTwitch,SpeedTreeData_PrevWindBranchWhip,SpeedTreeData_PrevWindBranchAnchor,SpeedTreeData_PrevWindBranchAdherences,SpeedTreeData_PrevWindTurbulences,SpeedTreeData_PrevWindLeaf1Ripple,SpeedTreeData_PrevWindLeaf1Tumble,SpeedTreeData_PrevWindLeaf1Twitch,SpeedTreeData_PrevWindLeaf2Ripple,SpeedTreeData_PrevWindLeaf2Tumble,SpeedTreeData_PrevWindLeaf2Twitch,SpeedTreeData_PrevWindFrondRipple,SpeedTreeData_PrevWindRollingBranch,SpeedTreeData_PrevWindRollingLeafAndDirection,SpeedTreeData_PrevWindRollingNoise,SpeedTreeData_PrevWindAnimation,*/

#line  15 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/Atmosphere.ush"

cbuffer   Atmosphere 
{
	 float  Atmosphere_MultiScatteringFactor;
	 float  Atmosphere_BottomRadiusKm;
	 float  Atmosphere_TopRadiusKm;
	 float  Atmosphere_RayleighDensityExpScale;
	 float4  Atmosphere_RayleighScattering;
	 float4  Atmosphere_MieScattering;
	 float  Atmosphere_MieDensityExpScale;
	 float  PrePadding_Atmosphere_52;
	 float  PrePadding_Atmosphere_56;
	 float  PrePadding_Atmosphere_60;
	 float4  Atmosphere_MieExtinction;
	 float  Atmosphere_MiePhaseG;
	 float  PrePadding_Atmosphere_84;
	 float  PrePadding_Atmosphere_88;
	 float  PrePadding_Atmosphere_92;
	 float4  Atmosphere_MieAbsorption;
	 float  Atmosphere_AbsorptionDensity0LayerWidth;
	 float  Atmosphere_AbsorptionDensity0ConstantTerm;
	 float  Atmosphere_AbsorptionDensity0LinearTerm;
	 float  Atmosphere_AbsorptionDensity1ConstantTerm;
	 float  Atmosphere_AbsorptionDensity1LinearTerm;
	 float  PrePadding_Atmosphere_132;
	 float  PrePadding_Atmosphere_136;
	 float  PrePadding_Atmosphere_140;
	 float4  Atmosphere_AbsorptionExtinction;
	 float4  Atmosphere_GroundAlbedo;
}
/*atic const struct
{
	 float  MultiScatteringFactor;
	 float  BottomRadiusKm;
	 float  TopRadiusKm;
	 float  RayleighDensityExpScale;
	 float4  RayleighScattering;
	 float4  MieScattering;
	 float  MieDensityExpScale;
	 float4  MieExtinction;
	 float  MiePhaseG;
	 float4  MieAbsorption;
	 float  AbsorptionDensity0LayerWidth;
	 float  AbsorptionDensity0ConstantTerm;
	 float  AbsorptionDensity0LinearTerm;
	 float  AbsorptionDensity1ConstantTerm;
	 float  AbsorptionDensity1LinearTerm;
	 float4  AbsorptionExtinction;
	 float4  GroundAlbedo;
} Atmosphere = {Atmosphere_MultiScatteringFactor,Atmosphere_BottomRadiusKm,Atmosphere_TopRadiusKm,Atmosphere_RayleighDensityExpScale,Atmosphere_RayleighScattering,Atmosphere_MieScattering,Atmosphere_MieDensityExpScale,Atmosphere_MieExtinction,Atmosphere_MiePhaseG,Atmosphere_MieAbsorption,Atmosphere_AbsorptionDensity0LayerWidth,Atmosphere_AbsorptionDensity0ConstantTerm,Atmosphere_AbsorptionDensity0LinearTerm,Atmosphere_AbsorptionDensity1ConstantTerm,Atmosphere_AbsorptionDensity1LinearTerm,Atmosphere_AbsorptionExtinction,Atmosphere_GroundAlbedo,*/

#line  16 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"

cbuffer   OpaqueBasePass 
{
	 uint  OpaqueBasePass_Shared_Forward_NumLocalLights;
	 uint  OpaqueBasePass_Shared_Forward_NumReflectionCaptures;
	 uint  OpaqueBasePass_Shared_Forward_HasDirectionalLight;
	 uint  OpaqueBasePass_Shared_Forward_NumGridCells;
	 int3  OpaqueBasePass_Shared_Forward_CulledGridSize;
	 uint  OpaqueBasePass_Shared_Forward_MaxCulledLightsPerCell;
	 uint  OpaqueBasePass_Shared_Forward_LightGridPixelSizeShift;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_36;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_40;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_44;
	 float3  OpaqueBasePass_Shared_Forward_LightGridZParams;
	 float  PrePadding_OpaqueBasePass_Shared_Forward_60;
	 float3  OpaqueBasePass_Shared_Forward_DirectionalLightDirection;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSourceRadius;
	 float3  OpaqueBasePass_Shared_Forward_DirectionalLightColor;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity;
	 uint  OpaqueBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_100;
	 float2  OpaqueBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD;
	 uint  OpaqueBasePass_Shared_Forward_NumDirectionalLightCascades;
	 int  OpaqueBasePass_Shared_Forward_DirectionalLightVSM;
	 int  PrePadding_OpaqueBasePass_Shared_Forward_120;
	 int  PrePadding_OpaqueBasePass_Shared_Forward_124;
	 float4  OpaqueBasePass_Shared_Forward_CascadeEndDepths;
	 float4x4  OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapMinMax[4];
	 float4  OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightDepthBias;
	 uint  OpaqueBasePass_Shared_Forward_DirectionalLightUseStaticShadowing;
	 uint  OpaqueBasePass_Shared_Forward_SimpleLightsEndIndex;
	 uint  OpaqueBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex;
	 uint  OpaqueBasePass_Shared_Forward_LumenSupportedStartIndex;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_500;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_504;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_508;
	 float4  OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize;
	 float4x4  OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  OpaqueBasePass_Shared_Forward_DirectLightingShowFlag;
	 float  PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_596;
	 float  PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_600;
	 float  PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_604;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_644;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_648;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_652;
	 uint BindlessResource_OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_660;
	 uint BindlessSampler_OpaqueBasePass_Shared_Forward_ShadowmapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_668;
	 uint BindlessResource_OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_676;
	 uint BindlessSampler_OpaqueBasePass_Shared_Forward_StaticShadowmapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_684;
	 uint BindlessResource_OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer ;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_692;
	 uint BindlessResource_OpaqueBasePass_Shared_Forward_NumCulledLightsGrid ;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_700;
	 uint BindlessResource_OpaqueBasePass_Shared_Forward_CulledLightDataGrid ;
	 float  PrePadding_OpaqueBasePass_Shared_ForwardISR_708;
	 float  PrePadding_OpaqueBasePass_Shared_ForwardISR_712;
	 float  PrePadding_OpaqueBasePass_Shared_ForwardISR_716;
	 uint  OpaqueBasePass_Shared_ForwardISR_NumLocalLights;
	 uint  OpaqueBasePass_Shared_ForwardISR_NumReflectionCaptures;
	 uint  OpaqueBasePass_Shared_ForwardISR_HasDirectionalLight;
	 uint  OpaqueBasePass_Shared_ForwardISR_NumGridCells;
	 int3  OpaqueBasePass_Shared_ForwardISR_CulledGridSize;
	 uint  OpaqueBasePass_Shared_ForwardISR_MaxCulledLightsPerCell;
	 uint  OpaqueBasePass_Shared_ForwardISR_LightGridPixelSizeShift;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_756;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_760;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_764;
	 float3  OpaqueBasePass_Shared_ForwardISR_LightGridZParams;
	 float  PrePadding_OpaqueBasePass_Shared_ForwardISR_780;
	 float3  OpaqueBasePass_Shared_ForwardISR_DirectionalLightDirection;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSourceRadius;
	 float3  OpaqueBasePass_Shared_ForwardISR_DirectionalLightColor;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity;
	 uint  OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_820;
	 float2  OpaqueBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD;
	 uint  OpaqueBasePass_Shared_ForwardISR_NumDirectionalLightCascades;
	 int  OpaqueBasePass_Shared_ForwardISR_DirectionalLightVSM;
	 int  PrePadding_OpaqueBasePass_Shared_ForwardISR_840;
	 int  PrePadding_OpaqueBasePass_Shared_ForwardISR_844;
	 float4  OpaqueBasePass_Shared_ForwardISR_CascadeEndDepths;
	 float4x4  OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax[4];
	 float4  OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightDepthBias;
	 uint  OpaqueBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing;
	 uint  OpaqueBasePass_Shared_ForwardISR_SimpleLightsEndIndex;
	 uint  OpaqueBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex;
	 uint  OpaqueBasePass_Shared_ForwardISR_LumenSupportedStartIndex;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1220;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1224;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1228;
	 float4  OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize;
	 float4x4  OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  OpaqueBasePass_Shared_ForwardISR_DirectLightingShowFlag;
	 float  PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1316;
	 float  PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1320;
	 float  PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1324;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1364;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1368;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1372;
	 uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1380;
	 uint BindlessSampler_OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1388;
	 uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1396;
	 uint BindlessSampler_OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1404;
	 uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer ;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1412;
	 uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid ;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1420;
	 uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid ;
	 float  PrePadding_OpaqueBasePass_Shared_Reflection_1428;
	 float  PrePadding_OpaqueBasePass_Shared_Reflection_1432;
	 float  PrePadding_OpaqueBasePass_Shared_Reflection_1436;
	 float4  OpaqueBasePass_Shared_Reflection_SkyLightParameters;
	 uint BindlessResource_OpaqueBasePass_Shared_Reflection_SkyLightCubemap ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1460;
	 uint BindlessSampler_OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1468;
	 uint BindlessResource_OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1476;
	 uint BindlessSampler_OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1484;
	 uint BindlessResource_OpaqueBasePass_Shared_Reflection_ReflectionCubemap ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1492;
	 uint BindlessSampler_OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1500;
	 uint BindlessResource_OpaqueBasePass_Shared_Reflection_PreIntegratedGF ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1508;
	 uint BindlessSampler_OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler ;
	 float  PrePadding_OpaqueBasePass_Shared_PlanarReflection_1516;
	 float4  OpaqueBasePass_Shared_PlanarReflection_ReflectionPlane;
	 float4  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionOrigin;
	 float4  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionXAxis;
	 float4  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionYAxis;
	 float3x4  OpaqueBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix;
	 float3  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters;
	 float  PrePadding_OpaqueBasePass_Shared_PlanarReflection_1644;
	 float2  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters2;
	 float  PrePadding_OpaqueBasePass_Shared_PlanarReflection_1656;
	 float  PrePadding_OpaqueBasePass_Shared_PlanarReflection_1660;
	 float4x4  OpaqueBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV[2];
	 float4  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias[2];
	 float2  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound;
	 uint  OpaqueBasePass_Shared_PlanarReflection_bIsStereo;
	 uint  PrePadding_OpaqueBasePass_Shared_PlanarReflection_1836;
	 uint BindlessResource_OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture ;
	 uint  PrePadding_OpaqueBasePass_Shared_PlanarReflection_1844;
	 uint BindlessSampler_OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler ;
	 float  PrePadding_OpaqueBasePass_Shared_Fog_1852;
	 float4  OpaqueBasePass_Shared_Fog_ExponentialFogParameters;
	 float4  OpaqueBasePass_Shared_Fog_ExponentialFogParameters2;
	 float4  OpaqueBasePass_Shared_Fog_ExponentialFogColorParameter;
	 float4  OpaqueBasePass_Shared_Fog_ExponentialFogParameters3;
	 float4  OpaqueBasePass_Shared_Fog_SkyAtmosphereAmbientContributionColorScale;
	 float4  OpaqueBasePass_Shared_Fog_InscatteringLightDirection;
	 float4  OpaqueBasePass_Shared_Fog_DirectionalInscatteringColor;
	 float2  OpaqueBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation;
	 float  PrePadding_OpaqueBasePass_Shared_Fog_1976;
	 float  PrePadding_OpaqueBasePass_Shared_Fog_1980;
	 float3  OpaqueBasePass_Shared_Fog_FogInscatteringTextureParameters;
	 float  OpaqueBasePass_Shared_Fog_ApplyVolumetricFog;
	 float  OpaqueBasePass_Shared_Fog_VolumetricFogStartDistance;
	 float  OpaqueBasePass_Shared_Fog_VolumetricFogNearFadeInDistanceInv;
	 uint BindlessResource_OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap ;
	 uint  PrePadding_OpaqueBasePass_Shared_Fog_2012;
	 uint BindlessSampler_OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_Fog_2020;
	 uint BindlessResource_OpaqueBasePass_Shared_Fog_IntegratedLightScattering ;
	 uint  PrePadding_OpaqueBasePass_Shared_Fog_2028;
	 uint BindlessSampler_OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler ;
	 float  PrePadding_OpaqueBasePass_Shared_FogISR_2036;
	 float  PrePadding_OpaqueBasePass_Shared_FogISR_2040;
	 float  PrePadding_OpaqueBasePass_Shared_FogISR_2044;
	 float4  OpaqueBasePass_Shared_FogISR_ExponentialFogParameters;
	 float4  OpaqueBasePass_Shared_FogISR_ExponentialFogParameters2;
	 float4  OpaqueBasePass_Shared_FogISR_ExponentialFogColorParameter;
	 float4  OpaqueBasePass_Shared_FogISR_ExponentialFogParameters3;
	 float4  OpaqueBasePass_Shared_FogISR_SkyAtmosphereAmbientContributionColorScale;
	 float4  OpaqueBasePass_Shared_FogISR_InscatteringLightDirection;
	 float4  OpaqueBasePass_Shared_FogISR_DirectionalInscatteringColor;
	 float2  OpaqueBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation;
	 float  PrePadding_OpaqueBasePass_Shared_FogISR_2168;
	 float  PrePadding_OpaqueBasePass_Shared_FogISR_2172;
	 float3  OpaqueBasePass_Shared_FogISR_FogInscatteringTextureParameters;
	 float  OpaqueBasePass_Shared_FogISR_ApplyVolumetricFog;
	 float  OpaqueBasePass_Shared_FogISR_VolumetricFogStartDistance;
	 float  OpaqueBasePass_Shared_FogISR_VolumetricFogNearFadeInDistanceInv;
	 uint BindlessResource_OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap ;
	 uint  PrePadding_OpaqueBasePass_Shared_FogISR_2204;
	 uint BindlessSampler_OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_FogISR_2212;
	 uint BindlessResource_OpaqueBasePass_Shared_FogISR_IntegratedLightScattering ;
	 uint  PrePadding_OpaqueBasePass_Shared_FogISR_2220;
	 uint BindlessSampler_OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler ;
	 float  PrePadding_OpaqueBasePass_Shared_2228;
	 float  PrePadding_OpaqueBasePass_Shared_2232;
	 float  PrePadding_OpaqueBasePass_Shared_2236;
	 uint  OpaqueBasePass_Shared_UseBasePassSkylight;
	 float  PrePadding_OpaqueBasePass_Strata_2244;
	 float  PrePadding_OpaqueBasePass_Strata_2248;
	 float  PrePadding_OpaqueBasePass_Strata_2252;
	 uint  OpaqueBasePass_Strata_MaxBytesPerPixel;
	 uint  OpaqueBasePass_Strata_bRoughDiffuse;
	 uint  OpaqueBasePass_Strata_PeelLayersAboveDepth;
	 uint  OpaqueBasePass_Strata_bRoughnessTracking;
	 int  OpaqueBasePass_Strata_SliceStoringDebugStrataTreeDataWithoutMRT;
	 int  OpaqueBasePass_Strata_FirstSliceStoringStrataSSSDataWithoutMRT;
	 uint BindlessResource_OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs ;
	 uint  PrePadding_OpaqueBasePass_Strata_2284;
	 uint BindlessResource_OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV ;
	 float  PrePadding_OpaqueBasePass_2292;
	 float  PrePadding_OpaqueBasePass_2296;
	 float  PrePadding_OpaqueBasePass_2300;
	 int  OpaqueBasePass_UseForwardScreenSpaceShadowMask;
	 int  PrePadding_OpaqueBasePass_2308;
	 uint BindlessResource_OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture ;
	 uint  PrePadding_OpaqueBasePass_2316;
	 uint BindlessResource_OpaqueBasePass_IndirectOcclusionTexture ;
	 uint  PrePadding_OpaqueBasePass_2324;
	 uint BindlessResource_OpaqueBasePass_ResolvedSceneDepthTexture ;
	 float  PrePadding_OpaqueBasePass_2332;
	 uint BindlessResource_OpaqueBasePass_DBufferATexture ;
	 uint  PrePadding_OpaqueBasePass_2340;
	 uint BindlessResource_OpaqueBasePass_DBufferBTexture ;
	 uint  PrePadding_OpaqueBasePass_2348;
	 uint BindlessResource_OpaqueBasePass_DBufferCTexture ;
	 uint  PrePadding_OpaqueBasePass_2356;
	 uint BindlessResource_OpaqueBasePass_DBufferRenderMask ;
	 uint  PrePadding_OpaqueBasePass_2364;
	 uint BindlessSampler_OpaqueBasePass_DBufferATextureSampler ;
	 uint  PrePadding_OpaqueBasePass_2372;
	 uint BindlessSampler_OpaqueBasePass_DBufferBTextureSampler ;
	 uint  PrePadding_OpaqueBasePass_2380;
	 uint BindlessSampler_OpaqueBasePass_DBufferCTextureSampler ;
	 uint  PrePadding_OpaqueBasePass_2388;
	 uint  PrePadding_OpaqueBasePass_2392;
	 uint  PrePadding_OpaqueBasePass_2396;
	 uint BindlessResource_OpaqueBasePass_PreIntegratedGFTexture ;
	 uint  PrePadding_OpaqueBasePass_2404;
	 uint BindlessSampler_OpaqueBasePass_PreIntegratedGFSampler ;
	 uint  PrePadding_OpaqueBasePass_2412;
	 int  OpaqueBasePass_Is24BitUnormDepthStencil;
	 int  PrePadding_OpaqueBasePass_2420;
	 uint BindlessResource_OpaqueBasePass_EyeAdaptationBuffer ;
}
  Texture2D  OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas ;
  SamplerState  OpaqueBasePass_Shared_Forward_ShadowmapSampler ;
  Texture2D  OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap ;
  SamplerState  OpaqueBasePass_Shared_Forward_StaticShadowmapSampler ;
  Buffer<float4>  OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer ;
  Buffer<uint>  OpaqueBasePass_Shared_Forward_NumCulledLightsGrid ;
  Buffer<uint>  OpaqueBasePass_Shared_Forward_CulledLightDataGrid ;
  Texture2D  OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas ;
  SamplerState  OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler ;
  Texture2D  OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap ;
  SamplerState  OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler ;
  Buffer<float4>  OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer ;
  Buffer<uint>  OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid ;
  Buffer<uint>  OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid ;
  TextureCube  OpaqueBasePass_Shared_Reflection_SkyLightCubemap ;
  SamplerState  OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler ;
  TextureCube  OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap ;
  SamplerState  OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler ;
  TextureCubeArray  OpaqueBasePass_Shared_Reflection_ReflectionCubemap ;
  SamplerState  OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler ;
  Texture2D  OpaqueBasePass_Shared_Reflection_PreIntegratedGF ;
  SamplerState  OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler ;
  Texture2D  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture ;
  SamplerState  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler ;
  TextureCube  OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap ;
  SamplerState  OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler ;
  Texture3D  OpaqueBasePass_Shared_Fog_IntegratedLightScattering ;
  SamplerState  OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler ;
  TextureCube  OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap ;
  SamplerState  OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler ;
  Texture3D  OpaqueBasePass_Shared_FogISR_IntegratedLightScattering ;
  SamplerState  OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler ;
  RWTexture2DArray<uint>  OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs ;
  RWTexture2D<float3>  OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV ;
  Texture2D  OpaqueBasePass_DBufferATexture ;
  Texture2D  OpaqueBasePass_DBufferBTexture ;
  Texture2D  OpaqueBasePass_DBufferCTexture ;
  Texture2D<uint>  OpaqueBasePass_DBufferRenderMask ;
  SamplerState  OpaqueBasePass_DBufferATextureSampler ;
  SamplerState  OpaqueBasePass_DBufferBTextureSampler ;
  SamplerState  OpaqueBasePass_DBufferCTextureSampler ;
  Texture2D  OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture ;
  Texture2D  OpaqueBasePass_IndirectOcclusionTexture ;
  Texture2D  OpaqueBasePass_ResolvedSceneDepthTexture ;
  Texture2D  OpaqueBasePass_PreIntegratedGFTexture ;
  SamplerState  OpaqueBasePass_PreIntegratedGFSampler ;
  StructuredBuffer<float4>  OpaqueBasePass_EyeAdaptationBuffer ;
/*atic const struct
{
struct {
struct {
	 uint  NumLocalLights;
	 uint  NumReflectionCaptures;
	 uint  HasDirectionalLight;
	 uint  NumGridCells;
	 int3  CulledGridSize;
	 uint  MaxCulledLightsPerCell;
	 uint  LightGridPixelSizeShift;
	 float3  LightGridZParams;
	 float3  DirectionalLightDirection;
	 float  DirectionalLightSourceRadius;
	 float3  DirectionalLightColor;
	 float  DirectionalLightVolumetricScatteringIntensity;
	 uint  DirectionalLightShadowMapChannelMask;
	 float2  DirectionalLightDistanceFadeMAD;
	 uint  NumDirectionalLightCascades;
	 int  DirectionalLightVSM;
	 float4  CascadeEndDepths;
	 float4x4  DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  DirectionalLightShadowmapMinMax[4];
	 float4  DirectionalLightShadowmapAtlasBufferSize;
	 float  DirectionalLightDepthBias;
	 uint  DirectionalLightUseStaticShadowing;
	 uint  SimpleLightsEndIndex;
	 uint  ClusteredDeferredSupportedEndIndex;
	 uint  LumenSupportedStartIndex;
	 float4  DirectionalLightStaticShadowBufferSize;
	 float4x4  DirectionalLightTranslatedWorldToStaticShadow;
	 uint  DirectLightingShowFlag;
struct {
	 float  ScreenRayLength;
	 int  SMRTRayCount;
	 int  SMRTSamplesPerRay;
	 float  SMRTRayLengthScale;
	 float  SMRTCotMaxRayAngleFromLight;
	 float  SMRTTexelDitherScale;
	 float  SMRTExtrapolateSlope;
	 float  SMRTMaxSlopeBias;
	 uint  SMRTAdaptiveRayCount;
} DirectionalLightSMRTSettings;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
} Forward;
struct {
	 uint  NumLocalLights;
	 uint  NumReflectionCaptures;
	 uint  HasDirectionalLight;
	 uint  NumGridCells;
	 int3  CulledGridSize;
	 uint  MaxCulledLightsPerCell;
	 uint  LightGridPixelSizeShift;
	 float3  LightGridZParams;
	 float3  DirectionalLightDirection;
	 float  DirectionalLightSourceRadius;
	 float3  DirectionalLightColor;
	 float  DirectionalLightVolumetricScatteringIntensity;
	 uint  DirectionalLightShadowMapChannelMask;
	 float2  DirectionalLightDistanceFadeMAD;
	 uint  NumDirectionalLightCascades;
	 int  DirectionalLightVSM;
	 float4  CascadeEndDepths;
	 float4x4  DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  DirectionalLightShadowmapMinMax[4];
	 float4  DirectionalLightShadowmapAtlasBufferSize;
	 float  DirectionalLightDepthBias;
	 uint  DirectionalLightUseStaticShadowing;
	 uint  SimpleLightsEndIndex;
	 uint  ClusteredDeferredSupportedEndIndex;
	 uint  LumenSupportedStartIndex;
	 float4  DirectionalLightStaticShadowBufferSize;
	 float4x4  DirectionalLightTranslatedWorldToStaticShadow;
	 uint  DirectLightingShowFlag;
struct {
	 float  ScreenRayLength;
	 int  SMRTRayCount;
	 int  SMRTSamplesPerRay;
	 float  SMRTRayLengthScale;
	 float  SMRTCotMaxRayAngleFromLight;
	 float  SMRTTexelDitherScale;
	 float  SMRTExtrapolateSlope;
	 float  SMRTMaxSlopeBias;
	 uint  SMRTAdaptiveRayCount;
} DirectionalLightSMRTSettings;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
} ForwardISR;
struct {
	 float4  SkyLightParameters;
	TextureCube SkyLightCubemap;
	SamplerState SkyLightCubemapSampler;
	TextureCube SkyLightBlendDestinationCubemap;
	SamplerState SkyLightBlendDestinationCubemapSampler;
	TextureCubeArray ReflectionCubemap;
	SamplerState ReflectionCubemapSampler;
	Texture2D PreIntegratedGF;
	SamplerState PreIntegratedGFSampler;
} Reflection;
struct {
	 float4  ReflectionPlane;
	 float4  PlanarReflectionOrigin;
	 float4  PlanarReflectionXAxis;
	 float4  PlanarReflectionYAxis;
	 float3x4  InverseTransposeMirrorMatrix;
	 float3  PlanarReflectionParameters;
	 float2  PlanarReflectionParameters2;
	 float4x4  ProjectionWithExtraFOV[2];
	 float4  PlanarReflectionScreenScaleBias[2];
	 float2  PlanarReflectionScreenBound;
	 uint  bIsStereo;
	Texture2D PlanarReflectionTexture;
	SamplerState PlanarReflectionSampler;
} PlanarReflection;
struct {
	 float4  ExponentialFogParameters;
	 float4  ExponentialFogParameters2;
	 float4  ExponentialFogColorParameter;
	 float4  ExponentialFogParameters3;
	 float4  SkyAtmosphereAmbientContributionColorScale;
	 float4  InscatteringLightDirection;
	 float4  DirectionalInscatteringColor;
	 float2  SinCosInscatteringColorCubemapRotation;
	 float3  FogInscatteringTextureParameters;
	 float  ApplyVolumetricFog;
	 float  VolumetricFogStartDistance;
	 float  VolumetricFogNearFadeInDistanceInv;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} Fog;
struct {
	 float4  ExponentialFogParameters;
	 float4  ExponentialFogParameters2;
	 float4  ExponentialFogColorParameter;
	 float4  ExponentialFogParameters3;
	 float4  SkyAtmosphereAmbientContributionColorScale;
	 float4  InscatteringLightDirection;
	 float4  DirectionalInscatteringColor;
	 float2  SinCosInscatteringColorCubemapRotation;
	 float3  FogInscatteringTextureParameters;
	 float  ApplyVolumetricFog;
	 float  VolumetricFogStartDistance;
	 float  VolumetricFogNearFadeInDistanceInv;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} FogISR;
	 uint  UseBasePassSkylight;
} Shared;
struct {
	 uint  MaxBytesPerPixel;
	 uint  bRoughDiffuse;
	 uint  PeelLayersAboveDepth;
	 uint  bRoughnessTracking;
	 int  SliceStoringDebugStrataTreeDataWithoutMRT;
	 int  FirstSliceStoringStrataSSSDataWithoutMRT;
	RWTexture2DArray<uint> MaterialTextureArrayUAVWithoutRTs;
	RWTexture2D<float3> OpaqueRoughRefractionTextureUAV;
} Strata;
	 int  UseForwardScreenSpaceShadowMask;
	Texture2D DBufferATexture;
	Texture2D DBufferBTexture;
	Texture2D DBufferCTexture;
	Texture2D<uint> DBufferRenderMask;
	SamplerState DBufferATextureSampler;
	SamplerState DBufferBTextureSampler;
	SamplerState DBufferCTextureSampler;
	 int  Is24BitUnormDepthStencil;
	Texture2D ForwardScreenSpaceShadowMaskTexture;
	Texture2D IndirectOcclusionTexture;
	Texture2D ResolvedSceneDepthTexture;
	Texture2D PreIntegratedGFTexture;
	SamplerState PreIntegratedGFSampler;
	StructuredBuffer<float4> EyeAdaptationBuffer;
} OpaqueBasePass = {{{OpaqueBasePass_Shared_Forward_NumLocalLights,OpaqueBasePass_Shared_Forward_NumReflectionCaptures,OpaqueBasePass_Shared_Forward_HasDirectionalLight,OpaqueBasePass_Shared_Forward_NumGridCells,OpaqueBasePass_Shared_Forward_CulledGridSize,OpaqueBasePass_Shared_Forward_MaxCulledLightsPerCell,OpaqueBasePass_Shared_Forward_LightGridPixelSizeShift,OpaqueBasePass_Shared_Forward_LightGridZParams,OpaqueBasePass_Shared_Forward_DirectionalLightDirection,OpaqueBasePass_Shared_Forward_DirectionalLightSourceRadius,OpaqueBasePass_Shared_Forward_DirectionalLightColor,OpaqueBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity,OpaqueBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask,OpaqueBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD,OpaqueBasePass_Shared_Forward_NumDirectionalLightCascades,OpaqueBasePass_Shared_Forward_DirectionalLightVSM,OpaqueBasePass_Shared_Forward_CascadeEndDepths,OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix,OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapMinMax,OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize,OpaqueBasePass_Shared_Forward_DirectionalLightDepthBias,OpaqueBasePass_Shared_Forward_DirectionalLightUseStaticShadowing,OpaqueBasePass_Shared_Forward_SimpleLightsEndIndex,OpaqueBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex,OpaqueBasePass_Shared_Forward_LumenSupportedStartIndex,OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize,OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow,OpaqueBasePass_Shared_Forward_DirectLightingShowFlag,{OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_ScreenRayLength,OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayCount,OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay,OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale,OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight,OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale,OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope,OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias,OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount,},OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas,OpaqueBasePass_Shared_Forward_ShadowmapSampler,OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap,OpaqueBasePass_Shared_Forward_StaticShadowmapSampler,OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer,OpaqueBasePass_Shared_Forward_NumCulledLightsGrid,OpaqueBasePass_Shared_Forward_CulledLightDataGrid,},{OpaqueBasePass_Shared_ForwardISR_NumLocalLights,OpaqueBasePass_Shared_ForwardISR_NumReflectionCaptures,OpaqueBasePass_Shared_ForwardISR_HasDirectionalLight,OpaqueBasePass_Shared_ForwardISR_NumGridCells,OpaqueBasePass_Shared_ForwardISR_CulledGridSize,OpaqueBasePass_Shared_ForwardISR_MaxCulledLightsPerCell,OpaqueBasePass_Shared_ForwardISR_LightGridPixelSizeShift,OpaqueBasePass_Shared_ForwardISR_LightGridZParams,OpaqueBasePass_Shared_ForwardISR_DirectionalLightDirection,OpaqueBasePass_Shared_ForwardISR_DirectionalLightSourceRadius,OpaqueBasePass_Shared_ForwardISR_DirectionalLightColor,OpaqueBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity,OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask,OpaqueBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD,OpaqueBasePass_Shared_ForwardISR_NumDirectionalLightCascades,OpaqueBasePass_Shared_ForwardISR_DirectionalLightVSM,OpaqueBasePass_Shared_ForwardISR_CascadeEndDepths,OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix,OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax,OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize,OpaqueBasePass_Shared_ForwardISR_DirectionalLightDepthBias,OpaqueBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing,OpaqueBasePass_Shared_ForwardISR_SimpleLightsEndIndex,OpaqueBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex,OpaqueBasePass_Shared_ForwardISR_LumenSupportedStartIndex,OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize,OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow,OpaqueBasePass_Shared_ForwardISR_DirectLightingShowFlag,{OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_ScreenRayLength,OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayCount,OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTSamplesPerRay,OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayLengthScale,OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight,OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTTexelDitherScale,OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTExtrapolateSlope,OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTMaxSlopeBias,OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount,},OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas,OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler,OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap,OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler,OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer,OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid,OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid,},{OpaqueBasePass_Shared_Reflection_SkyLightParameters,OpaqueBasePass_Shared_Reflection_SkyLightCubemap,OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler,OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap,OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler,OpaqueBasePass_Shared_Reflection_ReflectionCubemap,OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler,OpaqueBasePass_Shared_Reflection_PreIntegratedGF,OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler,},{OpaqueBasePass_Shared_PlanarReflection_ReflectionPlane,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionOrigin,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionXAxis,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionYAxis,OpaqueBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters2,OpaqueBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound,OpaqueBasePass_Shared_PlanarReflection_bIsStereo,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler,},{OpaqueBasePass_Shared_Fog_ExponentialFogParameters,OpaqueBasePass_Shared_Fog_ExponentialFogParameters2,OpaqueBasePass_Shared_Fog_ExponentialFogColorParameter,OpaqueBasePass_Shared_Fog_ExponentialFogParameters3,OpaqueBasePass_Shared_Fog_SkyAtmosphereAmbientContributionColorScale,OpaqueBasePass_Shared_Fog_InscatteringLightDirection,OpaqueBasePass_Shared_Fog_DirectionalInscatteringColor,OpaqueBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation,OpaqueBasePass_Shared_Fog_FogInscatteringTextureParameters,OpaqueBasePass_Shared_Fog_ApplyVolumetricFog,OpaqueBasePass_Shared_Fog_VolumetricFogStartDistance,OpaqueBasePass_Shared_Fog_VolumetricFogNearFadeInDistanceInv,OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap,OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler,OpaqueBasePass_Shared_Fog_IntegratedLightScattering,OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler,},{OpaqueBasePass_Shared_FogISR_ExponentialFogParameters,OpaqueBasePass_Shared_FogISR_ExponentialFogParameters2,OpaqueBasePass_Shared_FogISR_ExponentialFogColorParameter,OpaqueBasePass_Shared_FogISR_ExponentialFogParameters3,OpaqueBasePass_Shared_FogISR_SkyAtmosphereAmbientContributionColorScale,OpaqueBasePass_Shared_FogISR_InscatteringLightDirection,OpaqueBasePass_Shared_FogISR_DirectionalInscatteringColor,OpaqueBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation,OpaqueBasePass_Shared_FogISR_FogInscatteringTextureParameters,OpaqueBasePass_Shared_FogISR_ApplyVolumetricFog,OpaqueBasePass_Shared_FogISR_VolumetricFogStartDistance,OpaqueBasePass_Shared_FogISR_VolumetricFogNearFadeInDistanceInv,OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap,OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler,OpaqueBasePass_Shared_FogISR_IntegratedLightScattering,OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler,},OpaqueBasePass_Shared_UseBasePassSkylight,},{OpaqueBasePass_Strata_MaxBytesPerPixel,OpaqueBasePass_Strata_bRoughDiffuse,OpaqueBasePass_Strata_PeelLayersAboveDepth,OpaqueBasePass_Strata_bRoughnessTracking,OpaqueBasePass_Strata_SliceStoringDebugStrataTreeDataWithoutMRT,OpaqueBasePass_Strata_FirstSliceStoringStrataSSSDataWithoutMRT,OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs,OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV,},OpaqueBasePass_UseForwardScreenSpaceShadowMask,OpaqueBasePass_DBufferATexture,OpaqueBasePass_DBufferBTexture,OpaqueBasePass_DBufferCTexture,OpaqueBasePass_DBufferRenderMask,OpaqueBasePass_DBufferATextureSampler,OpaqueBasePass_DBufferBTextureSampler,OpaqueBasePass_DBufferCTextureSampler,OpaqueBasePass_Is24BitUnormDepthStencil,OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture,OpaqueBasePass_IndirectOcclusionTexture,OpaqueBasePass_ResolvedSceneDepthTexture,OpaqueBasePass_PreIntegratedGFTexture,OpaqueBasePass_PreIntegratedGFSampler,OpaqueBasePass_EyeAdaptationBuffer,*/

#line  17 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/BasePass.ush"

cbuffer   BasePass 
{
	 uint  BasePass_Forward_NumLocalLights;
	 uint  BasePass_Forward_NumReflectionCaptures;
	 uint  BasePass_Forward_HasDirectionalLight;
	 uint  BasePass_Forward_NumGridCells;
	 int3  BasePass_Forward_CulledGridSize;
	 uint  BasePass_Forward_MaxCulledLightsPerCell;
	 uint  BasePass_Forward_LightGridPixelSizeShift;
	 uint  PrePadding_BasePass_Forward_36;
	 uint  PrePadding_BasePass_Forward_40;
	 uint  PrePadding_BasePass_Forward_44;
	 float3  BasePass_Forward_LightGridZParams;
	 float  PrePadding_BasePass_Forward_60;
	 float3  BasePass_Forward_DirectionalLightDirection;
	 float  BasePass_Forward_DirectionalLightSourceRadius;
	 float3  BasePass_Forward_DirectionalLightColor;
	 float  BasePass_Forward_DirectionalLightVolumetricScatteringIntensity;
	 uint  BasePass_Forward_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_BasePass_Forward_100;
	 float2  BasePass_Forward_DirectionalLightDistanceFadeMAD;
	 uint  BasePass_Forward_NumDirectionalLightCascades;
	 int  BasePass_Forward_DirectionalLightVSM;
	 int  PrePadding_BasePass_Forward_120;
	 int  PrePadding_BasePass_Forward_124;
	 float4  BasePass_Forward_CascadeEndDepths;
	 float4x4  BasePass_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  BasePass_Forward_DirectionalLightShadowmapMinMax[4];
	 float4  BasePass_Forward_DirectionalLightShadowmapAtlasBufferSize;
	 float  BasePass_Forward_DirectionalLightDepthBias;
	 uint  BasePass_Forward_DirectionalLightUseStaticShadowing;
	 uint  BasePass_Forward_SimpleLightsEndIndex;
	 uint  BasePass_Forward_ClusteredDeferredSupportedEndIndex;
	 uint  BasePass_Forward_LumenSupportedStartIndex;
	 uint  PrePadding_BasePass_Forward_500;
	 uint  PrePadding_BasePass_Forward_504;
	 uint  PrePadding_BasePass_Forward_508;
	 float4  BasePass_Forward_DirectionalLightStaticShadowBufferSize;
	 float4x4  BasePass_Forward_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  BasePass_Forward_DirectLightingShowFlag;
	 float  PrePadding_BasePass_Forward_DirectionalLightSMRTSettings_596;
	 float  PrePadding_BasePass_Forward_DirectionalLightSMRTSettings_600;
	 float  PrePadding_BasePass_Forward_DirectionalLightSMRTSettings_604;
	 float  BasePass_Forward_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  BasePass_Forward_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  BasePass_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  BasePass_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  BasePass_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  BasePass_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  BasePass_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  BasePass_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  BasePass_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_BasePass_Forward_644;
	 uint  PrePadding_BasePass_Forward_648;
	 uint  PrePadding_BasePass_Forward_652;
	 uint BindlessResource_BasePass_Forward_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_BasePass_Forward_660;
	 uint BindlessSampler_BasePass_Forward_ShadowmapSampler ;
	 uint  PrePadding_BasePass_Forward_668;
	 uint BindlessResource_BasePass_Forward_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_BasePass_Forward_676;
	 uint BindlessSampler_BasePass_Forward_StaticShadowmapSampler ;
	 uint  PrePadding_BasePass_Forward_684;
	 uint BindlessResource_BasePass_Forward_ForwardLocalLightBuffer ;
	 uint  PrePadding_BasePass_Forward_692;
	 uint BindlessResource_BasePass_Forward_NumCulledLightsGrid ;
	 uint  PrePadding_BasePass_Forward_700;
	 uint BindlessResource_BasePass_Forward_CulledLightDataGrid ;
	 float  PrePadding_BasePass_ForwardISR_708;
	 float  PrePadding_BasePass_ForwardISR_712;
	 float  PrePadding_BasePass_ForwardISR_716;
	 uint  BasePass_ForwardISR_NumLocalLights;
	 uint  BasePass_ForwardISR_NumReflectionCaptures;
	 uint  BasePass_ForwardISR_HasDirectionalLight;
	 uint  BasePass_ForwardISR_NumGridCells;
	 int3  BasePass_ForwardISR_CulledGridSize;
	 uint  BasePass_ForwardISR_MaxCulledLightsPerCell;
	 uint  BasePass_ForwardISR_LightGridPixelSizeShift;
	 uint  PrePadding_BasePass_ForwardISR_756;
	 uint  PrePadding_BasePass_ForwardISR_760;
	 uint  PrePadding_BasePass_ForwardISR_764;
	 float3  BasePass_ForwardISR_LightGridZParams;
	 float  PrePadding_BasePass_ForwardISR_780;
	 float3  BasePass_ForwardISR_DirectionalLightDirection;
	 float  BasePass_ForwardISR_DirectionalLightSourceRadius;
	 float3  BasePass_ForwardISR_DirectionalLightColor;
	 float  BasePass_ForwardISR_DirectionalLightVolumetricScatteringIntensity;
	 uint  BasePass_ForwardISR_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_BasePass_ForwardISR_820;
	 float2  BasePass_ForwardISR_DirectionalLightDistanceFadeMAD;
	 uint  BasePass_ForwardISR_NumDirectionalLightCascades;
	 int  BasePass_ForwardISR_DirectionalLightVSM;
	 int  PrePadding_BasePass_ForwardISR_840;
	 int  PrePadding_BasePass_ForwardISR_844;
	 float4  BasePass_ForwardISR_CascadeEndDepths;
	 float4x4  BasePass_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  BasePass_ForwardISR_DirectionalLightShadowmapMinMax[4];
	 float4  BasePass_ForwardISR_DirectionalLightShadowmapAtlasBufferSize;
	 float  BasePass_ForwardISR_DirectionalLightDepthBias;
	 uint  BasePass_ForwardISR_DirectionalLightUseStaticShadowing;
	 uint  BasePass_ForwardISR_SimpleLightsEndIndex;
	 uint  BasePass_ForwardISR_ClusteredDeferredSupportedEndIndex;
	 uint  BasePass_ForwardISR_LumenSupportedStartIndex;
	 uint  PrePadding_BasePass_ForwardISR_1220;
	 uint  PrePadding_BasePass_ForwardISR_1224;
	 uint  PrePadding_BasePass_ForwardISR_1228;
	 float4  BasePass_ForwardISR_DirectionalLightStaticShadowBufferSize;
	 float4x4  BasePass_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  BasePass_ForwardISR_DirectLightingShowFlag;
	 float  PrePadding_BasePass_ForwardISR_DirectionalLightSMRTSettings_1316;
	 float  PrePadding_BasePass_ForwardISR_DirectionalLightSMRTSettings_1320;
	 float  PrePadding_BasePass_ForwardISR_DirectionalLightSMRTSettings_1324;
	 float  BasePass_ForwardISR_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_BasePass_ForwardISR_1364;
	 uint  PrePadding_BasePass_ForwardISR_1368;
	 uint  PrePadding_BasePass_ForwardISR_1372;
	 uint BindlessResource_BasePass_ForwardISR_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_BasePass_ForwardISR_1380;
	 uint BindlessSampler_BasePass_ForwardISR_ShadowmapSampler ;
	 uint  PrePadding_BasePass_ForwardISR_1388;
	 uint BindlessResource_BasePass_ForwardISR_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_BasePass_ForwardISR_1396;
	 uint BindlessSampler_BasePass_ForwardISR_StaticShadowmapSampler ;
	 uint  PrePadding_BasePass_ForwardISR_1404;
	 uint BindlessResource_BasePass_ForwardISR_ForwardLocalLightBuffer ;
	 uint  PrePadding_BasePass_ForwardISR_1412;
	 uint BindlessResource_BasePass_ForwardISR_NumCulledLightsGrid ;
	 uint  PrePadding_BasePass_ForwardISR_1420;
	 uint BindlessResource_BasePass_ForwardISR_CulledLightDataGrid ;
	 float  PrePadding_BasePass_Reflection_1428;
	 float  PrePadding_BasePass_Reflection_1432;
	 float  PrePadding_BasePass_Reflection_1436;
	 float4  BasePass_Reflection_SkyLightParameters;
	 uint BindlessResource_BasePass_Reflection_SkyLightCubemap ;
	 uint  PrePadding_BasePass_Reflection_1460;
	 uint BindlessSampler_BasePass_Reflection_SkyLightCubemapSampler ;
	 uint  PrePadding_BasePass_Reflection_1468;
	 uint BindlessResource_BasePass_Reflection_SkyLightBlendDestinationCubemap ;
	 uint  PrePadding_BasePass_Reflection_1476;
	 uint BindlessSampler_BasePass_Reflection_SkyLightBlendDestinationCubemapSampler ;
	 uint  PrePadding_BasePass_Reflection_1484;
	 uint BindlessResource_BasePass_Reflection_ReflectionCubemap ;
	 uint  PrePadding_BasePass_Reflection_1492;
	 uint BindlessSampler_BasePass_Reflection_ReflectionCubemapSampler ;
	 uint  PrePadding_BasePass_Reflection_1500;
	 uint BindlessResource_BasePass_Reflection_PreIntegratedGF ;
	 uint  PrePadding_BasePass_Reflection_1508;
	 uint BindlessSampler_BasePass_Reflection_PreIntegratedGFSampler ;
	 float  PrePadding_BasePass_PlanarReflection_1516;
	 float4  BasePass_PlanarReflection_ReflectionPlane;
	 float4  BasePass_PlanarReflection_PlanarReflectionOrigin;
	 float4  BasePass_PlanarReflection_PlanarReflectionXAxis;
	 float4  BasePass_PlanarReflection_PlanarReflectionYAxis;
	 float3x4  BasePass_PlanarReflection_InverseTransposeMirrorMatrix;
	 float3  BasePass_PlanarReflection_PlanarReflectionParameters;
	 float  PrePadding_BasePass_PlanarReflection_1644;
	 float2  BasePass_PlanarReflection_PlanarReflectionParameters2;
	 float  PrePadding_BasePass_PlanarReflection_1656;
	 float  PrePadding_BasePass_PlanarReflection_1660;
	 float4x4  BasePass_PlanarReflection_ProjectionWithExtraFOV[2];
	 float4  BasePass_PlanarReflection_PlanarReflectionScreenScaleBias[2];
	 float2  BasePass_PlanarReflection_PlanarReflectionScreenBound;
	 uint  BasePass_PlanarReflection_bIsStereo;
	 uint  PrePadding_BasePass_PlanarReflection_1836;
	 uint BindlessResource_BasePass_PlanarReflection_PlanarReflectionTexture ;
	 uint  PrePadding_BasePass_PlanarReflection_1844;
	 uint BindlessSampler_BasePass_PlanarReflection_PlanarReflectionSampler ;
	 float  PrePadding_BasePass_Fog_1852;
	 float4  BasePass_Fog_ExponentialFogParameters;
	 float4  BasePass_Fog_ExponentialFogParameters2;
	 float4  BasePass_Fog_ExponentialFogColorParameter;
	 float4  BasePass_Fog_ExponentialFogParameters3;
	 float4  BasePass_Fog_SkyAtmosphereAmbientContributionColorScale;
	 float4  BasePass_Fog_InscatteringLightDirection;
	 float4  BasePass_Fog_DirectionalInscatteringColor;
	 float2  BasePass_Fog_SinCosInscatteringColorCubemapRotation;
	 float  PrePadding_BasePass_Fog_1976;
	 float  PrePadding_BasePass_Fog_1980;
	 float3  BasePass_Fog_FogInscatteringTextureParameters;
	 float  BasePass_Fog_ApplyVolumetricFog;
	 float  BasePass_Fog_VolumetricFogStartDistance;
	 float  BasePass_Fog_VolumetricFogNearFadeInDistanceInv;
	 uint BindlessResource_BasePass_Fog_FogInscatteringColorCubemap ;
	 uint  PrePadding_BasePass_Fog_2012;
	 uint BindlessSampler_BasePass_Fog_FogInscatteringColorSampler ;
	 uint  PrePadding_BasePass_Fog_2020;
	 uint BindlessResource_BasePass_Fog_IntegratedLightScattering ;
	 uint  PrePadding_BasePass_Fog_2028;
	 uint BindlessSampler_BasePass_Fog_IntegratedLightScatteringSampler ;
	 float  PrePadding_BasePass_FogISR_2036;
	 float  PrePadding_BasePass_FogISR_2040;
	 float  PrePadding_BasePass_FogISR_2044;
	 float4  BasePass_FogISR_ExponentialFogParameters;
	 float4  BasePass_FogISR_ExponentialFogParameters2;
	 float4  BasePass_FogISR_ExponentialFogColorParameter;
	 float4  BasePass_FogISR_ExponentialFogParameters3;
	 float4  BasePass_FogISR_SkyAtmosphereAmbientContributionColorScale;
	 float4  BasePass_FogISR_InscatteringLightDirection;
	 float4  BasePass_FogISR_DirectionalInscatteringColor;
	 float2  BasePass_FogISR_SinCosInscatteringColorCubemapRotation;
	 float  PrePadding_BasePass_FogISR_2168;
	 float  PrePadding_BasePass_FogISR_2172;
	 float3  BasePass_FogISR_FogInscatteringTextureParameters;
	 float  BasePass_FogISR_ApplyVolumetricFog;
	 float  BasePass_FogISR_VolumetricFogStartDistance;
	 float  BasePass_FogISR_VolumetricFogNearFadeInDistanceInv;
	 uint BindlessResource_BasePass_FogISR_FogInscatteringColorCubemap ;
	 uint  PrePadding_BasePass_FogISR_2204;
	 uint BindlessSampler_BasePass_FogISR_FogInscatteringColorSampler ;
	 uint  PrePadding_BasePass_FogISR_2212;
	 uint BindlessResource_BasePass_FogISR_IntegratedLightScattering ;
	 uint  PrePadding_BasePass_FogISR_2220;
	 uint BindlessSampler_BasePass_FogISR_IntegratedLightScatteringSampler ;
	 float  PrePadding_BasePass_2228;
	 float  PrePadding_BasePass_2232;
	 float  PrePadding_BasePass_2236;
	 uint  BasePass_UseBasePassSkylight;
}
  Texture2D  BasePass_Forward_DirectionalLightShadowmapAtlas ;
  SamplerState  BasePass_Forward_ShadowmapSampler ;
  Texture2D  BasePass_Forward_DirectionalLightStaticShadowmap ;
  SamplerState  BasePass_Forward_StaticShadowmapSampler ;
  Buffer<float4>  BasePass_Forward_ForwardLocalLightBuffer ;
  Buffer<uint>  BasePass_Forward_NumCulledLightsGrid ;
  Buffer<uint>  BasePass_Forward_CulledLightDataGrid ;
  Texture2D  BasePass_ForwardISR_DirectionalLightShadowmapAtlas ;
  SamplerState  BasePass_ForwardISR_ShadowmapSampler ;
  Texture2D  BasePass_ForwardISR_DirectionalLightStaticShadowmap ;
  SamplerState  BasePass_ForwardISR_StaticShadowmapSampler ;
  Buffer<float4>  BasePass_ForwardISR_ForwardLocalLightBuffer ;
  Buffer<uint>  BasePass_ForwardISR_NumCulledLightsGrid ;
  Buffer<uint>  BasePass_ForwardISR_CulledLightDataGrid ;
  TextureCube  BasePass_Reflection_SkyLightCubemap ;
  SamplerState  BasePass_Reflection_SkyLightCubemapSampler ;
  TextureCube  BasePass_Reflection_SkyLightBlendDestinationCubemap ;
  SamplerState  BasePass_Reflection_SkyLightBlendDestinationCubemapSampler ;
  TextureCubeArray  BasePass_Reflection_ReflectionCubemap ;
  SamplerState  BasePass_Reflection_ReflectionCubemapSampler ;
  Texture2D  BasePass_Reflection_PreIntegratedGF ;
  SamplerState  BasePass_Reflection_PreIntegratedGFSampler ;
  Texture2D  BasePass_PlanarReflection_PlanarReflectionTexture ;
  SamplerState  BasePass_PlanarReflection_PlanarReflectionSampler ;
  TextureCube  BasePass_Fog_FogInscatteringColorCubemap ;
  SamplerState  BasePass_Fog_FogInscatteringColorSampler ;
  Texture3D  BasePass_Fog_IntegratedLightScattering ;
  SamplerState  BasePass_Fog_IntegratedLightScatteringSampler ;
  TextureCube  BasePass_FogISR_FogInscatteringColorCubemap ;
  SamplerState  BasePass_FogISR_FogInscatteringColorSampler ;
  Texture3D  BasePass_FogISR_IntegratedLightScattering ;
  SamplerState  BasePass_FogISR_IntegratedLightScatteringSampler ;
/*atic const struct
{
struct {
	 uint  NumLocalLights;
	 uint  NumReflectionCaptures;
	 uint  HasDirectionalLight;
	 uint  NumGridCells;
	 int3  CulledGridSize;
	 uint  MaxCulledLightsPerCell;
	 uint  LightGridPixelSizeShift;
	 float3  LightGridZParams;
	 float3  DirectionalLightDirection;
	 float  DirectionalLightSourceRadius;
	 float3  DirectionalLightColor;
	 float  DirectionalLightVolumetricScatteringIntensity;
	 uint  DirectionalLightShadowMapChannelMask;
	 float2  DirectionalLightDistanceFadeMAD;
	 uint  NumDirectionalLightCascades;
	 int  DirectionalLightVSM;
	 float4  CascadeEndDepths;
	 float4x4  DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  DirectionalLightShadowmapMinMax[4];
	 float4  DirectionalLightShadowmapAtlasBufferSize;
	 float  DirectionalLightDepthBias;
	 uint  DirectionalLightUseStaticShadowing;
	 uint  SimpleLightsEndIndex;
	 uint  ClusteredDeferredSupportedEndIndex;
	 uint  LumenSupportedStartIndex;
	 float4  DirectionalLightStaticShadowBufferSize;
	 float4x4  DirectionalLightTranslatedWorldToStaticShadow;
	 uint  DirectLightingShowFlag;
struct {
	 float  ScreenRayLength;
	 int  SMRTRayCount;
	 int  SMRTSamplesPerRay;
	 float  SMRTRayLengthScale;
	 float  SMRTCotMaxRayAngleFromLight;
	 float  SMRTTexelDitherScale;
	 float  SMRTExtrapolateSlope;
	 float  SMRTMaxSlopeBias;
	 uint  SMRTAdaptiveRayCount;
} DirectionalLightSMRTSettings;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
} Forward;
struct {
	 uint  NumLocalLights;
	 uint  NumReflectionCaptures;
	 uint  HasDirectionalLight;
	 uint  NumGridCells;
	 int3  CulledGridSize;
	 uint  MaxCulledLightsPerCell;
	 uint  LightGridPixelSizeShift;
	 float3  LightGridZParams;
	 float3  DirectionalLightDirection;
	 float  DirectionalLightSourceRadius;
	 float3  DirectionalLightColor;
	 float  DirectionalLightVolumetricScatteringIntensity;
	 uint  DirectionalLightShadowMapChannelMask;
	 float2  DirectionalLightDistanceFadeMAD;
	 uint  NumDirectionalLightCascades;
	 int  DirectionalLightVSM;
	 float4  CascadeEndDepths;
	 float4x4  DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  DirectionalLightShadowmapMinMax[4];
	 float4  DirectionalLightShadowmapAtlasBufferSize;
	 float  DirectionalLightDepthBias;
	 uint  DirectionalLightUseStaticShadowing;
	 uint  SimpleLightsEndIndex;
	 uint  ClusteredDeferredSupportedEndIndex;
	 uint  LumenSupportedStartIndex;
	 float4  DirectionalLightStaticShadowBufferSize;
	 float4x4  DirectionalLightTranslatedWorldToStaticShadow;
	 uint  DirectLightingShowFlag;
struct {
	 float  ScreenRayLength;
	 int  SMRTRayCount;
	 int  SMRTSamplesPerRay;
	 float  SMRTRayLengthScale;
	 float  SMRTCotMaxRayAngleFromLight;
	 float  SMRTTexelDitherScale;
	 float  SMRTExtrapolateSlope;
	 float  SMRTMaxSlopeBias;
	 uint  SMRTAdaptiveRayCount;
} DirectionalLightSMRTSettings;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
} ForwardISR;
struct {
	 float4  SkyLightParameters;
	TextureCube SkyLightCubemap;
	SamplerState SkyLightCubemapSampler;
	TextureCube SkyLightBlendDestinationCubemap;
	SamplerState SkyLightBlendDestinationCubemapSampler;
	TextureCubeArray ReflectionCubemap;
	SamplerState ReflectionCubemapSampler;
	Texture2D PreIntegratedGF;
	SamplerState PreIntegratedGFSampler;
} Reflection;
struct {
	 float4  ReflectionPlane;
	 float4  PlanarReflectionOrigin;
	 float4  PlanarReflectionXAxis;
	 float4  PlanarReflectionYAxis;
	 float3x4  InverseTransposeMirrorMatrix;
	 float3  PlanarReflectionParameters;
	 float2  PlanarReflectionParameters2;
	 float4x4  ProjectionWithExtraFOV[2];
	 float4  PlanarReflectionScreenScaleBias[2];
	 float2  PlanarReflectionScreenBound;
	 uint  bIsStereo;
	Texture2D PlanarReflectionTexture;
	SamplerState PlanarReflectionSampler;
} PlanarReflection;
struct {
	 float4  ExponentialFogParameters;
	 float4  ExponentialFogParameters2;
	 float4  ExponentialFogColorParameter;
	 float4  ExponentialFogParameters3;
	 float4  SkyAtmosphereAmbientContributionColorScale;
	 float4  InscatteringLightDirection;
	 float4  DirectionalInscatteringColor;
	 float2  SinCosInscatteringColorCubemapRotation;
	 float3  FogInscatteringTextureParameters;
	 float  ApplyVolumetricFog;
	 float  VolumetricFogStartDistance;
	 float  VolumetricFogNearFadeInDistanceInv;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} Fog;
struct {
	 float4  ExponentialFogParameters;
	 float4  ExponentialFogParameters2;
	 float4  ExponentialFogColorParameter;
	 float4  ExponentialFogParameters3;
	 float4  SkyAtmosphereAmbientContributionColorScale;
	 float4  InscatteringLightDirection;
	 float4  DirectionalInscatteringColor;
	 float2  SinCosInscatteringColorCubemapRotation;
	 float3  FogInscatteringTextureParameters;
	 float  ApplyVolumetricFog;
	 float  VolumetricFogStartDistance;
	 float  VolumetricFogNearFadeInDistanceInv;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} FogISR;
	 uint  UseBasePassSkylight;
} BasePass = {{BasePass_Forward_NumLocalLights,BasePass_Forward_NumReflectionCaptures,BasePass_Forward_HasDirectionalLight,BasePass_Forward_NumGridCells,BasePass_Forward_CulledGridSize,BasePass_Forward_MaxCulledLightsPerCell,BasePass_Forward_LightGridPixelSizeShift,BasePass_Forward_LightGridZParams,BasePass_Forward_DirectionalLightDirection,BasePass_Forward_DirectionalLightSourceRadius,BasePass_Forward_DirectionalLightColor,BasePass_Forward_DirectionalLightVolumetricScatteringIntensity,BasePass_Forward_DirectionalLightShadowMapChannelMask,BasePass_Forward_DirectionalLightDistanceFadeMAD,BasePass_Forward_NumDirectionalLightCascades,BasePass_Forward_DirectionalLightVSM,BasePass_Forward_CascadeEndDepths,BasePass_Forward_DirectionalLightTranslatedWorldToShadowMatrix,BasePass_Forward_DirectionalLightShadowmapMinMax,BasePass_Forward_DirectionalLightShadowmapAtlasBufferSize,BasePass_Forward_DirectionalLightDepthBias,BasePass_Forward_DirectionalLightUseStaticShadowing,BasePass_Forward_SimpleLightsEndIndex,BasePass_Forward_ClusteredDeferredSupportedEndIndex,BasePass_Forward_LumenSupportedStartIndex,BasePass_Forward_DirectionalLightStaticShadowBufferSize,BasePass_Forward_DirectionalLightTranslatedWorldToStaticShadow,BasePass_Forward_DirectLightingShowFlag,{BasePass_Forward_DirectionalLightSMRTSettings_ScreenRayLength,BasePass_Forward_DirectionalLightSMRTSettings_SMRTRayCount,BasePass_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay,BasePass_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale,BasePass_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight,BasePass_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale,BasePass_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope,BasePass_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias,BasePass_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount,},BasePass_Forward_DirectionalLightShadowmapAtlas,BasePass_Forward_ShadowmapSampler,BasePass_Forward_DirectionalLightStaticShadowmap,BasePass_Forward_StaticShadowmapSampler,BasePass_Forward_ForwardLocalLightBuffer,BasePass_Forward_NumCulledLightsGrid,BasePass_Forward_CulledLightDataGrid,},{BasePass_ForwardISR_NumLocalLights,BasePass_ForwardISR_NumReflectionCaptures,BasePass_ForwardISR_HasDirectionalLight,BasePass_ForwardISR_NumGridCells,BasePass_ForwardISR_CulledGridSize,BasePass_ForwardISR_MaxCulledLightsPerCell,BasePass_ForwardISR_LightGridPixelSizeShift,BasePass_ForwardISR_LightGridZParams,BasePass_ForwardISR_DirectionalLightDirection,BasePass_ForwardISR_DirectionalLightSourceRadius,BasePass_ForwardISR_DirectionalLightColor,BasePass_ForwardISR_DirectionalLightVolumetricScatteringIntensity,BasePass_ForwardISR_DirectionalLightShadowMapChannelMask,BasePass_ForwardISR_DirectionalLightDistanceFadeMAD,BasePass_ForwardISR_NumDirectionalLightCascades,BasePass_ForwardISR_DirectionalLightVSM,BasePass_ForwardISR_CascadeEndDepths,BasePass_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix,BasePass_ForwardISR_DirectionalLightShadowmapMinMax,BasePass_ForwardISR_DirectionalLightShadowmapAtlasBufferSize,BasePass_ForwardISR_DirectionalLightDepthBias,BasePass_ForwardISR_DirectionalLightUseStaticShadowing,BasePass_ForwardISR_SimpleLightsEndIndex,BasePass_ForwardISR_ClusteredDeferredSupportedEndIndex,BasePass_ForwardISR_LumenSupportedStartIndex,BasePass_ForwardISR_DirectionalLightStaticShadowBufferSize,BasePass_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow,BasePass_ForwardISR_DirectLightingShowFlag,{BasePass_ForwardISR_DirectionalLightSMRTSettings_ScreenRayLength,BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTRayCount,BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTSamplesPerRay,BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTRayLengthScale,BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight,BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTTexelDitherScale,BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTExtrapolateSlope,BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTMaxSlopeBias,BasePass_ForwardISR_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount,},BasePass_ForwardISR_DirectionalLightShadowmapAtlas,BasePass_ForwardISR_ShadowmapSampler,BasePass_ForwardISR_DirectionalLightStaticShadowmap,BasePass_ForwardISR_StaticShadowmapSampler,BasePass_ForwardISR_ForwardLocalLightBuffer,BasePass_ForwardISR_NumCulledLightsGrid,BasePass_ForwardISR_CulledLightDataGrid,},{BasePass_Reflection_SkyLightParameters,BasePass_Reflection_SkyLightCubemap,BasePass_Reflection_SkyLightCubemapSampler,BasePass_Reflection_SkyLightBlendDestinationCubemap,BasePass_Reflection_SkyLightBlendDestinationCubemapSampler,BasePass_Reflection_ReflectionCubemap,BasePass_Reflection_ReflectionCubemapSampler,BasePass_Reflection_PreIntegratedGF,BasePass_Reflection_PreIntegratedGFSampler,},{BasePass_PlanarReflection_ReflectionPlane,BasePass_PlanarReflection_PlanarReflectionOrigin,BasePass_PlanarReflection_PlanarReflectionXAxis,BasePass_PlanarReflection_PlanarReflectionYAxis,BasePass_PlanarReflection_InverseTransposeMirrorMatrix,BasePass_PlanarReflection_PlanarReflectionParameters,BasePass_PlanarReflection_PlanarReflectionParameters2,BasePass_PlanarReflection_ProjectionWithExtraFOV,BasePass_PlanarReflection_PlanarReflectionScreenScaleBias,BasePass_PlanarReflection_PlanarReflectionScreenBound,BasePass_PlanarReflection_bIsStereo,BasePass_PlanarReflection_PlanarReflectionTexture,BasePass_PlanarReflection_PlanarReflectionSampler,},{BasePass_Fog_ExponentialFogParameters,BasePass_Fog_ExponentialFogParameters2,BasePass_Fog_ExponentialFogColorParameter,BasePass_Fog_ExponentialFogParameters3,BasePass_Fog_SkyAtmosphereAmbientContributionColorScale,BasePass_Fog_InscatteringLightDirection,BasePass_Fog_DirectionalInscatteringColor,BasePass_Fog_SinCosInscatteringColorCubemapRotation,BasePass_Fog_FogInscatteringTextureParameters,BasePass_Fog_ApplyVolumetricFog,BasePass_Fog_VolumetricFogStartDistance,BasePass_Fog_VolumetricFogNearFadeInDistanceInv,BasePass_Fog_FogInscatteringColorCubemap,BasePass_Fog_FogInscatteringColorSampler,BasePass_Fog_IntegratedLightScattering,BasePass_Fog_IntegratedLightScatteringSampler,},{BasePass_FogISR_ExponentialFogParameters,BasePass_FogISR_ExponentialFogParameters2,BasePass_FogISR_ExponentialFogColorParameter,BasePass_FogISR_ExponentialFogParameters3,BasePass_FogISR_SkyAtmosphereAmbientContributionColorScale,BasePass_FogISR_InscatteringLightDirection,BasePass_FogISR_DirectionalInscatteringColor,BasePass_FogISR_SinCosInscatteringColorCubemapRotation,BasePass_FogISR_FogInscatteringTextureParameters,BasePass_FogISR_ApplyVolumetricFog,BasePass_FogISR_VolumetricFogStartDistance,BasePass_FogISR_VolumetricFogNearFadeInDistanceInv,BasePass_FogISR_FogInscatteringColorCubemap,BasePass_FogISR_FogInscatteringColorSampler,BasePass_FogISR_IntegratedLightScattering,BasePass_FogISR_IntegratedLightScatteringSampler,},BasePass_UseBasePassSkylight,*/

#line  18 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/MobileBasePass.ush"

cbuffer   MobileBasePass 
{
	 float  MobileBasePass_AmbientOcclusionStaticFraction;
	 float  PrePadding_MobileBasePass_Fog_4;
	 float  PrePadding_MobileBasePass_Fog_8;
	 float  PrePadding_MobileBasePass_Fog_12;
	 float4  MobileBasePass_Fog_ExponentialFogParameters;
	 float4  MobileBasePass_Fog_ExponentialFogParameters2;
	 float4  MobileBasePass_Fog_ExponentialFogColorParameter;
	 float4  MobileBasePass_Fog_ExponentialFogParameters3;
	 float4  MobileBasePass_Fog_SkyAtmosphereAmbientContributionColorScale;
	 float4  MobileBasePass_Fog_InscatteringLightDirection;
	 float4  MobileBasePass_Fog_DirectionalInscatteringColor;
	 float2  MobileBasePass_Fog_SinCosInscatteringColorCubemapRotation;
	 float  PrePadding_MobileBasePass_Fog_136;
	 float  PrePadding_MobileBasePass_Fog_140;
	 float3  MobileBasePass_Fog_FogInscatteringTextureParameters;
	 float  MobileBasePass_Fog_ApplyVolumetricFog;
	 float  MobileBasePass_Fog_VolumetricFogStartDistance;
	 float  MobileBasePass_Fog_VolumetricFogNearFadeInDistanceInv;
	 uint BindlessResource_MobileBasePass_Fog_FogInscatteringColorCubemap ;
	 uint  PrePadding_MobileBasePass_Fog_172;
	 uint BindlessSampler_MobileBasePass_Fog_FogInscatteringColorSampler ;
	 uint  PrePadding_MobileBasePass_Fog_180;
	 uint BindlessResource_MobileBasePass_Fog_IntegratedLightScattering ;
	 uint  PrePadding_MobileBasePass_Fog_188;
	 uint BindlessSampler_MobileBasePass_Fog_IntegratedLightScatteringSampler ;
	 float  PrePadding_MobileBasePass_Forward_196;
	 float  PrePadding_MobileBasePass_Forward_200;
	 float  PrePadding_MobileBasePass_Forward_204;
	 uint  MobileBasePass_Forward_NumLocalLights;
	 uint  MobileBasePass_Forward_NumReflectionCaptures;
	 uint  MobileBasePass_Forward_HasDirectionalLight;
	 uint  MobileBasePass_Forward_NumGridCells;
	 int3  MobileBasePass_Forward_CulledGridSize;
	 uint  MobileBasePass_Forward_MaxCulledLightsPerCell;
	 uint  MobileBasePass_Forward_LightGridPixelSizeShift;
	 uint  PrePadding_MobileBasePass_Forward_244;
	 uint  PrePadding_MobileBasePass_Forward_248;
	 uint  PrePadding_MobileBasePass_Forward_252;
	 float3  MobileBasePass_Forward_LightGridZParams;
	 float  PrePadding_MobileBasePass_Forward_268;
	 float3  MobileBasePass_Forward_DirectionalLightDirection;
	 float  MobileBasePass_Forward_DirectionalLightSourceRadius;
	 float3  MobileBasePass_Forward_DirectionalLightColor;
	 float  MobileBasePass_Forward_DirectionalLightVolumetricScatteringIntensity;
	 uint  MobileBasePass_Forward_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_MobileBasePass_Forward_308;
	 float2  MobileBasePass_Forward_DirectionalLightDistanceFadeMAD;
	 uint  MobileBasePass_Forward_NumDirectionalLightCascades;
	 int  MobileBasePass_Forward_DirectionalLightVSM;
	 int  PrePadding_MobileBasePass_Forward_328;
	 int  PrePadding_MobileBasePass_Forward_332;
	 float4  MobileBasePass_Forward_CascadeEndDepths;
	 float4x4  MobileBasePass_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  MobileBasePass_Forward_DirectionalLightShadowmapMinMax[4];
	 float4  MobileBasePass_Forward_DirectionalLightShadowmapAtlasBufferSize;
	 float  MobileBasePass_Forward_DirectionalLightDepthBias;
	 uint  MobileBasePass_Forward_DirectionalLightUseStaticShadowing;
	 uint  MobileBasePass_Forward_SimpleLightsEndIndex;
	 uint  MobileBasePass_Forward_ClusteredDeferredSupportedEndIndex;
	 uint  MobileBasePass_Forward_LumenSupportedStartIndex;
	 uint  PrePadding_MobileBasePass_Forward_708;
	 uint  PrePadding_MobileBasePass_Forward_712;
	 uint  PrePadding_MobileBasePass_Forward_716;
	 float4  MobileBasePass_Forward_DirectionalLightStaticShadowBufferSize;
	 float4x4  MobileBasePass_Forward_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  MobileBasePass_Forward_DirectLightingShowFlag;
	 float  PrePadding_MobileBasePass_Forward_DirectionalLightSMRTSettings_804;
	 float  PrePadding_MobileBasePass_Forward_DirectionalLightSMRTSettings_808;
	 float  PrePadding_MobileBasePass_Forward_DirectionalLightSMRTSettings_812;
	 float  MobileBasePass_Forward_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_MobileBasePass_Forward_852;
	 uint  PrePadding_MobileBasePass_Forward_856;
	 uint  PrePadding_MobileBasePass_Forward_860;
	 uint BindlessResource_MobileBasePass_Forward_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_MobileBasePass_Forward_868;
	 uint BindlessSampler_MobileBasePass_Forward_ShadowmapSampler ;
	 uint  PrePadding_MobileBasePass_Forward_876;
	 uint BindlessResource_MobileBasePass_Forward_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_MobileBasePass_Forward_884;
	 uint BindlessSampler_MobileBasePass_Forward_StaticShadowmapSampler ;
	 uint  PrePadding_MobileBasePass_Forward_892;
	 uint BindlessResource_MobileBasePass_Forward_ForwardLocalLightBuffer ;
	 uint  PrePadding_MobileBasePass_Forward_900;
	 uint BindlessResource_MobileBasePass_Forward_NumCulledLightsGrid ;
	 uint  PrePadding_MobileBasePass_Forward_908;
	 uint BindlessResource_MobileBasePass_Forward_CulledLightDataGrid ;
	 float  PrePadding_MobileBasePass_ForwardMMV_916;
	 float  PrePadding_MobileBasePass_ForwardMMV_920;
	 float  PrePadding_MobileBasePass_ForwardMMV_924;
	 uint  MobileBasePass_ForwardMMV_NumLocalLights;
	 uint  MobileBasePass_ForwardMMV_NumReflectionCaptures;
	 uint  MobileBasePass_ForwardMMV_HasDirectionalLight;
	 uint  MobileBasePass_ForwardMMV_NumGridCells;
	 int3  MobileBasePass_ForwardMMV_CulledGridSize;
	 uint  MobileBasePass_ForwardMMV_MaxCulledLightsPerCell;
	 uint  MobileBasePass_ForwardMMV_LightGridPixelSizeShift;
	 uint  PrePadding_MobileBasePass_ForwardMMV_964;
	 uint  PrePadding_MobileBasePass_ForwardMMV_968;
	 uint  PrePadding_MobileBasePass_ForwardMMV_972;
	 float3  MobileBasePass_ForwardMMV_LightGridZParams;
	 float  PrePadding_MobileBasePass_ForwardMMV_988;
	 float3  MobileBasePass_ForwardMMV_DirectionalLightDirection;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSourceRadius;
	 float3  MobileBasePass_ForwardMMV_DirectionalLightColor;
	 float  MobileBasePass_ForwardMMV_DirectionalLightVolumetricScatteringIntensity;
	 uint  MobileBasePass_ForwardMMV_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1028;
	 float2  MobileBasePass_ForwardMMV_DirectionalLightDistanceFadeMAD;
	 uint  MobileBasePass_ForwardMMV_NumDirectionalLightCascades;
	 int  MobileBasePass_ForwardMMV_DirectionalLightVSM;
	 int  PrePadding_MobileBasePass_ForwardMMV_1048;
	 int  PrePadding_MobileBasePass_ForwardMMV_1052;
	 float4  MobileBasePass_ForwardMMV_CascadeEndDepths;
	 float4x4  MobileBasePass_ForwardMMV_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  MobileBasePass_ForwardMMV_DirectionalLightShadowmapMinMax[4];
	 float4  MobileBasePass_ForwardMMV_DirectionalLightShadowmapAtlasBufferSize;
	 float  MobileBasePass_ForwardMMV_DirectionalLightDepthBias;
	 uint  MobileBasePass_ForwardMMV_DirectionalLightUseStaticShadowing;
	 uint  MobileBasePass_ForwardMMV_SimpleLightsEndIndex;
	 uint  MobileBasePass_ForwardMMV_ClusteredDeferredSupportedEndIndex;
	 uint  MobileBasePass_ForwardMMV_LumenSupportedStartIndex;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1428;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1432;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1436;
	 float4  MobileBasePass_ForwardMMV_DirectionalLightStaticShadowBufferSize;
	 float4x4  MobileBasePass_ForwardMMV_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  MobileBasePass_ForwardMMV_DirectLightingShowFlag;
	 float  PrePadding_MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_1524;
	 float  PrePadding_MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_1528;
	 float  PrePadding_MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_1532;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1572;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1576;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1580;
	 uint BindlessResource_MobileBasePass_ForwardMMV_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1588;
	 uint BindlessSampler_MobileBasePass_ForwardMMV_ShadowmapSampler ;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1596;
	 uint BindlessResource_MobileBasePass_ForwardMMV_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1604;
	 uint BindlessSampler_MobileBasePass_ForwardMMV_StaticShadowmapSampler ;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1612;
	 uint BindlessResource_MobileBasePass_ForwardMMV_ForwardLocalLightBuffer ;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1620;
	 uint BindlessResource_MobileBasePass_ForwardMMV_NumCulledLightsGrid ;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1628;
	 uint BindlessResource_MobileBasePass_ForwardMMV_CulledLightDataGrid ;
	 float  PrePadding_MobileBasePass_PlanarReflection_1636;
	 float  PrePadding_MobileBasePass_PlanarReflection_1640;
	 float  PrePadding_MobileBasePass_PlanarReflection_1644;
	 float4  MobileBasePass_PlanarReflection_ReflectionPlane;
	 float4  MobileBasePass_PlanarReflection_PlanarReflectionOrigin;
	 float4  MobileBasePass_PlanarReflection_PlanarReflectionXAxis;
	 float4  MobileBasePass_PlanarReflection_PlanarReflectionYAxis;
	 float3x4  MobileBasePass_PlanarReflection_InverseTransposeMirrorMatrix;
	 float3  MobileBasePass_PlanarReflection_PlanarReflectionParameters;
	 float  PrePadding_MobileBasePass_PlanarReflection_1772;
	 float2  MobileBasePass_PlanarReflection_PlanarReflectionParameters2;
	 float  PrePadding_MobileBasePass_PlanarReflection_1784;
	 float  PrePadding_MobileBasePass_PlanarReflection_1788;
	 float4x4  MobileBasePass_PlanarReflection_ProjectionWithExtraFOV[2];
	 float4  MobileBasePass_PlanarReflection_PlanarReflectionScreenScaleBias[2];
	 float2  MobileBasePass_PlanarReflection_PlanarReflectionScreenBound;
	 uint  MobileBasePass_PlanarReflection_bIsStereo;
	 uint  PrePadding_MobileBasePass_PlanarReflection_1964;
	 uint BindlessResource_MobileBasePass_PlanarReflection_PlanarReflectionTexture ;
	 uint  PrePadding_MobileBasePass_PlanarReflection_1972;
	 uint BindlessSampler_MobileBasePass_PlanarReflection_PlanarReflectionSampler ;
	 float  PrePadding_MobileBasePass_SceneTextures_1980;
	 uint BindlessResource_MobileBasePass_SceneTextures_SceneColorTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_1988;
	 uint BindlessSampler_MobileBasePass_SceneTextures_SceneColorTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_1996;
	 uint BindlessResource_MobileBasePass_SceneTextures_SceneDepthTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2004;
	 uint BindlessSampler_MobileBasePass_SceneTextures_SceneDepthTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2012;
	 uint BindlessResource_MobileBasePass_SceneTextures_CustomDepthTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2020;
	 uint BindlessSampler_MobileBasePass_SceneTextures_CustomDepthTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2028;
	 uint BindlessResource_MobileBasePass_SceneTextures_CustomStencilTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2036;
	 uint BindlessResource_MobileBasePass_SceneTextures_SceneVelocityTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2044;
	 uint BindlessSampler_MobileBasePass_SceneTextures_SceneVelocityTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2052;
	 uint BindlessResource_MobileBasePass_SceneTextures_GBufferATexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2060;
	 uint BindlessResource_MobileBasePass_SceneTextures_GBufferBTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2068;
	 uint BindlessResource_MobileBasePass_SceneTextures_GBufferCTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2076;
	 uint BindlessResource_MobileBasePass_SceneTextures_GBufferDTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2084;
	 uint BindlessResource_MobileBasePass_SceneTextures_SceneDepthAuxTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2092;
	 uint BindlessSampler_MobileBasePass_SceneTextures_GBufferATextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2100;
	 uint BindlessSampler_MobileBasePass_SceneTextures_GBufferBTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2108;
	 uint BindlessSampler_MobileBasePass_SceneTextures_GBufferCTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2116;
	 uint BindlessSampler_MobileBasePass_SceneTextures_GBufferDTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2124;
	 uint BindlessSampler_MobileBasePass_SceneTextures_SceneDepthAuxTextureSampler ;
	 float  PrePadding_MobileBasePass_Strata_2132;
	 float  PrePadding_MobileBasePass_Strata_2136;
	 float  PrePadding_MobileBasePass_Strata_2140;
	 uint  MobileBasePass_Strata_MaxBytesPerPixel;
	 uint  MobileBasePass_Strata_bRoughDiffuse;
	 uint  MobileBasePass_Strata_PeelLayersAboveDepth;
	 uint  MobileBasePass_Strata_bRoughnessTracking;
	 float4  MobileBasePass_DebugViewMode_AccuracyColors[5];
	 float4  MobileBasePass_DebugViewMode_LODColors[8];
	 float4  MobileBasePass_ReflectionsParameters_SkyLightParameters;
	 uint BindlessResource_MobileBasePass_ReflectionsParameters_SkyLightCubemap ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2388;
	 uint BindlessSampler_MobileBasePass_ReflectionsParameters_SkyLightCubemapSampler ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2396;
	 uint BindlessResource_MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemap ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2404;
	 uint BindlessSampler_MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemapSampler ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2412;
	 uint BindlessResource_MobileBasePass_ReflectionsParameters_ReflectionCubemap ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2420;
	 uint BindlessSampler_MobileBasePass_ReflectionsParameters_ReflectionCubemapSampler ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2428;
	 uint BindlessResource_MobileBasePass_ReflectionsParameters_PreIntegratedGF ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2436;
	 uint BindlessSampler_MobileBasePass_ReflectionsParameters_PreIntegratedGFSampler ;
	 float  PrePadding_MobileBasePass_2444;
	 uint BindlessResource_MobileBasePass_PreIntegratedGFTexture ;
	 uint  PrePadding_MobileBasePass_2452;
	 uint BindlessSampler_MobileBasePass_PreIntegratedGFSampler ;
	 uint  PrePadding_MobileBasePass_2460;
	 uint BindlessResource_MobileBasePass_EyeAdaptationBuffer ;
	 uint  PrePadding_MobileBasePass_2468;
	 uint BindlessResource_MobileBasePass_RWOcclusionBufferUAV ;
	 uint  PrePadding_MobileBasePass_2476;
	 uint BindlessResource_MobileBasePass_AmbientOcclusionTexture ;
	 uint  PrePadding_MobileBasePass_2484;
	 uint BindlessSampler_MobileBasePass_AmbientOcclusionSampler ;
	 uint  PrePadding_MobileBasePass_2492;
	 uint BindlessResource_MobileBasePass_ScreenSpaceShadowMaskTexture ;
	 uint  PrePadding_MobileBasePass_2500;
	 uint BindlessSampler_MobileBasePass_ScreenSpaceShadowMaskSampler ;
}
  TextureCube  MobileBasePass_Fog_FogInscatteringColorCubemap ;
  SamplerState  MobileBasePass_Fog_FogInscatteringColorSampler ;
  Texture3D  MobileBasePass_Fog_IntegratedLightScattering ;
  SamplerState  MobileBasePass_Fog_IntegratedLightScatteringSampler ;
  Texture2D  MobileBasePass_Forward_DirectionalLightShadowmapAtlas ;
  SamplerState  MobileBasePass_Forward_ShadowmapSampler ;
  Texture2D  MobileBasePass_Forward_DirectionalLightStaticShadowmap ;
  SamplerState  MobileBasePass_Forward_StaticShadowmapSampler ;
  Buffer<float4>  MobileBasePass_Forward_ForwardLocalLightBuffer ;
  Buffer<uint>  MobileBasePass_Forward_NumCulledLightsGrid ;
  Buffer<uint>  MobileBasePass_Forward_CulledLightDataGrid ;
  Texture2D  MobileBasePass_ForwardMMV_DirectionalLightShadowmapAtlas ;
  SamplerState  MobileBasePass_ForwardMMV_ShadowmapSampler ;
  Texture2D  MobileBasePass_ForwardMMV_DirectionalLightStaticShadowmap ;
  SamplerState  MobileBasePass_ForwardMMV_StaticShadowmapSampler ;
  Buffer<float4>  MobileBasePass_ForwardMMV_ForwardLocalLightBuffer ;
  Buffer<uint>  MobileBasePass_ForwardMMV_NumCulledLightsGrid ;
  Buffer<uint>  MobileBasePass_ForwardMMV_CulledLightDataGrid ;
  Texture2D  MobileBasePass_PlanarReflection_PlanarReflectionTexture ;
  SamplerState  MobileBasePass_PlanarReflection_PlanarReflectionSampler ;
  Texture2D  MobileBasePass_SceneTextures_SceneColorTexture ;
  SamplerState  MobileBasePass_SceneTextures_SceneColorTextureSampler ;
  Texture2D  MobileBasePass_SceneTextures_SceneDepthTexture ;
  SamplerState  MobileBasePass_SceneTextures_SceneDepthTextureSampler ;
  Texture2D  MobileBasePass_SceneTextures_CustomDepthTexture ;
  SamplerState  MobileBasePass_SceneTextures_CustomDepthTextureSampler ;
  Texture2D<uint2>  MobileBasePass_SceneTextures_CustomStencilTexture ;
  Texture2D  MobileBasePass_SceneTextures_SceneVelocityTexture ;
  SamplerState  MobileBasePass_SceneTextures_SceneVelocityTextureSampler ;
  Texture2D  MobileBasePass_SceneTextures_GBufferATexture ;
  Texture2D  MobileBasePass_SceneTextures_GBufferBTexture ;
  Texture2D  MobileBasePass_SceneTextures_GBufferCTexture ;
  Texture2D  MobileBasePass_SceneTextures_GBufferDTexture ;
  Texture2D  MobileBasePass_SceneTextures_SceneDepthAuxTexture ;
  SamplerState  MobileBasePass_SceneTextures_GBufferATextureSampler ;
  SamplerState  MobileBasePass_SceneTextures_GBufferBTextureSampler ;
  SamplerState  MobileBasePass_SceneTextures_GBufferCTextureSampler ;
  SamplerState  MobileBasePass_SceneTextures_GBufferDTextureSampler ;
  SamplerState  MobileBasePass_SceneTextures_SceneDepthAuxTextureSampler ;
  TextureCube  MobileBasePass_ReflectionsParameters_SkyLightCubemap ;
  SamplerState  MobileBasePass_ReflectionsParameters_SkyLightCubemapSampler ;
  TextureCube  MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemap ;
  SamplerState  MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemapSampler ;
  TextureCubeArray  MobileBasePass_ReflectionsParameters_ReflectionCubemap ;
  SamplerState  MobileBasePass_ReflectionsParameters_ReflectionCubemapSampler ;
  Texture2D  MobileBasePass_ReflectionsParameters_PreIntegratedGF ;
  SamplerState  MobileBasePass_ReflectionsParameters_PreIntegratedGFSampler ;
  Texture2D  MobileBasePass_PreIntegratedGFTexture ;
  SamplerState  MobileBasePass_PreIntegratedGFSampler ;
  StructuredBuffer<float4>  MobileBasePass_EyeAdaptationBuffer ;
  RWStructuredBuffer<uint>  MobileBasePass_RWOcclusionBufferUAV ;
  Texture2D  MobileBasePass_AmbientOcclusionTexture ;
  SamplerState  MobileBasePass_AmbientOcclusionSampler ;
  Texture2D  MobileBasePass_ScreenSpaceShadowMaskTexture ;
  SamplerState  MobileBasePass_ScreenSpaceShadowMaskSampler ;
/*atic const struct
{
	 float  AmbientOcclusionStaticFraction;
struct {
	 float4  ExponentialFogParameters;
	 float4  ExponentialFogParameters2;
	 float4  ExponentialFogColorParameter;
	 float4  ExponentialFogParameters3;
	 float4  SkyAtmosphereAmbientContributionColorScale;
	 float4  InscatteringLightDirection;
	 float4  DirectionalInscatteringColor;
	 float2  SinCosInscatteringColorCubemapRotation;
	 float3  FogInscatteringTextureParameters;
	 float  ApplyVolumetricFog;
	 float  VolumetricFogStartDistance;
	 float  VolumetricFogNearFadeInDistanceInv;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} Fog;
struct {
	 uint  NumLocalLights;
	 uint  NumReflectionCaptures;
	 uint  HasDirectionalLight;
	 uint  NumGridCells;
	 int3  CulledGridSize;
	 uint  MaxCulledLightsPerCell;
	 uint  LightGridPixelSizeShift;
	 float3  LightGridZParams;
	 float3  DirectionalLightDirection;
	 float  DirectionalLightSourceRadius;
	 float3  DirectionalLightColor;
	 float  DirectionalLightVolumetricScatteringIntensity;
	 uint  DirectionalLightShadowMapChannelMask;
	 float2  DirectionalLightDistanceFadeMAD;
	 uint  NumDirectionalLightCascades;
	 int  DirectionalLightVSM;
	 float4  CascadeEndDepths;
	 float4x4  DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  DirectionalLightShadowmapMinMax[4];
	 float4  DirectionalLightShadowmapAtlasBufferSize;
	 float  DirectionalLightDepthBias;
	 uint  DirectionalLightUseStaticShadowing;
	 uint  SimpleLightsEndIndex;
	 uint  ClusteredDeferredSupportedEndIndex;
	 uint  LumenSupportedStartIndex;
	 float4  DirectionalLightStaticShadowBufferSize;
	 float4x4  DirectionalLightTranslatedWorldToStaticShadow;
	 uint  DirectLightingShowFlag;
struct {
	 float  ScreenRayLength;
	 int  SMRTRayCount;
	 int  SMRTSamplesPerRay;
	 float  SMRTRayLengthScale;
	 float  SMRTCotMaxRayAngleFromLight;
	 float  SMRTTexelDitherScale;
	 float  SMRTExtrapolateSlope;
	 float  SMRTMaxSlopeBias;
	 uint  SMRTAdaptiveRayCount;
} DirectionalLightSMRTSettings;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
} Forward;
struct {
	 uint  NumLocalLights;
	 uint  NumReflectionCaptures;
	 uint  HasDirectionalLight;
	 uint  NumGridCells;
	 int3  CulledGridSize;
	 uint  MaxCulledLightsPerCell;
	 uint  LightGridPixelSizeShift;
	 float3  LightGridZParams;
	 float3  DirectionalLightDirection;
	 float  DirectionalLightSourceRadius;
	 float3  DirectionalLightColor;
	 float  DirectionalLightVolumetricScatteringIntensity;
	 uint  DirectionalLightShadowMapChannelMask;
	 float2  DirectionalLightDistanceFadeMAD;
	 uint  NumDirectionalLightCascades;
	 int  DirectionalLightVSM;
	 float4  CascadeEndDepths;
	 float4x4  DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  DirectionalLightShadowmapMinMax[4];
	 float4  DirectionalLightShadowmapAtlasBufferSize;
	 float  DirectionalLightDepthBias;
	 uint  DirectionalLightUseStaticShadowing;
	 uint  SimpleLightsEndIndex;
	 uint  ClusteredDeferredSupportedEndIndex;
	 uint  LumenSupportedStartIndex;
	 float4  DirectionalLightStaticShadowBufferSize;
	 float4x4  DirectionalLightTranslatedWorldToStaticShadow;
	 uint  DirectLightingShowFlag;
struct {
	 float  ScreenRayLength;
	 int  SMRTRayCount;
	 int  SMRTSamplesPerRay;
	 float  SMRTRayLengthScale;
	 float  SMRTCotMaxRayAngleFromLight;
	 float  SMRTTexelDitherScale;
	 float  SMRTExtrapolateSlope;
	 float  SMRTMaxSlopeBias;
	 uint  SMRTAdaptiveRayCount;
} DirectionalLightSMRTSettings;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
} ForwardMMV;
struct {
	 float4  ReflectionPlane;
	 float4  PlanarReflectionOrigin;
	 float4  PlanarReflectionXAxis;
	 float4  PlanarReflectionYAxis;
	 float3x4  InverseTransposeMirrorMatrix;
	 float3  PlanarReflectionParameters;
	 float2  PlanarReflectionParameters2;
	 float4x4  ProjectionWithExtraFOV[2];
	 float4  PlanarReflectionScreenScaleBias[2];
	 float2  PlanarReflectionScreenBound;
	 uint  bIsStereo;
	Texture2D PlanarReflectionTexture;
	SamplerState PlanarReflectionSampler;
} PlanarReflection;
struct {
	Texture2D SceneColorTexture;
	SamplerState SceneColorTextureSampler;
	Texture2D SceneDepthTexture;
	SamplerState SceneDepthTextureSampler;
	Texture2D CustomDepthTexture;
	SamplerState CustomDepthTextureSampler;
	Texture2D<uint2> CustomStencilTexture;
	Texture2D SceneVelocityTexture;
	SamplerState SceneVelocityTextureSampler;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D SceneDepthAuxTexture;
	SamplerState GBufferATextureSampler;
	SamplerState GBufferBTextureSampler;
	SamplerState GBufferCTextureSampler;
	SamplerState GBufferDTextureSampler;
	SamplerState SceneDepthAuxTextureSampler;
} SceneTextures;
struct {
	 uint  MaxBytesPerPixel;
	 uint  bRoughDiffuse;
	 uint  PeelLayersAboveDepth;
	 uint  bRoughnessTracking;
} Strata;
struct {
	 float4  AccuracyColors[5];
	 float4  LODColors[8];
} DebugViewMode;
struct {
	 float4  SkyLightParameters;
	TextureCube SkyLightCubemap;
	SamplerState SkyLightCubemapSampler;
	TextureCube SkyLightBlendDestinationCubemap;
	SamplerState SkyLightBlendDestinationCubemapSampler;
	TextureCubeArray ReflectionCubemap;
	SamplerState ReflectionCubemapSampler;
	Texture2D PreIntegratedGF;
	SamplerState PreIntegratedGFSampler;
} ReflectionsParameters;
	Texture2D PreIntegratedGFTexture;
	SamplerState PreIntegratedGFSampler;
	StructuredBuffer<float4> EyeAdaptationBuffer;
	RWStructuredBuffer<uint> RWOcclusionBufferUAV;
	Texture2D AmbientOcclusionTexture;
	SamplerState AmbientOcclusionSampler;
	Texture2D ScreenSpaceShadowMaskTexture;
	SamplerState ScreenSpaceShadowMaskSampler;
} MobileBasePass = {MobileBasePass_AmbientOcclusionStaticFraction,{MobileBasePass_Fog_ExponentialFogParameters,MobileBasePass_Fog_ExponentialFogParameters2,MobileBasePass_Fog_ExponentialFogColorParameter,MobileBasePass_Fog_ExponentialFogParameters3,MobileBasePass_Fog_SkyAtmosphereAmbientContributionColorScale,MobileBasePass_Fog_InscatteringLightDirection,MobileBasePass_Fog_DirectionalInscatteringColor,MobileBasePass_Fog_SinCosInscatteringColorCubemapRotation,MobileBasePass_Fog_FogInscatteringTextureParameters,MobileBasePass_Fog_ApplyVolumetricFog,MobileBasePass_Fog_VolumetricFogStartDistance,MobileBasePass_Fog_VolumetricFogNearFadeInDistanceInv,MobileBasePass_Fog_FogInscatteringColorCubemap,MobileBasePass_Fog_FogInscatteringColorSampler,MobileBasePass_Fog_IntegratedLightScattering,MobileBasePass_Fog_IntegratedLightScatteringSampler,},{MobileBasePass_Forward_NumLocalLights,MobileBasePass_Forward_NumReflectionCaptures,MobileBasePass_Forward_HasDirectionalLight,MobileBasePass_Forward_NumGridCells,MobileBasePass_Forward_CulledGridSize,MobileBasePass_Forward_MaxCulledLightsPerCell,MobileBasePass_Forward_LightGridPixelSizeShift,MobileBasePass_Forward_LightGridZParams,MobileBasePass_Forward_DirectionalLightDirection,MobileBasePass_Forward_DirectionalLightSourceRadius,MobileBasePass_Forward_DirectionalLightColor,MobileBasePass_Forward_DirectionalLightVolumetricScatteringIntensity,MobileBasePass_Forward_DirectionalLightShadowMapChannelMask,MobileBasePass_Forward_DirectionalLightDistanceFadeMAD,MobileBasePass_Forward_NumDirectionalLightCascades,MobileBasePass_Forward_DirectionalLightVSM,MobileBasePass_Forward_CascadeEndDepths,MobileBasePass_Forward_DirectionalLightTranslatedWorldToShadowMatrix,MobileBasePass_Forward_DirectionalLightShadowmapMinMax,MobileBasePass_Forward_DirectionalLightShadowmapAtlasBufferSize,MobileBasePass_Forward_DirectionalLightDepthBias,MobileBasePass_Forward_DirectionalLightUseStaticShadowing,MobileBasePass_Forward_SimpleLightsEndIndex,MobileBasePass_Forward_ClusteredDeferredSupportedEndIndex,MobileBasePass_Forward_LumenSupportedStartIndex,MobileBasePass_Forward_DirectionalLightStaticShadowBufferSize,MobileBasePass_Forward_DirectionalLightTranslatedWorldToStaticShadow,MobileBasePass_Forward_DirectLightingShowFlag,{MobileBasePass_Forward_DirectionalLightSMRTSettings_ScreenRayLength,MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTRayCount,MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay,MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale,MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight,MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale,MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope,MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias,MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount,},MobileBasePass_Forward_DirectionalLightShadowmapAtlas,MobileBasePass_Forward_ShadowmapSampler,MobileBasePass_Forward_DirectionalLightStaticShadowmap,MobileBasePass_Forward_StaticShadowmapSampler,MobileBasePass_Forward_ForwardLocalLightBuffer,MobileBasePass_Forward_NumCulledLightsGrid,MobileBasePass_Forward_CulledLightDataGrid,},{MobileBasePass_ForwardMMV_NumLocalLights,MobileBasePass_ForwardMMV_NumReflectionCaptures,MobileBasePass_ForwardMMV_HasDirectionalLight,MobileBasePass_ForwardMMV_NumGridCells,MobileBasePass_ForwardMMV_CulledGridSize,MobileBasePass_ForwardMMV_MaxCulledLightsPerCell,MobileBasePass_ForwardMMV_LightGridPixelSizeShift,MobileBasePass_ForwardMMV_LightGridZParams,MobileBasePass_ForwardMMV_DirectionalLightDirection,MobileBasePass_ForwardMMV_DirectionalLightSourceRadius,MobileBasePass_ForwardMMV_DirectionalLightColor,MobileBasePass_ForwardMMV_DirectionalLightVolumetricScatteringIntensity,MobileBasePass_ForwardMMV_DirectionalLightShadowMapChannelMask,MobileBasePass_ForwardMMV_DirectionalLightDistanceFadeMAD,MobileBasePass_ForwardMMV_NumDirectionalLightCascades,MobileBasePass_ForwardMMV_DirectionalLightVSM,MobileBasePass_ForwardMMV_CascadeEndDepths,MobileBasePass_ForwardMMV_DirectionalLightTranslatedWorldToShadowMatrix,MobileBasePass_ForwardMMV_DirectionalLightShadowmapMinMax,MobileBasePass_ForwardMMV_DirectionalLightShadowmapAtlasBufferSize,MobileBasePass_ForwardMMV_DirectionalLightDepthBias,MobileBasePass_ForwardMMV_DirectionalLightUseStaticShadowing,MobileBasePass_ForwardMMV_SimpleLightsEndIndex,MobileBasePass_ForwardMMV_ClusteredDeferredSupportedEndIndex,MobileBasePass_ForwardMMV_LumenSupportedStartIndex,MobileBasePass_ForwardMMV_DirectionalLightStaticShadowBufferSize,MobileBasePass_ForwardMMV_DirectionalLightTranslatedWorldToStaticShadow,MobileBasePass_ForwardMMV_DirectLightingShowFlag,{MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_ScreenRayLength,MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTRayCount,MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTSamplesPerRay,MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTRayLengthScale,MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight,MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTTexelDitherScale,MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTExtrapolateSlope,MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTMaxSlopeBias,MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount,},MobileBasePass_ForwardMMV_DirectionalLightShadowmapAtlas,MobileBasePass_ForwardMMV_ShadowmapSampler,MobileBasePass_ForwardMMV_DirectionalLightStaticShadowmap,MobileBasePass_ForwardMMV_StaticShadowmapSampler,MobileBasePass_ForwardMMV_ForwardLocalLightBuffer,MobileBasePass_ForwardMMV_NumCulledLightsGrid,MobileBasePass_ForwardMMV_CulledLightDataGrid,},{MobileBasePass_PlanarReflection_ReflectionPlane,MobileBasePass_PlanarReflection_PlanarReflectionOrigin,MobileBasePass_PlanarReflection_PlanarReflectionXAxis,MobileBasePass_PlanarReflection_PlanarReflectionYAxis,MobileBasePass_PlanarReflection_InverseTransposeMirrorMatrix,MobileBasePass_PlanarReflection_PlanarReflectionParameters,MobileBasePass_PlanarReflection_PlanarReflectionParameters2,MobileBasePass_PlanarReflection_ProjectionWithExtraFOV,MobileBasePass_PlanarReflection_PlanarReflectionScreenScaleBias,MobileBasePass_PlanarReflection_PlanarReflectionScreenBound,MobileBasePass_PlanarReflection_bIsStereo,MobileBasePass_PlanarReflection_PlanarReflectionTexture,MobileBasePass_PlanarReflection_PlanarReflectionSampler,},{MobileBasePass_SceneTextures_SceneColorTexture,MobileBasePass_SceneTextures_SceneColorTextureSampler,MobileBasePass_SceneTextures_SceneDepthTexture,MobileBasePass_SceneTextures_SceneDepthTextureSampler,MobileBasePass_SceneTextures_CustomDepthTexture,MobileBasePass_SceneTextures_CustomDepthTextureSampler,MobileBasePass_SceneTextures_CustomStencilTexture,MobileBasePass_SceneTextures_SceneVelocityTexture,MobileBasePass_SceneTextures_SceneVelocityTextureSampler,MobileBasePass_SceneTextures_GBufferATexture,MobileBasePass_SceneTextures_GBufferBTexture,MobileBasePass_SceneTextures_GBufferCTexture,MobileBasePass_SceneTextures_GBufferDTexture,MobileBasePass_SceneTextures_SceneDepthAuxTexture,MobileBasePass_SceneTextures_GBufferATextureSampler,MobileBasePass_SceneTextures_GBufferBTextureSampler,MobileBasePass_SceneTextures_GBufferCTextureSampler,MobileBasePass_SceneTextures_GBufferDTextureSampler,MobileBasePass_SceneTextures_SceneDepthAuxTextureSampler,},{MobileBasePass_Strata_MaxBytesPerPixel,MobileBasePass_Strata_bRoughDiffuse,MobileBasePass_Strata_PeelLayersAboveDepth,MobileBasePass_Strata_bRoughnessTracking,},{MobileBasePass_DebugViewMode_AccuracyColors,MobileBasePass_DebugViewMode_LODColors,},{MobileBasePass_ReflectionsParameters_SkyLightParameters,MobileBasePass_ReflectionsParameters_SkyLightCubemap,MobileBasePass_ReflectionsParameters_SkyLightCubemapSampler,MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemap,MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemapSampler,MobileBasePass_ReflectionsParameters_ReflectionCubemap,MobileBasePass_ReflectionsParameters_ReflectionCubemapSampler,MobileBasePass_ReflectionsParameters_PreIntegratedGF,MobileBasePass_ReflectionsParameters_PreIntegratedGFSampler,},MobileBasePass_PreIntegratedGFTexture,MobileBasePass_PreIntegratedGFSampler,MobileBasePass_EyeAdaptationBuffer,MobileBasePass_RWOcclusionBufferUAV,MobileBasePass_AmbientOcclusionTexture,MobileBasePass_AmbientOcclusionSampler,MobileBasePass_ScreenSpaceShadowMaskTexture,MobileBasePass_ScreenSpaceShadowMaskSampler,*/

#line  19 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"

cbuffer   TranslucentBasePass 
{
	 uint  TranslucentBasePass_Shared_Forward_NumLocalLights;
	 uint  TranslucentBasePass_Shared_Forward_NumReflectionCaptures;
	 uint  TranslucentBasePass_Shared_Forward_HasDirectionalLight;
	 uint  TranslucentBasePass_Shared_Forward_NumGridCells;
	 int3  TranslucentBasePass_Shared_Forward_CulledGridSize;
	 uint  TranslucentBasePass_Shared_Forward_MaxCulledLightsPerCell;
	 uint  TranslucentBasePass_Shared_Forward_LightGridPixelSizeShift;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_36;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_40;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_44;
	 float3  TranslucentBasePass_Shared_Forward_LightGridZParams;
	 float  PrePadding_TranslucentBasePass_Shared_Forward_60;
	 float3  TranslucentBasePass_Shared_Forward_DirectionalLightDirection;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSourceRadius;
	 float3  TranslucentBasePass_Shared_Forward_DirectionalLightColor;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity;
	 uint  TranslucentBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_100;
	 float2  TranslucentBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD;
	 uint  TranslucentBasePass_Shared_Forward_NumDirectionalLightCascades;
	 int  TranslucentBasePass_Shared_Forward_DirectionalLightVSM;
	 int  PrePadding_TranslucentBasePass_Shared_Forward_120;
	 int  PrePadding_TranslucentBasePass_Shared_Forward_124;
	 float4  TranslucentBasePass_Shared_Forward_CascadeEndDepths;
	 float4x4  TranslucentBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapMinMax[4];
	 float4  TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightDepthBias;
	 uint  TranslucentBasePass_Shared_Forward_DirectionalLightUseStaticShadowing;
	 uint  TranslucentBasePass_Shared_Forward_SimpleLightsEndIndex;
	 uint  TranslucentBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex;
	 uint  TranslucentBasePass_Shared_Forward_LumenSupportedStartIndex;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_500;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_504;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_508;
	 float4  TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize;
	 float4x4  TranslucentBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  TranslucentBasePass_Shared_Forward_DirectLightingShowFlag;
	 float  PrePadding_TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_596;
	 float  PrePadding_TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_600;
	 float  PrePadding_TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_604;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_644;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_648;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_652;
	 uint BindlessResource_TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_660;
	 uint BindlessSampler_TranslucentBasePass_Shared_Forward_ShadowmapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_668;
	 uint BindlessResource_TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_676;
	 uint BindlessSampler_TranslucentBasePass_Shared_Forward_StaticShadowmapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_684;
	 uint BindlessResource_TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer ;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_692;
	 uint BindlessResource_TranslucentBasePass_Shared_Forward_NumCulledLightsGrid ;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_700;
	 uint BindlessResource_TranslucentBasePass_Shared_Forward_CulledLightDataGrid ;
	 float  PrePadding_TranslucentBasePass_Shared_ForwardISR_708;
	 float  PrePadding_TranslucentBasePass_Shared_ForwardISR_712;
	 float  PrePadding_TranslucentBasePass_Shared_ForwardISR_716;
	 uint  TranslucentBasePass_Shared_ForwardISR_NumLocalLights;
	 uint  TranslucentBasePass_Shared_ForwardISR_NumReflectionCaptures;
	 uint  TranslucentBasePass_Shared_ForwardISR_HasDirectionalLight;
	 uint  TranslucentBasePass_Shared_ForwardISR_NumGridCells;
	 int3  TranslucentBasePass_Shared_ForwardISR_CulledGridSize;
	 uint  TranslucentBasePass_Shared_ForwardISR_MaxCulledLightsPerCell;
	 uint  TranslucentBasePass_Shared_ForwardISR_LightGridPixelSizeShift;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_756;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_760;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_764;
	 float3  TranslucentBasePass_Shared_ForwardISR_LightGridZParams;
	 float  PrePadding_TranslucentBasePass_Shared_ForwardISR_780;
	 float3  TranslucentBasePass_Shared_ForwardISR_DirectionalLightDirection;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSourceRadius;
	 float3  TranslucentBasePass_Shared_ForwardISR_DirectionalLightColor;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity;
	 uint  TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_820;
	 float2  TranslucentBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD;
	 uint  TranslucentBasePass_Shared_ForwardISR_NumDirectionalLightCascades;
	 int  TranslucentBasePass_Shared_ForwardISR_DirectionalLightVSM;
	 int  PrePadding_TranslucentBasePass_Shared_ForwardISR_840;
	 int  PrePadding_TranslucentBasePass_Shared_ForwardISR_844;
	 float4  TranslucentBasePass_Shared_ForwardISR_CascadeEndDepths;
	 float4x4  TranslucentBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax[4];
	 float4  TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightDepthBias;
	 uint  TranslucentBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing;
	 uint  TranslucentBasePass_Shared_ForwardISR_SimpleLightsEndIndex;
	 uint  TranslucentBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex;
	 uint  TranslucentBasePass_Shared_ForwardISR_LumenSupportedStartIndex;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1220;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1224;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1228;
	 float4  TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize;
	 float4x4  TranslucentBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  TranslucentBasePass_Shared_ForwardISR_DirectLightingShowFlag;
	 float  PrePadding_TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1316;
	 float  PrePadding_TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1320;
	 float  PrePadding_TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1324;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1364;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1368;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1372;
	 uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1380;
	 uint BindlessSampler_TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1388;
	 uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1396;
	 uint BindlessSampler_TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1404;
	 uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer ;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1412;
	 uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid ;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1420;
	 uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid ;
	 float  PrePadding_TranslucentBasePass_Shared_Reflection_1428;
	 float  PrePadding_TranslucentBasePass_Shared_Reflection_1432;
	 float  PrePadding_TranslucentBasePass_Shared_Reflection_1436;
	 float4  TranslucentBasePass_Shared_Reflection_SkyLightParameters;
	 uint BindlessResource_TranslucentBasePass_Shared_Reflection_SkyLightCubemap ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1460;
	 uint BindlessSampler_TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1468;
	 uint BindlessResource_TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1476;
	 uint BindlessSampler_TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1484;
	 uint BindlessResource_TranslucentBasePass_Shared_Reflection_ReflectionCubemap ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1492;
	 uint BindlessSampler_TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1500;
	 uint BindlessResource_TranslucentBasePass_Shared_Reflection_PreIntegratedGF ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1508;
	 uint BindlessSampler_TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler ;
	 float  PrePadding_TranslucentBasePass_Shared_PlanarReflection_1516;
	 float4  TranslucentBasePass_Shared_PlanarReflection_ReflectionPlane;
	 float4  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionOrigin;
	 float4  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionXAxis;
	 float4  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionYAxis;
	 float3x4  TranslucentBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix;
	 float3  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters;
	 float  PrePadding_TranslucentBasePass_Shared_PlanarReflection_1644;
	 float2  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters2;
	 float  PrePadding_TranslucentBasePass_Shared_PlanarReflection_1656;
	 float  PrePadding_TranslucentBasePass_Shared_PlanarReflection_1660;
	 float4x4  TranslucentBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV[2];
	 float4  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias[2];
	 float2  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound;
	 uint  TranslucentBasePass_Shared_PlanarReflection_bIsStereo;
	 uint  PrePadding_TranslucentBasePass_Shared_PlanarReflection_1836;
	 uint BindlessResource_TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture ;
	 uint  PrePadding_TranslucentBasePass_Shared_PlanarReflection_1844;
	 uint BindlessSampler_TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler ;
	 float  PrePadding_TranslucentBasePass_Shared_Fog_1852;
	 float4  TranslucentBasePass_Shared_Fog_ExponentialFogParameters;
	 float4  TranslucentBasePass_Shared_Fog_ExponentialFogParameters2;
	 float4  TranslucentBasePass_Shared_Fog_ExponentialFogColorParameter;
	 float4  TranslucentBasePass_Shared_Fog_ExponentialFogParameters3;
	 float4  TranslucentBasePass_Shared_Fog_SkyAtmosphereAmbientContributionColorScale;
	 float4  TranslucentBasePass_Shared_Fog_InscatteringLightDirection;
	 float4  TranslucentBasePass_Shared_Fog_DirectionalInscatteringColor;
	 float2  TranslucentBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation;
	 float  PrePadding_TranslucentBasePass_Shared_Fog_1976;
	 float  PrePadding_TranslucentBasePass_Shared_Fog_1980;
	 float3  TranslucentBasePass_Shared_Fog_FogInscatteringTextureParameters;
	 float  TranslucentBasePass_Shared_Fog_ApplyVolumetricFog;
	 float  TranslucentBasePass_Shared_Fog_VolumetricFogStartDistance;
	 float  TranslucentBasePass_Shared_Fog_VolumetricFogNearFadeInDistanceInv;
	 uint BindlessResource_TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap ;
	 uint  PrePadding_TranslucentBasePass_Shared_Fog_2012;
	 uint BindlessSampler_TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_Fog_2020;
	 uint BindlessResource_TranslucentBasePass_Shared_Fog_IntegratedLightScattering ;
	 uint  PrePadding_TranslucentBasePass_Shared_Fog_2028;
	 uint BindlessSampler_TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler ;
	 float  PrePadding_TranslucentBasePass_Shared_FogISR_2036;
	 float  PrePadding_TranslucentBasePass_Shared_FogISR_2040;
	 float  PrePadding_TranslucentBasePass_Shared_FogISR_2044;
	 float4  TranslucentBasePass_Shared_FogISR_ExponentialFogParameters;
	 float4  TranslucentBasePass_Shared_FogISR_ExponentialFogParameters2;
	 float4  TranslucentBasePass_Shared_FogISR_ExponentialFogColorParameter;
	 float4  TranslucentBasePass_Shared_FogISR_ExponentialFogParameters3;
	 float4  TranslucentBasePass_Shared_FogISR_SkyAtmosphereAmbientContributionColorScale;
	 float4  TranslucentBasePass_Shared_FogISR_InscatteringLightDirection;
	 float4  TranslucentBasePass_Shared_FogISR_DirectionalInscatteringColor;
	 float2  TranslucentBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation;
	 float  PrePadding_TranslucentBasePass_Shared_FogISR_2168;
	 float  PrePadding_TranslucentBasePass_Shared_FogISR_2172;
	 float3  TranslucentBasePass_Shared_FogISR_FogInscatteringTextureParameters;
	 float  TranslucentBasePass_Shared_FogISR_ApplyVolumetricFog;
	 float  TranslucentBasePass_Shared_FogISR_VolumetricFogStartDistance;
	 float  TranslucentBasePass_Shared_FogISR_VolumetricFogNearFadeInDistanceInv;
	 uint BindlessResource_TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap ;
	 uint  PrePadding_TranslucentBasePass_Shared_FogISR_2204;
	 uint BindlessSampler_TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_FogISR_2212;
	 uint BindlessResource_TranslucentBasePass_Shared_FogISR_IntegratedLightScattering ;
	 uint  PrePadding_TranslucentBasePass_Shared_FogISR_2220;
	 uint BindlessSampler_TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler ;
	 float  PrePadding_TranslucentBasePass_Shared_2228;
	 float  PrePadding_TranslucentBasePass_Shared_2232;
	 float  PrePadding_TranslucentBasePass_Shared_2236;
	 uint  TranslucentBasePass_Shared_UseBasePassSkylight;
	 float  PrePadding_TranslucentBasePass_SceneTextures_2244;
	 float  PrePadding_TranslucentBasePass_SceneTextures_2248;
	 float  PrePadding_TranslucentBasePass_SceneTextures_2252;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_SceneColorTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2260;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_SceneDepthTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2268;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferATexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2276;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferBTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2284;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferCTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2292;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferDTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2300;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferETexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2308;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferFTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2316;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferVelocityTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2324;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2332;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_CustomDepthTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2340;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_CustomStencilTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2348;
	 uint BindlessSampler_TranslucentBasePass_SceneTextures_PointClampSampler ;
	 float  PrePadding_TranslucentBasePass_Strata_2356;
	 float  PrePadding_TranslucentBasePass_Strata_2360;
	 float  PrePadding_TranslucentBasePass_Strata_2364;
	 uint  TranslucentBasePass_Strata_MaxBytesPerPixel;
	 uint  TranslucentBasePass_Strata_bRoughDiffuse;
	 uint  TranslucentBasePass_Strata_PeelLayersAboveDepth;
	 uint  TranslucentBasePass_Strata_bRoughnessTracking;
	 int  TranslucentBasePass_Strata_FirstSliceStoringStrataSSSData;
	 int  PrePadding_TranslucentBasePass_Strata_2388;
	 uint BindlessResource_TranslucentBasePass_Strata_MaterialTextureArray ;
	 uint  PrePadding_TranslucentBasePass_Strata_2396;
	 uint BindlessResource_TranslucentBasePass_Strata_TopLayerTexture ;
	 float  PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2404;
	 float  PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2408;
	 float  PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2412;
	 float4x4  TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTranslatedWorldToLightClipMatrix;
	 float  TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapFarDepthKm;
	 float  PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2484;
	 uint BindlessResource_TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture ;
	 uint  PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2492;
	 uint BindlessSampler_TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler ;
	 uint  PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2500;
	 float  TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapStrength;
	 float  PrePadding_TranslucentBasePass_OIT_2508;
	 uint  TranslucentBasePass_OIT_bOITEnable;
	 uint  TranslucentBasePass_OIT_OITMethod;
	 uint  TranslucentBasePass_OIT_MaxSideSamplePerPixel;
	 uint  TranslucentBasePass_OIT_MaxSamplePerPixel;
	 uint  TranslucentBasePass_OIT_TransmittanceThreshold;
	 uint  PrePadding_TranslucentBasePass_OIT_2532;
	 uint BindlessResource_TranslucentBasePass_OIT_OutOITSampleCount ;
	 uint  PrePadding_TranslucentBasePass_OIT_2540;
	 uint BindlessResource_TranslucentBasePass_OIT_OutOITSampleColor ;
	 uint  PrePadding_TranslucentBasePass_OIT_2548;
	 uint BindlessResource_TranslucentBasePass_OIT_OutOITSampleTrans ;
	 uint  PrePadding_TranslucentBasePass_OIT_2556;
	 uint BindlessResource_TranslucentBasePass_OIT_OutOITSampleDepth ;
	 float  PrePadding_TranslucentBasePass_2564;
	 float  PrePadding_TranslucentBasePass_2568;
	 float  PrePadding_TranslucentBasePass_2572;
	 float4  TranslucentBasePass_HZBUvFactorAndInvFactor;
	 float4  TranslucentBasePass_PrevScreenPositionScaleBias;
	 float2  TranslucentBasePass_PrevSceneColorBilinearUVMin;
	 float2  TranslucentBasePass_PrevSceneColorBilinearUVMax;
	 float  TranslucentBasePass_PrevSceneColorPreExposureInv;
	 int  TranslucentBasePass_SSRQuality;
	 uint BindlessResource_TranslucentBasePass_HZBTexture ;
	 uint  PrePadding_TranslucentBasePass_2636;
	 uint BindlessSampler_TranslucentBasePass_HZBSampler ;
	 uint  PrePadding_TranslucentBasePass_2644;
	 uint BindlessResource_TranslucentBasePass_PrevSceneColor ;
	 uint  PrePadding_TranslucentBasePass_2652;
	 uint BindlessSampler_TranslucentBasePass_PrevSceneColorSampler ;
	 uint  PrePadding_TranslucentBasePass_2660;
	 uint BindlessResource_TranslucentBasePass_VolumetricCloudColor ;
	 uint  PrePadding_TranslucentBasePass_2668;
	 uint BindlessSampler_TranslucentBasePass_VolumetricCloudColorSampler ;
	 uint  PrePadding_TranslucentBasePass_2676;
	 uint BindlessResource_TranslucentBasePass_VolumetricCloudDepth ;
	 uint  PrePadding_TranslucentBasePass_2684;
	 uint BindlessSampler_TranslucentBasePass_VolumetricCloudDepthSampler ;
	 uint  PrePadding_TranslucentBasePass_2692;
	 float  TranslucentBasePass_ApplyVolumetricCloudOnTransparent;
	 float  TranslucentBasePass_SoftBlendingDistanceKm;
	 uint BindlessResource_TranslucentBasePass_TranslucencyLightingVolumeAmbientInner ;
	 uint  PrePadding_TranslucentBasePass_2708;
	 uint BindlessResource_TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter ;
	 uint  PrePadding_TranslucentBasePass_2716;
	 uint BindlessResource_TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner ;
	 uint  PrePadding_TranslucentBasePass_2724;
	 uint BindlessResource_TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter ;
	 float  PrePadding_TranslucentBasePass_2732;
	 float  TranslucentBasePass_ReprojectionRadiusScale;
	 float  TranslucentBasePass_ClipmapWorldExtent;
	 float  TranslucentBasePass_ClipmapDistributionBase;
	 float  TranslucentBasePass_InvClipmapFadeSize;
	 int2  TranslucentBasePass_ProbeAtlasResolutionInProbes;
	 uint  TranslucentBasePass_RadianceProbeClipmapResolution;
	 uint  TranslucentBasePass_NumRadianceProbeClipmaps;
	 uint  TranslucentBasePass_RadianceProbeResolution;
	 uint  TranslucentBasePass_FinalProbeResolution;
	 uint  TranslucentBasePass_FinalRadianceAtlasMaxMip;
	 uint  TranslucentBasePass_CalculateIrradiance;
	 uint  TranslucentBasePass_IrradianceProbeResolution;
	 uint  TranslucentBasePass_OcclusionProbeResolution;
	 uint  TranslucentBasePass_NumProbesToTraceBudget;
	 uint  TranslucentBasePass_RadianceCacheStats;
	 uint BindlessResource_TranslucentBasePass_RadianceProbeIndirectionTexture ;
	 uint  PrePadding_TranslucentBasePass_2804;
	 uint BindlessResource_TranslucentBasePass_RadianceCacheFinalRadianceAtlas ;
	 uint  PrePadding_TranslucentBasePass_2812;
	 uint BindlessResource_TranslucentBasePass_RadianceCacheFinalIrradianceAtlas ;
	 uint  PrePadding_TranslucentBasePass_2820;
	 uint BindlessResource_TranslucentBasePass_RadianceCacheProbeOcclusionAtlas ;
	 uint  PrePadding_TranslucentBasePass_2828;
	 uint BindlessResource_TranslucentBasePass_RadianceCacheDepthAtlas ;
	 uint  PrePadding_TranslucentBasePass_2836;
	 uint BindlessResource_TranslucentBasePass_ProbeWorldOffset ;
	 uint  PrePadding_TranslucentBasePass_2844;
	 float4  TranslucentBasePass_RadianceProbeSettings[6];
	 float4  TranslucentBasePass_PaddedWorldPositionToRadianceProbeCoordBias[6];
	 float4  TranslucentBasePass_PaddedRadianceProbeCoordToWorldPositionBias[6];
	 float2  TranslucentBasePass_InvProbeFinalRadianceAtlasResolution;
	 float2  TranslucentBasePass_InvProbeFinalIrradianceAtlasResolution;
	 float2  TranslucentBasePass_InvProbeDepthAtlasResolution;
	 uint  TranslucentBasePass_OverrideCacheOcclusionLighting;
	 uint  TranslucentBasePass_ShowBlackRadianceCacheLighting;
	 uint  TranslucentBasePass_ProbeAtlasResolutionModuloMask;
	 uint  TranslucentBasePass_ProbeAtlasResolutionDivideShift;
	 float  PrePadding_TranslucentBasePass_3176;
	 float  PrePadding_TranslucentBasePass_3180;
	 uint BindlessResource_TranslucentBasePass_Radiance ;
	 uint  PrePadding_TranslucentBasePass_3188;
	 uint BindlessResource_TranslucentBasePass_Normal ;
	 uint  PrePadding_TranslucentBasePass_3196;
	 uint BindlessResource_TranslucentBasePass_SceneDepth ;
	 uint  PrePadding_TranslucentBasePass_3204;
	 uint  TranslucentBasePass_Enabled;
	 float  TranslucentBasePass_RelativeDepthThreshold;
	 float  TranslucentBasePass_SpecularScale;
	 float  TranslucentBasePass_Contrast;
	 float  PrePadding_TranslucentBasePass_3224;
	 float  PrePadding_TranslucentBasePass_3228;
	 uint BindlessResource_TranslucentBasePass_TranslucencyGIVolume0 ;
	 uint  PrePadding_TranslucentBasePass_3236;
	 uint BindlessResource_TranslucentBasePass_TranslucencyGIVolume1 ;
	 uint  PrePadding_TranslucentBasePass_3244;
	 uint BindlessResource_TranslucentBasePass_TranslucencyGIVolumeHistory0 ;
	 uint  PrePadding_TranslucentBasePass_3252;
	 uint BindlessResource_TranslucentBasePass_TranslucencyGIVolumeHistory1 ;
	 uint  PrePadding_TranslucentBasePass_3260;
	 uint BindlessSampler_TranslucentBasePass_TranslucencyGIVolumeSampler ;
	 uint  PrePadding_TranslucentBasePass_3268;
	 uint  PrePadding_TranslucentBasePass_3272;
	 uint  PrePadding_TranslucentBasePass_3276;
	 float3  TranslucentBasePass_TranslucencyGIGridZParams;
	 uint  TranslucentBasePass_TranslucencyGIGridPixelSizeShift;
	 int3  TranslucentBasePass_TranslucencyGIGridSize;
	 float  PrePadding_TranslucentBasePass_3308;
	 uint BindlessResource_TranslucentBasePass_PreIntegratedGFTexture ;
	 uint  PrePadding_TranslucentBasePass_3316;
	 uint BindlessSampler_TranslucentBasePass_PreIntegratedGFSampler ;
	 uint  PrePadding_TranslucentBasePass_3324;
	 uint BindlessResource_TranslucentBasePass_EyeAdaptationBuffer ;
	 uint  PrePadding_TranslucentBasePass_3332;
	 uint BindlessResource_TranslucentBasePass_SceneColorCopyTexture ;
	 uint  PrePadding_TranslucentBasePass_3340;
	 uint BindlessSampler_TranslucentBasePass_SceneColorCopySampler ;
	 float  PrePadding_TranslucentBasePass_BlueNoise_3348;
	 float  PrePadding_TranslucentBasePass_BlueNoise_3352;
	 float  PrePadding_TranslucentBasePass_BlueNoise_3356;
	 int3  TranslucentBasePass_BlueNoise_Dimensions;
	 int  PrePadding_TranslucentBasePass_BlueNoise_3372;
	 int3  TranslucentBasePass_BlueNoise_ModuloMasks;
	 int  PrePadding_TranslucentBasePass_BlueNoise_3388;
	 uint BindlessResource_TranslucentBasePass_BlueNoise_ScalarTexture ;
	 uint  PrePadding_TranslucentBasePass_BlueNoise_3396;
	 uint BindlessResource_TranslucentBasePass_BlueNoise_Vec2Texture ;
}
  Texture2D  TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas ;
  SamplerState  TranslucentBasePass_Shared_Forward_ShadowmapSampler ;
  Texture2D  TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap ;
  SamplerState  TranslucentBasePass_Shared_Forward_StaticShadowmapSampler ;
  Buffer<float4>  TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer ;
  Buffer<uint>  TranslucentBasePass_Shared_Forward_NumCulledLightsGrid ;
  Buffer<uint>  TranslucentBasePass_Shared_Forward_CulledLightDataGrid ;
  Texture2D  TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas ;
  SamplerState  TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler ;
  Texture2D  TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap ;
  SamplerState  TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler ;
  Buffer<float4>  TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer ;
  Buffer<uint>  TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid ;
  Buffer<uint>  TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid ;
  TextureCube  TranslucentBasePass_Shared_Reflection_SkyLightCubemap ;
  SamplerState  TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler ;
  TextureCube  TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap ;
  SamplerState  TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler ;
  TextureCubeArray  TranslucentBasePass_Shared_Reflection_ReflectionCubemap ;
  SamplerState  TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler ;
  Texture2D  TranslucentBasePass_Shared_Reflection_PreIntegratedGF ;
  SamplerState  TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler ;
  Texture2D  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture ;
  SamplerState  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler ;
  TextureCube  TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap ;
  SamplerState  TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler ;
  Texture3D  TranslucentBasePass_Shared_Fog_IntegratedLightScattering ;
  SamplerState  TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler ;
  TextureCube  TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap ;
  SamplerState  TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler ;
  Texture3D  TranslucentBasePass_Shared_FogISR_IntegratedLightScattering ;
  SamplerState  TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler ;
  Texture2D  TranslucentBasePass_SceneTextures_SceneColorTexture ;
  Texture2D  TranslucentBasePass_SceneTextures_SceneDepthTexture ;
  Texture2D  TranslucentBasePass_SceneTextures_GBufferATexture ;
  Texture2D  TranslucentBasePass_SceneTextures_GBufferBTexture ;
  Texture2D  TranslucentBasePass_SceneTextures_GBufferCTexture ;
  Texture2D  TranslucentBasePass_SceneTextures_GBufferDTexture ;
  Texture2D  TranslucentBasePass_SceneTextures_GBufferETexture ;
  Texture2D  TranslucentBasePass_SceneTextures_GBufferFTexture ;
  Texture2D  TranslucentBasePass_SceneTextures_GBufferVelocityTexture ;
  Texture2D  TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture ;
  Texture2D  TranslucentBasePass_SceneTextures_CustomDepthTexture ;
  Texture2D<uint2>  TranslucentBasePass_SceneTextures_CustomStencilTexture ;
  SamplerState  TranslucentBasePass_SceneTextures_PointClampSampler ;
  Texture2DArray<uint>  TranslucentBasePass_Strata_MaterialTextureArray ;
  Texture2D<uint2>  TranslucentBasePass_Strata_TopLayerTexture ;
  Texture2D<float3>  TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture ;
  SamplerState  TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler ;
  RWTexture2D<uint>  TranslucentBasePass_OIT_OutOITSampleCount ;
  RWTexture2D<uint>  TranslucentBasePass_OIT_OutOITSampleColor ;
  RWTexture2D<uint>  TranslucentBasePass_OIT_OutOITSampleTrans ;
  RWTexture2D<float>  TranslucentBasePass_OIT_OutOITSampleDepth ;
  Texture3D  TranslucentBasePass_TranslucencyLightingVolumeAmbientInner ;
  Texture3D  TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter ;
  Texture3D  TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner ;
  Texture3D  TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter ;
  Texture3D<uint>  TranslucentBasePass_RadianceProbeIndirectionTexture ;
  Texture2D<float3>  TranslucentBasePass_RadianceCacheFinalRadianceAtlas ;
  Texture2D<float3>  TranslucentBasePass_RadianceCacheFinalIrradianceAtlas ;
  Texture2D<float2>  TranslucentBasePass_RadianceCacheProbeOcclusionAtlas ;
  Texture2D<float>  TranslucentBasePass_RadianceCacheDepthAtlas ;
  StructuredBuffer<float4>  TranslucentBasePass_ProbeWorldOffset ;
  Texture2D  TranslucentBasePass_Radiance ;
  Texture2D  TranslucentBasePass_Normal ;
  Texture2D  TranslucentBasePass_SceneDepth ;
  Texture3D  TranslucentBasePass_TranslucencyGIVolume0 ;
  Texture3D  TranslucentBasePass_TranslucencyGIVolume1 ;
  Texture3D  TranslucentBasePass_TranslucencyGIVolumeHistory0 ;
  Texture3D  TranslucentBasePass_TranslucencyGIVolumeHistory1 ;
  SamplerState  TranslucentBasePass_TranslucencyGIVolumeSampler ;
  Texture2D  TranslucentBasePass_BlueNoise_ScalarTexture ;
  Texture2D  TranslucentBasePass_BlueNoise_Vec2Texture ;
  Texture2D  TranslucentBasePass_HZBTexture ;
  SamplerState  TranslucentBasePass_HZBSampler ;
  Texture2D  TranslucentBasePass_PrevSceneColor ;
  SamplerState  TranslucentBasePass_PrevSceneColorSampler ;
  Texture2D  TranslucentBasePass_VolumetricCloudColor ;
  SamplerState  TranslucentBasePass_VolumetricCloudColorSampler ;
  Texture2D  TranslucentBasePass_VolumetricCloudDepth ;
  SamplerState  TranslucentBasePass_VolumetricCloudDepthSampler ;
  Texture2D  TranslucentBasePass_PreIntegratedGFTexture ;
  SamplerState  TranslucentBasePass_PreIntegratedGFSampler ;
  StructuredBuffer<float4>  TranslucentBasePass_EyeAdaptationBuffer ;
  Texture2D  TranslucentBasePass_SceneColorCopyTexture ;
  SamplerState  TranslucentBasePass_SceneColorCopySampler ;
/*atic const struct
{
struct {
struct {
	 uint  NumLocalLights;
	 uint  NumReflectionCaptures;
	 uint  HasDirectionalLight;
	 uint  NumGridCells;
	 int3  CulledGridSize;
	 uint  MaxCulledLightsPerCell;
	 uint  LightGridPixelSizeShift;
	 float3  LightGridZParams;
	 float3  DirectionalLightDirection;
	 float  DirectionalLightSourceRadius;
	 float3  DirectionalLightColor;
	 float  DirectionalLightVolumetricScatteringIntensity;
	 uint  DirectionalLightShadowMapChannelMask;
	 float2  DirectionalLightDistanceFadeMAD;
	 uint  NumDirectionalLightCascades;
	 int  DirectionalLightVSM;
	 float4  CascadeEndDepths;
	 float4x4  DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  DirectionalLightShadowmapMinMax[4];
	 float4  DirectionalLightShadowmapAtlasBufferSize;
	 float  DirectionalLightDepthBias;
	 uint  DirectionalLightUseStaticShadowing;
	 uint  SimpleLightsEndIndex;
	 uint  ClusteredDeferredSupportedEndIndex;
	 uint  LumenSupportedStartIndex;
	 float4  DirectionalLightStaticShadowBufferSize;
	 float4x4  DirectionalLightTranslatedWorldToStaticShadow;
	 uint  DirectLightingShowFlag;
struct {
	 float  ScreenRayLength;
	 int  SMRTRayCount;
	 int  SMRTSamplesPerRay;
	 float  SMRTRayLengthScale;
	 float  SMRTCotMaxRayAngleFromLight;
	 float  SMRTTexelDitherScale;
	 float  SMRTExtrapolateSlope;
	 float  SMRTMaxSlopeBias;
	 uint  SMRTAdaptiveRayCount;
} DirectionalLightSMRTSettings;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
} Forward;
struct {
	 uint  NumLocalLights;
	 uint  NumReflectionCaptures;
	 uint  HasDirectionalLight;
	 uint  NumGridCells;
	 int3  CulledGridSize;
	 uint  MaxCulledLightsPerCell;
	 uint  LightGridPixelSizeShift;
	 float3  LightGridZParams;
	 float3  DirectionalLightDirection;
	 float  DirectionalLightSourceRadius;
	 float3  DirectionalLightColor;
	 float  DirectionalLightVolumetricScatteringIntensity;
	 uint  DirectionalLightShadowMapChannelMask;
	 float2  DirectionalLightDistanceFadeMAD;
	 uint  NumDirectionalLightCascades;
	 int  DirectionalLightVSM;
	 float4  CascadeEndDepths;
	 float4x4  DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  DirectionalLightShadowmapMinMax[4];
	 float4  DirectionalLightShadowmapAtlasBufferSize;
	 float  DirectionalLightDepthBias;
	 uint  DirectionalLightUseStaticShadowing;
	 uint  SimpleLightsEndIndex;
	 uint  ClusteredDeferredSupportedEndIndex;
	 uint  LumenSupportedStartIndex;
	 float4  DirectionalLightStaticShadowBufferSize;
	 float4x4  DirectionalLightTranslatedWorldToStaticShadow;
	 uint  DirectLightingShowFlag;
struct {
	 float  ScreenRayLength;
	 int  SMRTRayCount;
	 int  SMRTSamplesPerRay;
	 float  SMRTRayLengthScale;
	 float  SMRTCotMaxRayAngleFromLight;
	 float  SMRTTexelDitherScale;
	 float  SMRTExtrapolateSlope;
	 float  SMRTMaxSlopeBias;
	 uint  SMRTAdaptiveRayCount;
} DirectionalLightSMRTSettings;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
} ForwardISR;
struct {
	 float4  SkyLightParameters;
	TextureCube SkyLightCubemap;
	SamplerState SkyLightCubemapSampler;
	TextureCube SkyLightBlendDestinationCubemap;
	SamplerState SkyLightBlendDestinationCubemapSampler;
	TextureCubeArray ReflectionCubemap;
	SamplerState ReflectionCubemapSampler;
	Texture2D PreIntegratedGF;
	SamplerState PreIntegratedGFSampler;
} Reflection;
struct {
	 float4  ReflectionPlane;
	 float4  PlanarReflectionOrigin;
	 float4  PlanarReflectionXAxis;
	 float4  PlanarReflectionYAxis;
	 float3x4  InverseTransposeMirrorMatrix;
	 float3  PlanarReflectionParameters;
	 float2  PlanarReflectionParameters2;
	 float4x4  ProjectionWithExtraFOV[2];
	 float4  PlanarReflectionScreenScaleBias[2];
	 float2  PlanarReflectionScreenBound;
	 uint  bIsStereo;
	Texture2D PlanarReflectionTexture;
	SamplerState PlanarReflectionSampler;
} PlanarReflection;
struct {
	 float4  ExponentialFogParameters;
	 float4  ExponentialFogParameters2;
	 float4  ExponentialFogColorParameter;
	 float4  ExponentialFogParameters3;
	 float4  SkyAtmosphereAmbientContributionColorScale;
	 float4  InscatteringLightDirection;
	 float4  DirectionalInscatteringColor;
	 float2  SinCosInscatteringColorCubemapRotation;
	 float3  FogInscatteringTextureParameters;
	 float  ApplyVolumetricFog;
	 float  VolumetricFogStartDistance;
	 float  VolumetricFogNearFadeInDistanceInv;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} Fog;
struct {
	 float4  ExponentialFogParameters;
	 float4  ExponentialFogParameters2;
	 float4  ExponentialFogColorParameter;
	 float4  ExponentialFogParameters3;
	 float4  SkyAtmosphereAmbientContributionColorScale;
	 float4  InscatteringLightDirection;
	 float4  DirectionalInscatteringColor;
	 float2  SinCosInscatteringColorCubemapRotation;
	 float3  FogInscatteringTextureParameters;
	 float  ApplyVolumetricFog;
	 float  VolumetricFogStartDistance;
	 float  VolumetricFogNearFadeInDistanceInv;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} FogISR;
	 uint  UseBasePassSkylight;
} Shared;
struct {
	Texture2D SceneColorTexture;
	Texture2D SceneDepthTexture;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D GBufferETexture;
	Texture2D GBufferFTexture;
	Texture2D GBufferVelocityTexture;
	Texture2D ScreenSpaceAOTexture;
	Texture2D CustomDepthTexture;
	Texture2D<uint2> CustomStencilTexture;
	SamplerState PointClampSampler;
} SceneTextures;
struct {
	 uint  MaxBytesPerPixel;
	 uint  bRoughDiffuse;
	 uint  PeelLayersAboveDepth;
	 uint  bRoughnessTracking;
	 int  FirstSliceStoringStrataSSSData;
	Texture2DArray<uint> MaterialTextureArray;
	Texture2D<uint2> TopLayerTexture;
} Strata;
struct {
	 float4x4  CloudShadowmapTranslatedWorldToLightClipMatrix;
	 float  CloudShadowmapFarDepthKm;
	 float  CloudShadowmapStrength;
	Texture2D<float3> CloudShadowmapTexture;
	SamplerState CloudShadowmapSampler;
} ForwardDirLightCloudShadow;
struct {
	 uint  bOITEnable;
	 uint  OITMethod;
	 uint  MaxSideSamplePerPixel;
	 uint  MaxSamplePerPixel;
	 uint  TransmittanceThreshold;
	RWTexture2D<uint> OutOITSampleCount;
	RWTexture2D<uint> OutOITSampleColor;
	RWTexture2D<uint> OutOITSampleTrans;
	RWTexture2D<float> OutOITSampleDepth;
} OIT;
	 float4  HZBUvFactorAndInvFactor;
	 float4  PrevScreenPositionScaleBias;
	 float2  PrevSceneColorBilinearUVMin;
	 float2  PrevSceneColorBilinearUVMax;
	 float  PrevSceneColorPreExposureInv;
	 int  SSRQuality;
	 float  ApplyVolumetricCloudOnTransparent;
	 float  SoftBlendingDistanceKm;
	Texture3D TranslucencyLightingVolumeAmbientInner;
	Texture3D TranslucencyLightingVolumeAmbientOuter;
	Texture3D TranslucencyLightingVolumeDirectionalInner;
	Texture3D TranslucencyLightingVolumeDirectionalOuter;
	 float  ReprojectionRadiusScale;
	 float  ClipmapWorldExtent;
	 float  ClipmapDistributionBase;
	 float  InvClipmapFadeSize;
	 int2  ProbeAtlasResolutionInProbes;
	 uint  RadianceProbeClipmapResolution;
	 uint  NumRadianceProbeClipmaps;
	 uint  RadianceProbeResolution;
	 uint  FinalProbeResolution;
	 uint  FinalRadianceAtlasMaxMip;
	 uint  CalculateIrradiance;
	 uint  IrradianceProbeResolution;
	 uint  OcclusionProbeResolution;
	 uint  NumProbesToTraceBudget;
	 uint  RadianceCacheStats;
	 float4  RadianceProbeSettings[6];
	 float4  PaddedWorldPositionToRadianceProbeCoordBias[6];
	 float4  PaddedRadianceProbeCoordToWorldPositionBias[6];
	 float2  InvProbeFinalRadianceAtlasResolution;
	 float2  InvProbeFinalIrradianceAtlasResolution;
	 float2  InvProbeDepthAtlasResolution;
	 uint  OverrideCacheOcclusionLighting;
	 uint  ShowBlackRadianceCacheLighting;
	 uint  ProbeAtlasResolutionModuloMask;
	 uint  ProbeAtlasResolutionDivideShift;
	Texture3D<uint> RadianceProbeIndirectionTexture;
	Texture2D<float3> RadianceCacheFinalRadianceAtlas;
	Texture2D<float3> RadianceCacheFinalIrradianceAtlas;
	Texture2D<float2> RadianceCacheProbeOcclusionAtlas;
	Texture2D<float> RadianceCacheDepthAtlas;
	StructuredBuffer<float4> ProbeWorldOffset;
	 uint  Enabled;
	 float  RelativeDepthThreshold;
	 float  SpecularScale;
	 float  Contrast;
	Texture2D Radiance;
	Texture2D Normal;
	Texture2D SceneDepth;
	 float3  TranslucencyGIGridZParams;
	 uint  TranslucencyGIGridPixelSizeShift;
	 int3  TranslucencyGIGridSize;
	Texture3D TranslucencyGIVolume0;
	Texture3D TranslucencyGIVolume1;
	Texture3D TranslucencyGIVolumeHistory0;
	Texture3D TranslucencyGIVolumeHistory1;
	SamplerState TranslucencyGIVolumeSampler;
struct {
	 int3  Dimensions;
	 int3  ModuloMasks;
	Texture2D ScalarTexture;
	Texture2D Vec2Texture;
} BlueNoise;
	Texture2D HZBTexture;
	SamplerState HZBSampler;
	Texture2D PrevSceneColor;
	SamplerState PrevSceneColorSampler;
	Texture2D VolumetricCloudColor;
	SamplerState VolumetricCloudColorSampler;
	Texture2D VolumetricCloudDepth;
	SamplerState VolumetricCloudDepthSampler;
	Texture2D PreIntegratedGFTexture;
	SamplerState PreIntegratedGFSampler;
	StructuredBuffer<float4> EyeAdaptationBuffer;
	Texture2D SceneColorCopyTexture;
	SamplerState SceneColorCopySampler;
} TranslucentBasePass = {{{TranslucentBasePass_Shared_Forward_NumLocalLights,TranslucentBasePass_Shared_Forward_NumReflectionCaptures,TranslucentBasePass_Shared_Forward_HasDirectionalLight,TranslucentBasePass_Shared_Forward_NumGridCells,TranslucentBasePass_Shared_Forward_CulledGridSize,TranslucentBasePass_Shared_Forward_MaxCulledLightsPerCell,TranslucentBasePass_Shared_Forward_LightGridPixelSizeShift,TranslucentBasePass_Shared_Forward_LightGridZParams,TranslucentBasePass_Shared_Forward_DirectionalLightDirection,TranslucentBasePass_Shared_Forward_DirectionalLightSourceRadius,TranslucentBasePass_Shared_Forward_DirectionalLightColor,TranslucentBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity,TranslucentBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask,TranslucentBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD,TranslucentBasePass_Shared_Forward_NumDirectionalLightCascades,TranslucentBasePass_Shared_Forward_DirectionalLightVSM,TranslucentBasePass_Shared_Forward_CascadeEndDepths,TranslucentBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix,TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapMinMax,TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize,TranslucentBasePass_Shared_Forward_DirectionalLightDepthBias,TranslucentBasePass_Shared_Forward_DirectionalLightUseStaticShadowing,TranslucentBasePass_Shared_Forward_SimpleLightsEndIndex,TranslucentBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex,TranslucentBasePass_Shared_Forward_LumenSupportedStartIndex,TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize,TranslucentBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow,TranslucentBasePass_Shared_Forward_DirectLightingShowFlag,{TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_ScreenRayLength,TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayCount,TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay,TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale,TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight,TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale,TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope,TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias,TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount,},TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas,TranslucentBasePass_Shared_Forward_ShadowmapSampler,TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap,TranslucentBasePass_Shared_Forward_StaticShadowmapSampler,TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer,TranslucentBasePass_Shared_Forward_NumCulledLightsGrid,TranslucentBasePass_Shared_Forward_CulledLightDataGrid,},{TranslucentBasePass_Shared_ForwardISR_NumLocalLights,TranslucentBasePass_Shared_ForwardISR_NumReflectionCaptures,TranslucentBasePass_Shared_ForwardISR_HasDirectionalLight,TranslucentBasePass_Shared_ForwardISR_NumGridCells,TranslucentBasePass_Shared_ForwardISR_CulledGridSize,TranslucentBasePass_Shared_ForwardISR_MaxCulledLightsPerCell,TranslucentBasePass_Shared_ForwardISR_LightGridPixelSizeShift,TranslucentBasePass_Shared_ForwardISR_LightGridZParams,TranslucentBasePass_Shared_ForwardISR_DirectionalLightDirection,TranslucentBasePass_Shared_ForwardISR_DirectionalLightSourceRadius,TranslucentBasePass_Shared_ForwardISR_DirectionalLightColor,TranslucentBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity,TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask,TranslucentBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD,TranslucentBasePass_Shared_ForwardISR_NumDirectionalLightCascades,TranslucentBasePass_Shared_ForwardISR_DirectionalLightVSM,TranslucentBasePass_Shared_ForwardISR_CascadeEndDepths,TranslucentBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix,TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax,TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize,TranslucentBasePass_Shared_ForwardISR_DirectionalLightDepthBias,TranslucentBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing,TranslucentBasePass_Shared_ForwardISR_SimpleLightsEndIndex,TranslucentBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex,TranslucentBasePass_Shared_ForwardISR_LumenSupportedStartIndex,TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize,TranslucentBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow,TranslucentBasePass_Shared_ForwardISR_DirectLightingShowFlag,{TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_ScreenRayLength,TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayCount,TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTSamplesPerRay,TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayLengthScale,TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight,TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTTexelDitherScale,TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTExtrapolateSlope,TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTMaxSlopeBias,TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount,},TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas,TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler,TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap,TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler,TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer,TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid,TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid,},{TranslucentBasePass_Shared_Reflection_SkyLightParameters,TranslucentBasePass_Shared_Reflection_SkyLightCubemap,TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler,TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap,TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler,TranslucentBasePass_Shared_Reflection_ReflectionCubemap,TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler,TranslucentBasePass_Shared_Reflection_PreIntegratedGF,TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler,},{TranslucentBasePass_Shared_PlanarReflection_ReflectionPlane,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionOrigin,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionXAxis,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionYAxis,TranslucentBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters2,TranslucentBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound,TranslucentBasePass_Shared_PlanarReflection_bIsStereo,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler,},{TranslucentBasePass_Shared_Fog_ExponentialFogParameters,TranslucentBasePass_Shared_Fog_ExponentialFogParameters2,TranslucentBasePass_Shared_Fog_ExponentialFogColorParameter,TranslucentBasePass_Shared_Fog_ExponentialFogParameters3,TranslucentBasePass_Shared_Fog_SkyAtmosphereAmbientContributionColorScale,TranslucentBasePass_Shared_Fog_InscatteringLightDirection,TranslucentBasePass_Shared_Fog_DirectionalInscatteringColor,TranslucentBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation,TranslucentBasePass_Shared_Fog_FogInscatteringTextureParameters,TranslucentBasePass_Shared_Fog_ApplyVolumetricFog,TranslucentBasePass_Shared_Fog_VolumetricFogStartDistance,TranslucentBasePass_Shared_Fog_VolumetricFogNearFadeInDistanceInv,TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap,TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler,TranslucentBasePass_Shared_Fog_IntegratedLightScattering,TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler,},{TranslucentBasePass_Shared_FogISR_ExponentialFogParameters,TranslucentBasePass_Shared_FogISR_ExponentialFogParameters2,TranslucentBasePass_Shared_FogISR_ExponentialFogColorParameter,TranslucentBasePass_Shared_FogISR_ExponentialFogParameters3,TranslucentBasePass_Shared_FogISR_SkyAtmosphereAmbientContributionColorScale,TranslucentBasePass_Shared_FogISR_InscatteringLightDirection,TranslucentBasePass_Shared_FogISR_DirectionalInscatteringColor,TranslucentBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation,TranslucentBasePass_Shared_FogISR_FogInscatteringTextureParameters,TranslucentBasePass_Shared_FogISR_ApplyVolumetricFog,TranslucentBasePass_Shared_FogISR_VolumetricFogStartDistance,TranslucentBasePass_Shared_FogISR_VolumetricFogNearFadeInDistanceInv,TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap,TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler,TranslucentBasePass_Shared_FogISR_IntegratedLightScattering,TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler,},TranslucentBasePass_Shared_UseBasePassSkylight,},{TranslucentBasePass_SceneTextures_SceneColorTexture,TranslucentBasePass_SceneTextures_SceneDepthTexture,TranslucentBasePass_SceneTextures_GBufferATexture,TranslucentBasePass_SceneTextures_GBufferBTexture,TranslucentBasePass_SceneTextures_GBufferCTexture,TranslucentBasePass_SceneTextures_GBufferDTexture,TranslucentBasePass_SceneTextures_GBufferETexture,TranslucentBasePass_SceneTextures_GBufferFTexture,TranslucentBasePass_SceneTextures_GBufferVelocityTexture,TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture,TranslucentBasePass_SceneTextures_CustomDepthTexture,TranslucentBasePass_SceneTextures_CustomStencilTexture,TranslucentBasePass_SceneTextures_PointClampSampler,},{TranslucentBasePass_Strata_MaxBytesPerPixel,TranslucentBasePass_Strata_bRoughDiffuse,TranslucentBasePass_Strata_PeelLayersAboveDepth,TranslucentBasePass_Strata_bRoughnessTracking,TranslucentBasePass_Strata_FirstSliceStoringStrataSSSData,TranslucentBasePass_Strata_MaterialTextureArray,TranslucentBasePass_Strata_TopLayerTexture,},{TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTranslatedWorldToLightClipMatrix,TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapFarDepthKm,TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapStrength,TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture,TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler,},{TranslucentBasePass_OIT_bOITEnable,TranslucentBasePass_OIT_OITMethod,TranslucentBasePass_OIT_MaxSideSamplePerPixel,TranslucentBasePass_OIT_MaxSamplePerPixel,TranslucentBasePass_OIT_TransmittanceThreshold,TranslucentBasePass_OIT_OutOITSampleCount,TranslucentBasePass_OIT_OutOITSampleColor,TranslucentBasePass_OIT_OutOITSampleTrans,TranslucentBasePass_OIT_OutOITSampleDepth,},TranslucentBasePass_HZBUvFactorAndInvFactor,TranslucentBasePass_PrevScreenPositionScaleBias,TranslucentBasePass_PrevSceneColorBilinearUVMin,TranslucentBasePass_PrevSceneColorBilinearUVMax,TranslucentBasePass_PrevSceneColorPreExposureInv,TranslucentBasePass_SSRQuality,TranslucentBasePass_ApplyVolumetricCloudOnTransparent,TranslucentBasePass_SoftBlendingDistanceKm,TranslucentBasePass_TranslucencyLightingVolumeAmbientInner,TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter,TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner,TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter,TranslucentBasePass_ReprojectionRadiusScale,TranslucentBasePass_ClipmapWorldExtent,TranslucentBasePass_ClipmapDistributionBase,TranslucentBasePass_InvClipmapFadeSize,TranslucentBasePass_ProbeAtlasResolutionInProbes,TranslucentBasePass_RadianceProbeClipmapResolution,TranslucentBasePass_NumRadianceProbeClipmaps,TranslucentBasePass_RadianceProbeResolution,TranslucentBasePass_FinalProbeResolution,TranslucentBasePass_FinalRadianceAtlasMaxMip,TranslucentBasePass_CalculateIrradiance,TranslucentBasePass_IrradianceProbeResolution,TranslucentBasePass_OcclusionProbeResolution,TranslucentBasePass_NumProbesToTraceBudget,TranslucentBasePass_RadianceCacheStats,TranslucentBasePass_RadianceProbeSettings,TranslucentBasePass_PaddedWorldPositionToRadianceProbeCoordBias,TranslucentBasePass_PaddedRadianceProbeCoordToWorldPositionBias,TranslucentBasePass_InvProbeFinalRadianceAtlasResolution,TranslucentBasePass_InvProbeFinalIrradianceAtlasResolution,TranslucentBasePass_InvProbeDepthAtlasResolution,TranslucentBasePass_OverrideCacheOcclusionLighting,TranslucentBasePass_ShowBlackRadianceCacheLighting,TranslucentBasePass_ProbeAtlasResolutionModuloMask,TranslucentBasePass_ProbeAtlasResolutionDivideShift,TranslucentBasePass_RadianceProbeIndirectionTexture,TranslucentBasePass_RadianceCacheFinalRadianceAtlas,TranslucentBasePass_RadianceCacheFinalIrradianceAtlas,TranslucentBasePass_RadianceCacheProbeOcclusionAtlas,TranslucentBasePass_RadianceCacheDepthAtlas,TranslucentBasePass_ProbeWorldOffset,TranslucentBasePass_Enabled,TranslucentBasePass_RelativeDepthThreshold,TranslucentBasePass_SpecularScale,TranslucentBasePass_Contrast,TranslucentBasePass_Radiance,TranslucentBasePass_Normal,TranslucentBasePass_SceneDepth,TranslucentBasePass_TranslucencyGIGridZParams,TranslucentBasePass_TranslucencyGIGridPixelSizeShift,TranslucentBasePass_TranslucencyGIGridSize,TranslucentBasePass_TranslucencyGIVolume0,TranslucentBasePass_TranslucencyGIVolume1,TranslucentBasePass_TranslucencyGIVolumeHistory0,TranslucentBasePass_TranslucencyGIVolumeHistory1,TranslucentBasePass_TranslucencyGIVolumeSampler,{TranslucentBasePass_BlueNoise_Dimensions,TranslucentBasePass_BlueNoise_ModuloMasks,TranslucentBasePass_BlueNoise_ScalarTexture,TranslucentBasePass_BlueNoise_Vec2Texture,},TranslucentBasePass_HZBTexture,TranslucentBasePass_HZBSampler,TranslucentBasePass_PrevSceneColor,TranslucentBasePass_PrevSceneColorSampler,TranslucentBasePass_VolumetricCloudColor,TranslucentBasePass_VolumetricCloudColorSampler,TranslucentBasePass_VolumetricCloudDepth,TranslucentBasePass_VolumetricCloudDepthSampler,TranslucentBasePass_PreIntegratedGFTexture,TranslucentBasePass_PreIntegratedGFSampler,TranslucentBasePass_EyeAdaptationBuffer,TranslucentBasePass_SceneColorCopyTexture,TranslucentBasePass_SceneColorCopySampler,*/

#line  20 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/LightmapResourceCluster.ush"

cbuffer   LightmapResourceCluster 
{
	 uint BindlessResource_LightmapResourceCluster_LightMapTexture ;
	 uint  PrePadding_LightmapResourceCluster_4;
	 uint BindlessResource_LightmapResourceCluster_SkyOcclusionTexture ;
	 uint  PrePadding_LightmapResourceCluster_12;
	 uint BindlessResource_LightmapResourceCluster_AOMaterialMaskTexture ;
	 uint  PrePadding_LightmapResourceCluster_20;
	 uint BindlessResource_LightmapResourceCluster_StaticShadowTexture ;
	 uint  PrePadding_LightmapResourceCluster_28;
	 uint BindlessResource_LightmapResourceCluster_VTLightMapTexture ;
	 uint  PrePadding_LightmapResourceCluster_36;
	 uint BindlessResource_LightmapResourceCluster_VTLightMapTexture_1 ;
	 uint  PrePadding_LightmapResourceCluster_44;
	 uint BindlessResource_LightmapResourceCluster_VTSkyOcclusionTexture ;
	 uint  PrePadding_LightmapResourceCluster_52;
	 uint BindlessResource_LightmapResourceCluster_VTAOMaterialMaskTexture ;
	 uint  PrePadding_LightmapResourceCluster_60;
	 uint BindlessResource_LightmapResourceCluster_VTStaticShadowTexture ;
	 uint  PrePadding_LightmapResourceCluster_68;
	 uint BindlessSampler_LightmapResourceCluster_LightMapSampler ;
	 uint  PrePadding_LightmapResourceCluster_76;
	 uint BindlessSampler_LightmapResourceCluster_LightMapSampler_1 ;
	 uint  PrePadding_LightmapResourceCluster_84;
	 uint BindlessSampler_LightmapResourceCluster_SkyOcclusionSampler ;
	 uint  PrePadding_LightmapResourceCluster_92;
	 uint BindlessSampler_LightmapResourceCluster_AOMaterialMaskSampler ;
	 uint  PrePadding_LightmapResourceCluster_100;
	 uint BindlessSampler_LightmapResourceCluster_StaticShadowTextureSampler ;
	 uint  PrePadding_LightmapResourceCluster_108;
	 uint BindlessResource_LightmapResourceCluster_LightmapVirtualTexturePageTable0 ;
	 uint  PrePadding_LightmapResourceCluster_116;
	 uint BindlessResource_LightmapResourceCluster_LightmapVirtualTexturePageTable1 ;
}
  Texture2D  LightmapResourceCluster_LightMapTexture ;
  Texture2D  LightmapResourceCluster_SkyOcclusionTexture ;
  Texture2D  LightmapResourceCluster_AOMaterialMaskTexture ;
  Texture2D  LightmapResourceCluster_StaticShadowTexture ;
  Texture2D<float4>  LightmapResourceCluster_VTLightMapTexture ;
  Texture2D<float4>  LightmapResourceCluster_VTLightMapTexture_1 ;
  Texture2D<float4>  LightmapResourceCluster_VTSkyOcclusionTexture ;
  Texture2D<float4>  LightmapResourceCluster_VTAOMaterialMaskTexture ;
  Texture2D<float4>  LightmapResourceCluster_VTStaticShadowTexture ;
  SamplerState  LightmapResourceCluster_LightMapSampler ;
  SamplerState  LightmapResourceCluster_LightMapSampler_1 ;
  SamplerState  LightmapResourceCluster_SkyOcclusionSampler ;
  SamplerState  LightmapResourceCluster_AOMaterialMaskSampler ;
  SamplerState  LightmapResourceCluster_StaticShadowTextureSampler ;
  Texture2D<uint4>  LightmapResourceCluster_LightmapVirtualTexturePageTable0 ;
  Texture2D<uint4>  LightmapResourceCluster_LightmapVirtualTexturePageTable1 ;
/*atic const struct
{
	Texture2D LightMapTexture;
	Texture2D SkyOcclusionTexture;
	Texture2D AOMaterialMaskTexture;
	Texture2D StaticShadowTexture;
	Texture2D<float4> VTLightMapTexture;
	Texture2D<float4> VTLightMapTexture_1;
	Texture2D<float4> VTSkyOcclusionTexture;
	Texture2D<float4> VTAOMaterialMaskTexture;
	Texture2D<float4> VTStaticShadowTexture;
	SamplerState LightMapSampler;
	SamplerState LightMapSampler_1;
	SamplerState SkyOcclusionSampler;
	SamplerState AOMaterialMaskSampler;
	SamplerState StaticShadowTextureSampler;
	Texture2D<uint4> LightmapVirtualTexturePageTable0;
	Texture2D<uint4> LightmapVirtualTexturePageTable1;
} LightmapResourceCluster = {LightmapResourceCluster_LightMapTexture,LightmapResourceCluster_SkyOcclusionTexture,LightmapResourceCluster_AOMaterialMaskTexture,LightmapResourceCluster_StaticShadowTexture,LightmapResourceCluster_VTLightMapTexture,LightmapResourceCluster_VTLightMapTexture_1,LightmapResourceCluster_VTSkyOcclusionTexture,LightmapResourceCluster_VTAOMaterialMaskTexture,LightmapResourceCluster_VTStaticShadowTexture,LightmapResourceCluster_LightMapSampler,LightmapResourceCluster_LightMapSampler_1,LightmapResourceCluster_SkyOcclusionSampler,LightmapResourceCluster_AOMaterialMaskSampler,LightmapResourceCluster_StaticShadowTextureSampler,LightmapResourceCluster_LightmapVirtualTexturePageTable0,LightmapResourceCluster_LightmapVirtualTexturePageTable1,*/

#line  21 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"

cbuffer   PrecomputedLightingBuffer 
{
	 float4  PrecomputedLightingBuffer_StaticShadowMapMasks;
	 float4  PrecomputedLightingBuffer_InvUniformPenumbraSizes;
	 float4  PrecomputedLightingBuffer_LightMapCoordinateScaleBias;
	 float4  PrecomputedLightingBuffer_ShadowMapCoordinateScaleBias;
	 min16float4  PrecomputedLightingBuffer_LightMapScale[2];
	 min16float4  PrecomputedLightingBuffer_LightMapAdd[2];
	 uint4  PrecomputedLightingBuffer_LightmapVTPackedPageTableUniform[2];
	 uint4  PrecomputedLightingBuffer_LightmapVTPackedUniform[5];
}
/*atic const struct
{
	 float4  StaticShadowMapMasks;
	 float4  InvUniformPenumbraSizes;
	 float4  LightMapCoordinateScaleBias;
	 float4  ShadowMapCoordinateScaleBias;
	 min16float4  LightMapScale[2];
	 min16float4  LightMapAdd[2];
	 uint4  LightmapVTPackedPageTableUniform[2];
	 uint4  LightmapVTPackedUniform[5];
} PrecomputedLightingBuffer = {PrecomputedLightingBuffer_StaticShadowMapMasks,PrecomputedLightingBuffer_InvUniformPenumbraSizes,PrecomputedLightingBuffer_LightMapCoordinateScaleBias,PrecomputedLightingBuffer_ShadowMapCoordinateScaleBias,PrecomputedLightingBuffer_LightMapScale,PrecomputedLightingBuffer_LightMapAdd,PrecomputedLightingBuffer_LightmapVTPackedPageTableUniform,PrecomputedLightingBuffer_LightmapVTPackedUniform,*/

#line  22 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/IndirectLightingCache.ush"

cbuffer   IndirectLightingCache 
{
	 float3  IndirectLightingCache_IndirectLightingCachePrimitiveAdd;
	 float  PrePadding_IndirectLightingCache_12;
	 float3  IndirectLightingCache_IndirectLightingCachePrimitiveScale;
	 float  PrePadding_IndirectLightingCache_28;
	 float3  IndirectLightingCache_IndirectLightingCacheMinUV;
	 float  PrePadding_IndirectLightingCache_44;
	 float3  IndirectLightingCache_IndirectLightingCacheMaxUV;
	 float  PrePadding_IndirectLightingCache_60;
	 float4  IndirectLightingCache_PointSkyBentNormal;
	 min16float  IndirectLightingCache_DirectionalLightShadowing;
	 min16float  PrePadding_IndirectLightingCache_84;
	 min16float  PrePadding_IndirectLightingCache_88;
	 min16float  PrePadding_IndirectLightingCache_92;
	 float4  IndirectLightingCache_IndirectLightingSHCoefficients0[3];
	 float4  IndirectLightingCache_IndirectLightingSHCoefficients1[3];
	 float4  IndirectLightingCache_IndirectLightingSHCoefficients2;
	 min16float4  IndirectLightingCache_IndirectLightingSHSingleCoefficient;
	 uint BindlessResource_IndirectLightingCache_IndirectLightingCacheTexture0 ;
	 uint  PrePadding_IndirectLightingCache_228;
	 uint BindlessResource_IndirectLightingCache_IndirectLightingCacheTexture1 ;
	 uint  PrePadding_IndirectLightingCache_236;
	 uint BindlessResource_IndirectLightingCache_IndirectLightingCacheTexture2 ;
	 uint  PrePadding_IndirectLightingCache_244;
	 uint BindlessSampler_IndirectLightingCache_IndirectLightingCacheTextureSampler0 ;
	 uint  PrePadding_IndirectLightingCache_252;
	 uint BindlessSampler_IndirectLightingCache_IndirectLightingCacheTextureSampler1 ;
	 uint  PrePadding_IndirectLightingCache_260;
	 uint BindlessSampler_IndirectLightingCache_IndirectLightingCacheTextureSampler2 ;
}
  Texture3D  IndirectLightingCache_IndirectLightingCacheTexture0 ;
  Texture3D  IndirectLightingCache_IndirectLightingCacheTexture1 ;
  Texture3D  IndirectLightingCache_IndirectLightingCacheTexture2 ;
  SamplerState  IndirectLightingCache_IndirectLightingCacheTextureSampler0 ;
  SamplerState  IndirectLightingCache_IndirectLightingCacheTextureSampler1 ;
  SamplerState  IndirectLightingCache_IndirectLightingCacheTextureSampler2 ;
/*atic const struct
{
	 float3  IndirectLightingCachePrimitiveAdd;
	 float3  IndirectLightingCachePrimitiveScale;
	 float3  IndirectLightingCacheMinUV;
	 float3  IndirectLightingCacheMaxUV;
	 float4  PointSkyBentNormal;
	 min16float  DirectionalLightShadowing;
	 float4  IndirectLightingSHCoefficients0[3];
	 float4  IndirectLightingSHCoefficients1[3];
	 float4  IndirectLightingSHCoefficients2;
	 min16float4  IndirectLightingSHSingleCoefficient;
	Texture3D IndirectLightingCacheTexture0;
	Texture3D IndirectLightingCacheTexture1;
	Texture3D IndirectLightingCacheTexture2;
	SamplerState IndirectLightingCacheTextureSampler0;
	SamplerState IndirectLightingCacheTextureSampler1;
	SamplerState IndirectLightingCacheTextureSampler2;
} IndirectLightingCache = {IndirectLightingCache_IndirectLightingCachePrimitiveAdd,IndirectLightingCache_IndirectLightingCachePrimitiveScale,IndirectLightingCache_IndirectLightingCacheMinUV,IndirectLightingCache_IndirectLightingCacheMaxUV,IndirectLightingCache_PointSkyBentNormal,IndirectLightingCache_DirectionalLightShadowing,IndirectLightingCache_IndirectLightingSHCoefficients0,IndirectLightingCache_IndirectLightingSHCoefficients1,IndirectLightingCache_IndirectLightingSHCoefficients2,IndirectLightingCache_IndirectLightingSHSingleCoefficient,IndirectLightingCache_IndirectLightingCacheTexture0,IndirectLightingCache_IndirectLightingCacheTexture1,IndirectLightingCache_IndirectLightingCacheTexture2,IndirectLightingCache_IndirectLightingCacheTextureSampler0,IndirectLightingCache_IndirectLightingCacheTextureSampler1,IndirectLightingCache_IndirectLightingCacheTextureSampler2,*/

#line  23 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/MobileDirectionalLight.ush"

cbuffer   MobileDirectionalLight 
{
	 min16float4  MobileDirectionalLight_DirectionalLightColor;
	 min16float4  MobileDirectionalLight_DirectionalLightDirectionAndShadowTransition;
	 min16float4  MobileDirectionalLight_DirectionalLightShadowSize;
	 min16float4  MobileDirectionalLight_DirectionalLightDistanceFadeMADAndSpecularScale;
	 min16float4  MobileDirectionalLight_DirectionalLightShadowDistances;
	 float4x4  MobileDirectionalLight_DirectionalLightScreenToShadow[4];
	 uint  MobileDirectionalLight_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_MobileDirectionalLight_340;
	 uint BindlessResource_MobileDirectionalLight_DirectionalLightShadowTexture ;
	 uint  PrePadding_MobileDirectionalLight_348;
	 uint BindlessSampler_MobileDirectionalLight_DirectionalLightShadowSampler ;
}
  Texture2D  MobileDirectionalLight_DirectionalLightShadowTexture ;
  SamplerState  MobileDirectionalLight_DirectionalLightShadowSampler ;
/*atic const struct
{
	 min16float4  DirectionalLightColor;
	 min16float4  DirectionalLightDirectionAndShadowTransition;
	 min16float4  DirectionalLightShadowSize;
	 min16float4  DirectionalLightDistanceFadeMADAndSpecularScale;
	 min16float4  DirectionalLightShadowDistances;
	 float4x4  DirectionalLightScreenToShadow[4];
	 uint  DirectionalLightShadowMapChannelMask;
	Texture2D DirectionalLightShadowTexture;
	SamplerState DirectionalLightShadowSampler;
} MobileDirectionalLight = {MobileDirectionalLight_DirectionalLightColor,MobileDirectionalLight_DirectionalLightDirectionAndShadowTransition,MobileDirectionalLight_DirectionalLightShadowSize,MobileDirectionalLight_DirectionalLightDistanceFadeMADAndSpecularScale,MobileDirectionalLight_DirectionalLightShadowDistances,MobileDirectionalLight_DirectionalLightScreenToShadow,MobileDirectionalLight_DirectionalLightShadowMapChannelMask,MobileDirectionalLight_DirectionalLightShadowTexture,MobileDirectionalLight_DirectionalLightShadowSampler,*/

#line  24 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/PlanarReflectionStruct.ush"

cbuffer   PlanarReflectionStruct 
{
	 float4  PlanarReflectionStruct_ReflectionPlane;
	 float4  PlanarReflectionStruct_PlanarReflectionOrigin;
	 float4  PlanarReflectionStruct_PlanarReflectionXAxis;
	 float4  PlanarReflectionStruct_PlanarReflectionYAxis;
	 float3x4  PlanarReflectionStruct_InverseTransposeMirrorMatrix;
	 float3  PlanarReflectionStruct_PlanarReflectionParameters;
	 float  PrePadding_PlanarReflectionStruct_124;
	 float2  PlanarReflectionStruct_PlanarReflectionParameters2;
	 float  PrePadding_PlanarReflectionStruct_136;
	 float  PrePadding_PlanarReflectionStruct_140;
	 float4x4  PlanarReflectionStruct_ProjectionWithExtraFOV[2];
	 float4  PlanarReflectionStruct_PlanarReflectionScreenScaleBias[2];
	 float2  PlanarReflectionStruct_PlanarReflectionScreenBound;
	 uint  PlanarReflectionStruct_bIsStereo;
	 uint  PrePadding_PlanarReflectionStruct_316;
	 uint BindlessResource_PlanarReflectionStruct_PlanarReflectionTexture ;
	 uint  PrePadding_PlanarReflectionStruct_324;
	 uint BindlessSampler_PlanarReflectionStruct_PlanarReflectionSampler ;
}
  Texture2D  PlanarReflectionStruct_PlanarReflectionTexture ;
  SamplerState  PlanarReflectionStruct_PlanarReflectionSampler ;
/*atic const struct
{
	 float4  ReflectionPlane;
	 float4  PlanarReflectionOrigin;
	 float4  PlanarReflectionXAxis;
	 float4  PlanarReflectionYAxis;
	 float3x4  InverseTransposeMirrorMatrix;
	 float3  PlanarReflectionParameters;
	 float2  PlanarReflectionParameters2;
	 float4x4  ProjectionWithExtraFOV[2];
	 float4  PlanarReflectionScreenScaleBias[2];
	 float2  PlanarReflectionScreenBound;
	 uint  bIsStereo;
	Texture2D PlanarReflectionTexture;
	SamplerState PlanarReflectionSampler;
} PlanarReflectionStruct = {PlanarReflectionStruct_ReflectionPlane,PlanarReflectionStruct_PlanarReflectionOrigin,PlanarReflectionStruct_PlanarReflectionXAxis,PlanarReflectionStruct_PlanarReflectionYAxis,PlanarReflectionStruct_InverseTransposeMirrorMatrix,PlanarReflectionStruct_PlanarReflectionParameters,PlanarReflectionStruct_PlanarReflectionParameters2,PlanarReflectionStruct_ProjectionWithExtraFOV,PlanarReflectionStruct_PlanarReflectionScreenScaleBias,PlanarReflectionStruct_PlanarReflectionScreenBound,PlanarReflectionStruct_bIsStereo,PlanarReflectionStruct_PlanarReflectionTexture,PlanarReflectionStruct_PlanarReflectionSampler,*/

#line  25 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/ForwardLightData.ush"

cbuffer   ForwardLightData 
{
	 uint  ForwardLightData_NumLocalLights;
	 uint  ForwardLightData_NumReflectionCaptures;
	 uint  ForwardLightData_HasDirectionalLight;
	 uint  ForwardLightData_NumGridCells;
	 int3  ForwardLightData_CulledGridSize;
	 uint  ForwardLightData_MaxCulledLightsPerCell;
	 uint  ForwardLightData_LightGridPixelSizeShift;
	 uint  PrePadding_ForwardLightData_36;
	 uint  PrePadding_ForwardLightData_40;
	 uint  PrePadding_ForwardLightData_44;
	 float3  ForwardLightData_LightGridZParams;
	 float  PrePadding_ForwardLightData_60;
	 float3  ForwardLightData_DirectionalLightDirection;
	 float  ForwardLightData_DirectionalLightSourceRadius;
	 float3  ForwardLightData_DirectionalLightColor;
	 float  ForwardLightData_DirectionalLightVolumetricScatteringIntensity;
	 uint  ForwardLightData_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_ForwardLightData_100;
	 float2  ForwardLightData_DirectionalLightDistanceFadeMAD;
	 uint  ForwardLightData_NumDirectionalLightCascades;
	 int  ForwardLightData_DirectionalLightVSM;
	 int  PrePadding_ForwardLightData_120;
	 int  PrePadding_ForwardLightData_124;
	 float4  ForwardLightData_CascadeEndDepths;
	 float4x4  ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  ForwardLightData_DirectionalLightShadowmapMinMax[4];
	 float4  ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;
	 float  ForwardLightData_DirectionalLightDepthBias;
	 uint  ForwardLightData_DirectionalLightUseStaticShadowing;
	 uint  ForwardLightData_SimpleLightsEndIndex;
	 uint  ForwardLightData_ClusteredDeferredSupportedEndIndex;
	 uint  ForwardLightData_LumenSupportedStartIndex;
	 uint  PrePadding_ForwardLightData_500;
	 uint  PrePadding_ForwardLightData_504;
	 uint  PrePadding_ForwardLightData_508;
	 float4  ForwardLightData_DirectionalLightStaticShadowBufferSize;
	 float4x4  ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  ForwardLightData_DirectLightingShowFlag;
	 float  PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;
	 float  PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;
	 float  PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;
	 float  ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_ForwardLightData_644;
	 uint  PrePadding_ForwardLightData_648;
	 uint  PrePadding_ForwardLightData_652;
	 uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_ForwardLightData_660;
	 uint BindlessSampler_ForwardLightData_ShadowmapSampler ;
	 uint  PrePadding_ForwardLightData_668;
	 uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_ForwardLightData_676;
	 uint BindlessSampler_ForwardLightData_StaticShadowmapSampler ;
	 uint  PrePadding_ForwardLightData_684;
	 uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer ;
	 uint  PrePadding_ForwardLightData_692;
	 uint BindlessResource_ForwardLightData_NumCulledLightsGrid ;
	 uint  PrePadding_ForwardLightData_700;
	 uint BindlessResource_ForwardLightData_CulledLightDataGrid ;
}
  Texture2D  ForwardLightData_DirectionalLightShadowmapAtlas ;
  SamplerState  ForwardLightData_ShadowmapSampler ;
  Texture2D  ForwardLightData_DirectionalLightStaticShadowmap ;
  SamplerState  ForwardLightData_StaticShadowmapSampler ;
  Buffer<float4>  ForwardLightData_ForwardLocalLightBuffer ;
  Buffer<uint>  ForwardLightData_NumCulledLightsGrid ;
  Buffer<uint>  ForwardLightData_CulledLightDataGrid ;
/*atic const struct
{
	 uint  NumLocalLights;
	 uint  NumReflectionCaptures;
	 uint  HasDirectionalLight;
	 uint  NumGridCells;
	 int3  CulledGridSize;
	 uint  MaxCulledLightsPerCell;
	 uint  LightGridPixelSizeShift;
	 float3  LightGridZParams;
	 float3  DirectionalLightDirection;
	 float  DirectionalLightSourceRadius;
	 float3  DirectionalLightColor;
	 float  DirectionalLightVolumetricScatteringIntensity;
	 uint  DirectionalLightShadowMapChannelMask;
	 float2  DirectionalLightDistanceFadeMAD;
	 uint  NumDirectionalLightCascades;
	 int  DirectionalLightVSM;
	 float4  CascadeEndDepths;
	 float4x4  DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  DirectionalLightShadowmapMinMax[4];
	 float4  DirectionalLightShadowmapAtlasBufferSize;
	 float  DirectionalLightDepthBias;
	 uint  DirectionalLightUseStaticShadowing;
	 uint  SimpleLightsEndIndex;
	 uint  ClusteredDeferredSupportedEndIndex;
	 uint  LumenSupportedStartIndex;
	 float4  DirectionalLightStaticShadowBufferSize;
	 float4x4  DirectionalLightTranslatedWorldToStaticShadow;
	 uint  DirectLightingShowFlag;
struct {
	 float  ScreenRayLength;
	 int  SMRTRayCount;
	 int  SMRTSamplesPerRay;
	 float  SMRTRayLengthScale;
	 float  SMRTCotMaxRayAngleFromLight;
	 float  SMRTTexelDitherScale;
	 float  SMRTExtrapolateSlope;
	 float  SMRTMaxSlopeBias;
	 uint  SMRTAdaptiveRayCount;
} DirectionalLightSMRTSettings;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
} ForwardLightData = {ForwardLightData_NumLocalLights,ForwardLightData_NumReflectionCaptures,ForwardLightData_HasDirectionalLight,ForwardLightData_NumGridCells,ForwardLightData_CulledGridSize,ForwardLightData_MaxCulledLightsPerCell,ForwardLightData_LightGridPixelSizeShift,ForwardLightData_LightGridZParams,ForwardLightData_DirectionalLightDirection,ForwardLightData_DirectionalLightSourceRadius,ForwardLightData_DirectionalLightColor,ForwardLightData_DirectionalLightVolumetricScatteringIntensity,ForwardLightData_DirectionalLightShadowMapChannelMask,ForwardLightData_DirectionalLightDistanceFadeMAD,ForwardLightData_NumDirectionalLightCascades,ForwardLightData_DirectionalLightVSM,ForwardLightData_CascadeEndDepths,ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix,ForwardLightData_DirectionalLightShadowmapMinMax,ForwardLightData_DirectionalLightShadowmapAtlasBufferSize,ForwardLightData_DirectionalLightDepthBias,ForwardLightData_DirectionalLightUseStaticShadowing,ForwardLightData_SimpleLightsEndIndex,ForwardLightData_ClusteredDeferredSupportedEndIndex,ForwardLightData_LumenSupportedStartIndex,ForwardLightData_DirectionalLightStaticShadowBufferSize,ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow,ForwardLightData_DirectLightingShowFlag,{ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength,ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount,ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay,ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale,ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight,ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale,ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope,ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias,ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount,},ForwardLightData_DirectionalLightShadowmapAtlas,ForwardLightData_ShadowmapSampler,ForwardLightData_DirectionalLightStaticShadowmap,ForwardLightData_StaticShadowmapSampler,ForwardLightData_ForwardLocalLightBuffer,ForwardLightData_NumCulledLightsGrid,ForwardLightData_CulledLightDataGrid,*/

#line  26 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/ReflectionStruct.ush"

cbuffer   ReflectionStruct 
{
	 float4  ReflectionStruct_SkyLightParameters;
	 uint BindlessResource_ReflectionStruct_SkyLightCubemap ;
	 uint  PrePadding_ReflectionStruct_20;
	 uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler ;
	 uint  PrePadding_ReflectionStruct_28;
	 uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap ;
	 uint  PrePadding_ReflectionStruct_36;
	 uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler ;
	 uint  PrePadding_ReflectionStruct_44;
	 uint BindlessResource_ReflectionStruct_ReflectionCubemap ;
	 uint  PrePadding_ReflectionStruct_52;
	 uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler ;
	 uint  PrePadding_ReflectionStruct_60;
	 uint BindlessResource_ReflectionStruct_PreIntegratedGF ;
	 uint  PrePadding_ReflectionStruct_68;
	 uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler ;
}
  TextureCube  ReflectionStruct_SkyLightCubemap ;
  SamplerState  ReflectionStruct_SkyLightCubemapSampler ;
  TextureCube  ReflectionStruct_SkyLightBlendDestinationCubemap ;
  SamplerState  ReflectionStruct_SkyLightBlendDestinationCubemapSampler ;
  TextureCubeArray  ReflectionStruct_ReflectionCubemap ;
  SamplerState  ReflectionStruct_ReflectionCubemapSampler ;
  Texture2D  ReflectionStruct_PreIntegratedGF ;
  SamplerState  ReflectionStruct_PreIntegratedGFSampler ;
/*atic const struct
{
	 float4  SkyLightParameters;
	TextureCube SkyLightCubemap;
	SamplerState SkyLightCubemapSampler;
	TextureCube SkyLightBlendDestinationCubemap;
	SamplerState SkyLightBlendDestinationCubemapSampler;
	TextureCubeArray ReflectionCubemap;
	SamplerState ReflectionCubemapSampler;
	Texture2D PreIntegratedGF;
	SamplerState PreIntegratedGFSampler;
} ReflectionStruct = {ReflectionStruct_SkyLightParameters,ReflectionStruct_SkyLightCubemap,ReflectionStruct_SkyLightCubemapSampler,ReflectionStruct_SkyLightBlendDestinationCubemap,ReflectionStruct_SkyLightBlendDestinationCubemapSampler,ReflectionStruct_ReflectionCubemap,ReflectionStruct_ReflectionCubemapSampler,ReflectionStruct_PreIntegratedGF,ReflectionStruct_PreIntegratedGFSampler,*/

#line  27 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/ReflectionCaptureES31.ush"

cbuffer   ReflectionCaptureES31 
{
	 float4  ReflectionCaptureES31_PositionAndRadius[100];
	 float4  ReflectionCaptureES31_TilePosition[100];
	 float4  ReflectionCaptureES31_CaptureProperties[100];
	 float4  ReflectionCaptureES31_CaptureOffsetAndAverageBrightness[100];
	 float4x4  ReflectionCaptureES31_BoxTransform[100];
	 float4  ReflectionCaptureES31_BoxScales[100];
}
/*atic const struct
{
	 float4  PositionAndRadius[100];
	 float4  TilePosition[100];
	 float4  CaptureProperties[100];
	 float4  CaptureOffsetAndAverageBrightness[100];
	 float4x4  BoxTransform[100];
	 float4  BoxScales[100];
} ReflectionCaptureES31 = {ReflectionCaptureES31_PositionAndRadius,ReflectionCaptureES31_TilePosition,ReflectionCaptureES31_CaptureProperties,ReflectionCaptureES31_CaptureOffsetAndAverageBrightness,ReflectionCaptureES31_BoxTransform,ReflectionCaptureES31_BoxScales,*/

#line  28 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/ReflectionCaptureSM5.ush"

cbuffer   ReflectionCaptureSM5 
{
	 float4  ReflectionCaptureSM5_PositionAndRadius[341];
	 float4  ReflectionCaptureSM5_TilePosition[341];
	 float4  ReflectionCaptureSM5_CaptureProperties[341];
	 float4  ReflectionCaptureSM5_CaptureOffsetAndAverageBrightness[341];
	 float4x4  ReflectionCaptureSM5_BoxTransform[341];
	 float4  ReflectionCaptureSM5_BoxScales[341];
}
/*atic const struct
{
	 float4  PositionAndRadius[341];
	 float4  TilePosition[341];
	 float4  CaptureProperties[341];
	 float4  CaptureOffsetAndAverageBrightness[341];
	 float4x4  BoxTransform[341];
	 float4  BoxScales[341];
} ReflectionCaptureSM5 = {ReflectionCaptureSM5_PositionAndRadius,ReflectionCaptureSM5_TilePosition,ReflectionCaptureSM5_CaptureProperties,ReflectionCaptureSM5_CaptureOffsetAndAverageBrightness,ReflectionCaptureSM5_BoxTransform,ReflectionCaptureSM5_BoxScales,*/

#line  29 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/VirtualShadowMap.ush"

cbuffer   VirtualShadowMap 
{
	 uint  VirtualShadowMap_NumFullShadowMaps;
	 uint  VirtualShadowMap_NumSinglePageShadowMaps;
	 uint  VirtualShadowMap_MaxPhysicalPages;
	 uint  VirtualShadowMap_NumShadowMapSlots;
	 uint  VirtualShadowMap_StaticCachedArrayIndex;
	 uint  VirtualShadowMap_PhysicalPageRowMask;
	 uint  VirtualShadowMap_PhysicalPageRowShift;
	 uint  VirtualShadowMap_PackedShadowMaskMaxLightCount;
	 float4  VirtualShadowMap_RecPhysicalPoolSize;
	 int2  VirtualShadowMap_PhysicalPoolSize;
	 int2  VirtualShadowMap_PhysicalPoolSizePages;
	 uint  VirtualShadowMap_bExcludeNonNaniteFromCoarsePages;
	 float  VirtualShadowMap_CoarsePagePixelThresholdDynamic;
	 float  VirtualShadowMap_CoarsePagePixelThresholdStatic;
	 float  VirtualShadowMap_CoarsePagePixelThresholdDynamicNanite;
	 uint BindlessResource_VirtualShadowMap_ProjectionData ;
	 uint  PrePadding_VirtualShadowMap_84;
	 uint BindlessResource_VirtualShadowMap_PageTable ;
	 uint  PrePadding_VirtualShadowMap_92;
	 uint BindlessResource_VirtualShadowMap_PageFlags ;
	 uint  PrePadding_VirtualShadowMap_100;
	 uint BindlessResource_VirtualShadowMap_PageRectBounds ;
	 uint  PrePadding_VirtualShadowMap_108;
	 uint BindlessResource_VirtualShadowMap_PhysicalPagePool ;
}
  ByteAddressBuffer  VirtualShadowMap_ProjectionData ;
  StructuredBuffer<uint>  VirtualShadowMap_PageTable ;
  StructuredBuffer<uint>  VirtualShadowMap_PageFlags ;
  StructuredBuffer<uint4>  VirtualShadowMap_PageRectBounds ;
  Texture2DArray<uint>  VirtualShadowMap_PhysicalPagePool ;
/*atic const struct
{
	 uint  NumFullShadowMaps;
	 uint  NumSinglePageShadowMaps;
	 uint  MaxPhysicalPages;
	 uint  NumShadowMapSlots;
	 uint  StaticCachedArrayIndex;
	 uint  PhysicalPageRowMask;
	 uint  PhysicalPageRowShift;
	 uint  PackedShadowMaskMaxLightCount;
	 float4  RecPhysicalPoolSize;
	 int2  PhysicalPoolSize;
	 int2  PhysicalPoolSizePages;
	 uint  bExcludeNonNaniteFromCoarsePages;
	 float  CoarsePagePixelThresholdDynamic;
	 float  CoarsePagePixelThresholdStatic;
	 float  CoarsePagePixelThresholdDynamicNanite;
	ByteAddressBuffer ProjectionData;
	StructuredBuffer<uint> PageTable;
	StructuredBuffer<uint> PageFlags;
	StructuredBuffer<uint4> PageRectBounds;
	Texture2DArray<uint> PhysicalPagePool;
} VirtualShadowMap = {VirtualShadowMap_NumFullShadowMaps,VirtualShadowMap_NumSinglePageShadowMaps,VirtualShadowMap_MaxPhysicalPages,VirtualShadowMap_NumShadowMapSlots,VirtualShadowMap_StaticCachedArrayIndex,VirtualShadowMap_PhysicalPageRowMask,VirtualShadowMap_PhysicalPageRowShift,VirtualShadowMap_PackedShadowMaskMaxLightCount,VirtualShadowMap_RecPhysicalPoolSize,VirtualShadowMap_PhysicalPoolSize,VirtualShadowMap_PhysicalPoolSizePages,VirtualShadowMap_bExcludeNonNaniteFromCoarsePages,VirtualShadowMap_CoarsePagePixelThresholdDynamic,VirtualShadowMap_CoarsePagePixelThresholdStatic,VirtualShadowMap_CoarsePagePixelThresholdDynamicNanite,VirtualShadowMap_ProjectionData,VirtualShadowMap_PageTable,VirtualShadowMap_PageFlags,VirtualShadowMap_PageRectBounds,VirtualShadowMap_PhysicalPagePool,*/

#line  30 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/DeferredLightUniforms.ush"

cbuffer   DeferredLightUniforms 
{
	 float4  DeferredLightUniforms_ShadowMapChannelMask;
	 float2  DeferredLightUniforms_DistanceFadeMAD;
	 float  DeferredLightUniforms_ContactShadowLength;
	 float  DeferredLightUniforms_ContactShadowCastingIntensity;
	 float  DeferredLightUniforms_ContactShadowNonCastingIntensity;
	 float  DeferredLightUniforms_VolumetricScatteringIntensity;
	 uint  DeferredLightUniforms_ShadowedBits;
	 uint  DeferredLightUniforms_LightingChannelMask;
	 float3  DeferredLightUniforms_TranslatedWorldPosition;
	 float  DeferredLightUniforms_InvRadius;
	 float3  DeferredLightUniforms_Color;
	 float  DeferredLightUniforms_FalloffExponent;
	 float3  DeferredLightUniforms_Direction;
	 float  DeferredLightUniforms_SpecularScale;
	 float3  DeferredLightUniforms_Tangent;
	 float  DeferredLightUniforms_SourceRadius;
	 float2  DeferredLightUniforms_SpotAngles;
	 float  DeferredLightUniforms_SoftSourceRadius;
	 float  DeferredLightUniforms_SourceLength;
	 float  DeferredLightUniforms_RectLightBarnCosAngle;
	 float  DeferredLightUniforms_RectLightBarnLength;
	 float2  DeferredLightUniforms_RectLightAtlasUVOffset;
	 float2  DeferredLightUniforms_RectLightAtlasUVScale;
	 float  DeferredLightUniforms_RectLightAtlasMaxLevel;
	 float  DeferredLightUniforms_IESAtlasIndex;
}
/*atic const struct
{
	 float4  ShadowMapChannelMask;
	 float2  DistanceFadeMAD;
	 float  ContactShadowLength;
	 float  ContactShadowCastingIntensity;
	 float  ContactShadowNonCastingIntensity;
	 float  VolumetricScatteringIntensity;
	 uint  ShadowedBits;
	 uint  LightingChannelMask;
	 float3  TranslatedWorldPosition;
	 float  InvRadius;
	 float3  Color;
	 float  FalloffExponent;
	 float3  Direction;
	 float  SpecularScale;
	 float3  Tangent;
	 float  SourceRadius;
	 float2  SpotAngles;
	 float  SoftSourceRadius;
	 float  SourceLength;
	 float  RectLightBarnCosAngle;
	 float  RectLightBarnLength;
	 float2  RectLightAtlasUVOffset;
	 float2  RectLightAtlasUVScale;
	 float  RectLightAtlasMaxLevel;
	 float  IESAtlasIndex;
} DeferredLightUniforms = {DeferredLightUniforms_ShadowMapChannelMask,DeferredLightUniforms_DistanceFadeMAD,DeferredLightUniforms_ContactShadowLength,DeferredLightUniforms_ContactShadowCastingIntensity,DeferredLightUniforms_ContactShadowNonCastingIntensity,DeferredLightUniforms_VolumetricScatteringIntensity,DeferredLightUniforms_ShadowedBits,DeferredLightUniforms_LightingChannelMask,DeferredLightUniforms_TranslatedWorldPosition,DeferredLightUniforms_InvRadius,DeferredLightUniforms_Color,DeferredLightUniforms_FalloffExponent,DeferredLightUniforms_Direction,DeferredLightUniforms_SpecularScale,DeferredLightUniforms_Tangent,DeferredLightUniforms_SourceRadius,DeferredLightUniforms_SpotAngles,DeferredLightUniforms_SoftSourceRadius,DeferredLightUniforms_SourceLength,DeferredLightUniforms_RectLightBarnCosAngle,DeferredLightUniforms_RectLightBarnLength,DeferredLightUniforms_RectLightAtlasUVOffset,DeferredLightUniforms_RectLightAtlasUVScale,DeferredLightUniforms_RectLightAtlasMaxLevel,DeferredLightUniforms_IESAtlasIndex,*/

#line  31 "/Engine/Generated/GeneratedUniformBuffers.ush"








#line   2 "/Engine/Generated/UniformBuffers/LocalVFLooseParameters.ush"

cbuffer   LocalVFLooseParameters 
{
	 uint  LocalVFLooseParameters_FrameNumber;
	 uint  PrePadding_LocalVFLooseParameters_4;
	 uint BindlessResource_LocalVFLooseParameters_GPUSkinPassThroughPositionBuffer ;
	 uint  PrePadding_LocalVFLooseParameters_12;
	 uint BindlessResource_LocalVFLooseParameters_GPUSkinPassThroughPreviousPositionBuffer ;
}
  Buffer<float>  LocalVFLooseParameters_GPUSkinPassThroughPositionBuffer ;
  Buffer<float>  LocalVFLooseParameters_GPUSkinPassThroughPreviousPositionBuffer ;
/*atic const struct
{
	 uint  FrameNumber;
	Buffer<float> GPUSkinPassThroughPositionBuffer;
	Buffer<float> GPUSkinPassThroughPreviousPositionBuffer;
} LocalVFLooseParameters = {LocalVFLooseParameters_FrameNumber,LocalVFLooseParameters_GPUSkinPassThroughPositionBuffer,LocalVFLooseParameters_GPUSkinPassThroughPreviousPositionBuffer,*/

#line  39 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/LocalVF.ush"

cbuffer   LocalVF 
{
	 int4  LocalVF_VertexFetch_Parameters;
	 int  LocalVF_PreSkinBaseVertexIndex;
	 uint  LocalVF_LODLightmapDataIndex;
	 uint BindlessResource_LocalVF_VertexFetch_TexCoordBuffer ;
	 uint  PrePadding_LocalVF_28;
	 uint BindlessResource_LocalVF_VertexFetch_PositionBuffer ;
	 uint  PrePadding_LocalVF_36;
	 uint BindlessResource_LocalVF_VertexFetch_PreSkinPositionBuffer ;
	 uint  PrePadding_LocalVF_44;
	 uint BindlessResource_LocalVF_VertexFetch_PackedTangentsBuffer ;
	 uint  PrePadding_LocalVF_52;
	 uint BindlessResource_LocalVF_VertexFetch_ColorComponentsBuffer ;
}
  Buffer<float2>  LocalVF_VertexFetch_TexCoordBuffer ;
  Buffer<float>  LocalVF_VertexFetch_PositionBuffer ;
  Buffer<float>  LocalVF_VertexFetch_PreSkinPositionBuffer ;
  Buffer<float4>  LocalVF_VertexFetch_PackedTangentsBuffer ;
  Buffer<float4>  LocalVF_VertexFetch_ColorComponentsBuffer ;
/*atic const struct
{
	 int4  VertexFetch_Parameters;
	 int  PreSkinBaseVertexIndex;
	 uint  LODLightmapDataIndex;
	Buffer<float2> VertexFetch_TexCoordBuffer;
	Buffer<float> VertexFetch_PositionBuffer;
	Buffer<float> VertexFetch_PreSkinPositionBuffer;
	Buffer<float4> VertexFetch_PackedTangentsBuffer;
	Buffer<float4> VertexFetch_ColorComponentsBuffer;
} LocalVF = {LocalVF_VertexFetch_Parameters,LocalVF_PreSkinBaseVertexIndex,LocalVF_LODLightmapDataIndex,LocalVF_VertexFetch_TexCoordBuffer,LocalVF_VertexFetch_PositionBuffer,LocalVF_VertexFetch_PreSkinPositionBuffer,LocalVF_VertexFetch_PackedTangentsBuffer,LocalVF_VertexFetch_ColorComponentsBuffer,*/

#line  40 "/Engine/Generated/GeneratedUniformBuffers.ush"


#line   2 "/Engine/Generated/UniformBuffers/Material.ush"

cbuffer   Material 
{
	 float4  Material_PreshaderBuffer[1];
	 uint BindlessResource_Material_Texture2D_0 ;
	 uint  PrePadding_Material_20;
	 uint BindlessSampler_Material_Texture2D_0Sampler ;
	 uint  PrePadding_Material_28;
	 uint BindlessResource_Material_Texture2D_1 ;
	 uint  PrePadding_Material_36;
	 uint BindlessSampler_Material_Texture2D_1Sampler ;
	 uint  PrePadding_Material_44;
	 uint BindlessSampler_Material_Wrap_WorldGroupSettings ;
	 uint  PrePadding_Material_52;
	 uint BindlessSampler_Material_Clamp_WorldGroupSettings ;
}
  Texture2D  Material_Texture2D_0 ;
  SamplerState  Material_Texture2D_0Sampler ;
  Texture2D  Material_Texture2D_1 ;
  SamplerState  Material_Texture2D_1Sampler ;
  SamplerState  Material_Wrap_WorldGroupSettings ;
  SamplerState  Material_Clamp_WorldGroupSettings ;
/*atic const struct
{
	 float4  PreshaderBuffer[1];
	Texture2D Texture2D_0;
	SamplerState Texture2D_0Sampler;
	Texture2D Texture2D_1;
	SamplerState Texture2D_1Sampler;
	SamplerState Wrap_WorldGroupSettings;
	SamplerState Clamp_WorldGroupSettings;
} Material = {Material_PreshaderBuffer,Material_Texture2D_0,Material_Texture2D_0Sampler,Material_Texture2D_1,Material_Texture2D_1Sampler,Material_Wrap_WorldGroupSettings,Material_Clamp_WorldGroupSettings,*/

#line  42 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line 169 "/Engine/Private/Common.ush"



#line   7 "/Engine/Private/CommonViewUniformBuffer.ush"





float2 GetTanHalfFieldOfView()
{
	return float2(View_ClipToView[0][0], View_ClipToView[1][1]);
}

float2 GetPrevTanHalfFieldOfView()
{
	return float2(View_PrevClipToView[0][0], View_PrevClipToView[1][1]);
}



float2 GetCotanHalfFieldOfView()
{
	return float2(View_ViewToClip[0][0], View_ViewToClip[1][1]);
}



float2 GetPrevCotanHalfFieldOfView()
{
	return float2(View_PrevViewToClip[0][0], View_PrevViewToClip[1][1]);
}


uint GetPowerOfTwoModulatedFrameIndex(uint Pow2Modulus)
{
	
	return View_StateFrameIndex & uint(Pow2Modulus - 1);
}
#line 172 "/Engine/Private/Common.ush"




float FmodFloor(float Lhs, float Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float2 FmodFloor(float2 Lhs, float2 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float3 FmodFloor(float3 Lhs, float3 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float4 FmodFloor(float4 Lhs, float4 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float VectorSum(float V) { return V; }
float VectorSum(float2 V) { return V.x + V.y; }
float VectorSum(float3 V) { return V.x + V.y + V.z; }
float VectorSum(float4 V) { return V.x + V.y + V.z + V.w; }

#line   3 "/Engine/Private/LargeWorldCoordinates.ush"


struct FLWCScalar
{
	float Tile;
	float Offset;
};

struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
};

struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};

struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
};

struct FLWCScalarDeriv
{
	FLWCScalar Value;
	float Ddx;
	float Ddy;
};

struct FLWCVector2Deriv
{
	FLWCVector2 Value;
	float2 Ddx;
	float2 Ddy;
};

struct FLWCVector3Deriv
{
	FLWCVector3 Value;
	float3 Ddx;
	float3 Ddy;
};

struct FLWCVector4Deriv
{
	FLWCVector4 Value;
	float4 Ddx;
	float4 Ddy;
};


struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 
};


struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 
	int Dummy; 
};




float LWCGetTileOffset(FLWCScalar V) { return  (( V ).Tile) * 2097152.00f; }
float2 LWCGetTileOffset(FLWCVector2 V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCVector3 V) { return  (( V ).Tile) * 2097152.00f; }
float4 LWCGetTileOffset(FLWCVector4 V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCMatrix V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  (( V ).Tile) * 2097152.00f; }

float4x4 Make4x3Matrix(float4x4 M)
{
	
	float4x4 Result;
	Result[0] = float4(M[0].xyz, 0.0f);
	Result[1] = float4(M[1].xyz, 0.0f);
	Result[2] = float4(M[2].xyz, 0.0f);
	Result[3] = float4(M[3].xyz, 1.0f);
	return Result;
}

float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}

FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}

FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}

FLWCScalar MakeLWCVector(FLWCScalar X) { return X; }

FLWCVector2 MakeLWCVector(FLWCScalar X, FLWCScalar Y) { return MakeLWCVector2(float2( (( X ).Tile),  (( Y ).Tile)), float2(X.Offset, Y.Offset)); }

FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z) { return MakeLWCVector3(float3( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile)), float3(X.Offset, Y.Offset, Z.Offset)); }
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ) { return MakeLWCVector3(float3( (( X ).Tile),  (( YZ ).Tile)), float3(X.Offset, YZ.Offset)); }
FLWCVector3 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z) { return MakeLWCVector3(float3( (( XY ).Tile),  (( Z ).Tile)), float3(XY.Offset, Z.Offset)); }

FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(X.Offset, Y.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( ZW ).Tile)), float4(X.Offset, Y.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZ ).Tile),  (( W ).Tile)), float4(X.Offset, YZ.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( XY ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(XY.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( XY ).Tile),  (( ZW ).Tile)), float4(XY.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector3 YZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZW ).Tile)), float4(X.Offset, YZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector3 XYZ, FLWCScalar W) { return MakeLWCVector4(float4( (( XYZ ).Tile),  (( W ).Tile)), float4(XYZ.Offset, W.Offset)); }

FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;
	return Result;
}

FLWCMatrix MakeLWCMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}

FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}

FLWCInverseMatrix MakeLWCInverseMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = Make4x3Matrix(InMatrix);
	Result.Dummy = 0;
	return Result;
}



FLWCScalar LWCGetComponent(FLWCScalar V, int C) { return V; }
FLWCScalar LWCGetComponent(FLWCVector2 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector3 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector4 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }






FLWCScalar LWCSwizzle(FLWCScalar V, int C0) { return V; }
FLWCScalar LWCSwizzle(FLWCVector2 V, int C0) { return LWCGetComponent(V, C0); }
FLWCScalar LWCSwizzle(FLWCVector3 V, int C0) { return LWCGetComponent(V, C0); }
FLWCScalar LWCSwizzle(FLWCVector4 V, int C0) { return LWCGetComponent(V, C0); }

FLWCVector2 LWCSwizzle(FLWCScalar V, int C0, int C1) { return MakeLWCVector(V, V); }
FLWCVector2 LWCSwizzle(FLWCVector2 V, int C0, int C1) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1)); }
FLWCVector2 LWCSwizzle(FLWCVector3 V, int C0, int C1) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1)); }
FLWCVector2 LWCSwizzle(FLWCVector4 V, int C0, int C1) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1)); }

FLWCVector3 LWCSwizzle(FLWCScalar V, int C0, int C1, int C2) { return MakeLWCVector(V, V, V); }
FLWCVector3 LWCSwizzle(FLWCVector2 V, int C0, int C1, int C2) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2)); }
FLWCVector3 LWCSwizzle(FLWCVector3 V, int C0, int C1, int C2) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2)); }
FLWCVector3 LWCSwizzle(FLWCVector4 V, int C0, int C1, int C2) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2)); }

FLWCVector4 LWCSwizzle(FLWCScalar V, int C0, int C1, int C2, int C3) { return MakeLWCVector(V, V, V, V); }
FLWCVector4 LWCSwizzle(FLWCVector2 V, int C0, int C1, int C2, int C3) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2), LWCGetComponent(V, C3)); }
FLWCVector4 LWCSwizzle(FLWCVector3 V, int C0, int C1, int C2, int C3) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2), LWCGetComponent(V, C3)); }
FLWCVector4 LWCSwizzle(FLWCVector4 V, int C0, int C1, int C2, int C3) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2), LWCGetComponent(V, C3)); }

float LWCToFloat(FLWCScalar Value)   { return LWCGetTileOffset(Value) + Value.Offset; }
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}

float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}

float3x3 LWCToFloat3x3(FLWCMatrix Value)
{
	return (float3x3)Value.M;
}

float3x3 LWCToFloat3x3(FLWCInverseMatrix Value)
{
	return (float3x3)Value.M;
}


float LWCToFloat(float Value) { return Value; }
float2 LWCToFloat(float2 Value) { return Value; }
float3 LWCToFloat(float3 Value) { return Value; }
float4 LWCToFloat(float4 Value) { return Value; }
float4x4 LWCToFloat(float4x4 Value) { return Value; }


FLWCScalar LWCPromote(FLWCScalar Value) { return Value; }
FLWCVector2 LWCPromote(FLWCVector2 Value) { return Value; }
FLWCVector3 LWCPromote(FLWCVector3 Value) { return Value; }
FLWCVector4 LWCPromote(FLWCVector4 Value) { return Value; }
FLWCMatrix LWCPromote(FLWCMatrix Value) { return Value; }
FLWCInverseMatrix LWCPromote(FLWCInverseMatrix Value) { return Value; }

FLWCScalar LWCPromote(float Value) { return MakeLWCScalar(0, Value); }
FLWCVector2 LWCPromote(float2 Value) { return MakeLWCVector2((float2)0, Value); }
FLWCVector3 LWCPromote(float3 Value) { return MakeLWCVector3((float3)0, Value); }
FLWCVector4 LWCPromote(float4 Value) { return MakeLWCVector4((float4)0, Value); }
FLWCMatrix LWCPromote(float4x4 Value) { return MakeLWCMatrix((float3)0, Value); }
FLWCInverseMatrix LWCPromoteInverse(float4x4 Value) { return MakeLWCInverseMatrix((float3)0, Value); }

FLWCVector3 LWCMultiply(float3 Position, FLWCMatrix InMatrix)
{
	
	float3 Offset = (Position.xxx * InMatrix.M[0].xyz + Position.yyy * InMatrix.M[1].xyz + Position.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
	return MakeLWCVector3( (( InMatrix ).Tile), Offset);
}

FLWCVector4 LWCMultiply(float4 Position, FLWCMatrix InMatrix)
{
	float4 Offset = mul(Position, InMatrix.M);
	return MakeLWCVector4( (( InMatrix ).Tile), Offset);
}

float3 LWCMultiply(FLWCVector3 Position, FLWCInverseMatrix InMatrix)
{
	float3 LocalPosition = LWCToFloat(MakeLWCVector3( (( Position ).Tile) +  (( InMatrix ).Tile), Position.Offset));
	return (LocalPosition.xxx * InMatrix.M[0].xyz + LocalPosition.yyy * InMatrix.M[1].xyz + LocalPosition.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
}

float4 LWCMultiply(FLWCVector4 Position, FLWCInverseMatrix InMatrix)
{
	float4 LocalPosition = LWCToFloat(MakeLWCVector4( (( Position ).Tile) + float4( (( InMatrix ).Tile), 0), Position.Offset));
	return mul(LocalPosition, InMatrix.M);
}

float3 LWCMultiplyVector(float3 Vector, FLWCMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}

float3 LWCMultiplyVector(float3 Vector, FLWCInverseMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}

FLWCMatrix LWCMultiply(float4x4 Lhs, FLWCMatrix Rhs)
{
	float4x4 ResultMatrix = mul(Lhs, Rhs.M);
	return MakeLWCMatrix( (( Rhs ).Tile), ResultMatrix);
}

FLWCInverseMatrix LWCMultiply(FLWCInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 ResultMatrix = mul(Lhs.M, Rhs);
	return MakeLWCInverseMatrix(- (( Lhs ).Tile), ResultMatrix);
}

float4x4 LWCMultiply(FLWCMatrix Lhs, FLWCInverseMatrix Rhs)
{
	
	float4x4 Result = Lhs.M;
	Result = mul(Result, MakeTranslationMatrix(( (( Lhs ).Tile) +  (( Rhs ).Tile)) * 2097152.00f));
	Result = mul(Result, Rhs.M);
	return Result;
}

float4x4 LWCMultiplyTranslation(FLWCMatrix Lhs, FLWCVector3 Rhs)
{
	float4x4 Result = Lhs.M;
	Result[3].xyz += ( (( Lhs ).Tile) +  (( Rhs ).Tile)) * 2097152.00f;
	Result[3].xyz += Rhs.Offset;
	return Result;
}

FLWCMatrix LWCMultiplyTranslation(float4x4 Lhs, FLWCVector3 Rhs)
{
	FLWCMatrix Result = MakeLWCMatrix( (( Rhs ).Tile), Lhs);
	Result.M[3].xyz += Rhs.Offset;
	return Result;
}

float4x4 LWCMultiplyTranslation(FLWCVector3 Lhs, FLWCInverseMatrix Rhs)
{
	float3 Offset = ( (( Lhs ).Tile) +  (( Rhs ).Tile)) * 2097152.00f + Lhs.Offset;
	return mul(MakeTranslationMatrix(Offset), Rhs.M);
}

FLWCInverseMatrix LWCMultiplyTranslation(FLWCVector3 Lhs, float4x4 Rhs)
{
	FLWCInverseMatrix Result = MakeLWCInverseMatrix(- (( Lhs ).Tile), Rhs);
	Result.M = mul(MakeTranslationMatrix(Lhs.Offset), Result.M);
	return Result;
}

FLWCVector3 LWCGetOrigin(FLWCMatrix InMatrix)
{
	return MakeLWCVector3( (( InMatrix ).Tile), InMatrix.M[3].xyz);
}

void LWCSetOrigin(inout FLWCMatrix InOutMatrix, FLWCVector3 Origin)
{
	 ( InOutMatrix ).Tile = (  (( Origin ).Tile) );
	InOutMatrix.M[3].xyz = Origin.Offset;
}





#line   5 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCNormalizeTile(FLWCScalar V)
{
	float IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCScalar(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}


FLWCScalar LWCMakeIntTile(FLWCScalar V)
{
	float IntTile = floor(V.Tile);
	return MakeLWCScalar(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

float LWCSqrtUnscaled(FLWCScalar V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float LWCRsqrtUnscaled(FLWCScalar V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float LWCRcpUnscaled(FLWCScalar V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float LWCSqrtScaled(FLWCScalar V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float LWCRsqrtScaled(FLWCScalar V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float LWCRcpScaled(FLWCScalar V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float LWCSqrt(FLWCScalar V) { return LWCSqrtScaled(V, 1448.15466f); }
float LWCRsqrt(FLWCScalar V) { return LWCRsqrtScaled(V, 0.000690533954f); }
float LWCRcp(FLWCScalar V) { return LWCRcpScaled(V, 4.76837158e-07f); }









  bool  LWCGreater ( FLWCScalar Lhs, FLWCScalar Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool  LWCGreater ( float Lhs, FLWCScalar Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool  LWCGreater ( FLWCScalar Lhs, float Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
  bool  LWCGreaterEqual ( FLWCScalar Lhs, FLWCScalar Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool  LWCGreaterEqual ( float Lhs, FLWCScalar Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool  LWCGreaterEqual ( FLWCScalar Lhs, float Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
  bool  LWCLess ( FLWCScalar Lhs, FLWCScalar Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool  LWCLess ( float Lhs, FLWCScalar Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool  LWCLess ( FLWCScalar Lhs, float Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
  bool  LWCLessEqual ( FLWCScalar Lhs, FLWCScalar Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool  LWCLessEqual ( float Lhs, FLWCScalar Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool  LWCLessEqual ( FLWCScalar Lhs, float Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }








float LWCDdx(FLWCScalar V) { return ddx( (( V ).Tile)) * 2097152.00f + ddx(V.Offset); }
float LWCDdy(FLWCScalar V) { return ddy( (( V ).Tile)) * 2097152.00f + ddy(V.Offset); }


FLWCScalar LWCAdd(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCScalar LWCAdd(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCScalar LWCAdd(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset + Rhs); }

FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }

bool LWCEquals(FLWCScalar Lhs, FLWCScalar Rhs)
{
	return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f == Rhs.Offset - Lhs.Offset;
}
bool LWCEquals(float Lhs, FLWCScalar Rhs)
{
	return - (( Rhs ).Tile) * 2097152.00f == Rhs.Offset - Lhs;
} 
bool LWCEquals(FLWCScalar Lhs, float Rhs)
{
	return  (( Lhs ).Tile) * 2097152.00f == Rhs - Lhs.Offset;
}
bool LWCEqualsApprox(FLWCScalar Lhs, FLWCScalar Rhs, float Threshold)
{
	return abs(( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f + (Lhs.Offset - Rhs.Offset)) < (float)Threshold;
}
bool LWCEqualsApprox(float Lhs, FLWCScalar Rhs, float Threshold)
{
	return abs(- (( Rhs ).Tile) * 2097152.00f + (Lhs - Rhs.Offset)) < (float)Threshold;
}
bool LWCEqualsApprox(FLWCScalar Lhs, float Rhs, float Threshold)
{
	return abs( (( Lhs ).Tile) * 2097152.00f + (Lhs.Offset - Rhs)) < (float)Threshold;
}

FLWCScalar LWCSelect(bool S, FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( select_internal( S ,  (( Lhs ).Tile) ,  (( Rhs ).Tile) ),  select_internal( S , Lhs.Offset , Rhs.Offset )); }
FLWCScalar LWCSelect(bool S, float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( select_internal( S , (float)0 ,  (( Rhs ).Tile) ),  select_internal( S , Lhs , Rhs.Offset )); }
FLWCScalar LWCSelect(bool S, FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( select_internal( S ,  (( Lhs ).Tile) , (float)0 ),  select_internal( S , Lhs.Offset , Rhs )); }

FLWCScalar LWCNegate(FLWCScalar V) { return MakeLWCScalar(- (( V ).Tile), -V.Offset); }

float LWCFrac(FLWCScalar V)
{
	float FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

FLWCScalar LWCFloor(FLWCScalar V) { FLWCScalar VN = LWCMakeIntTile(V); return MakeLWCScalar( (( VN ).Tile), floor(VN.Offset)); }
FLWCScalar LWCCeil(FLWCScalar V) { FLWCScalar VN = LWCMakeIntTile(V); return MakeLWCScalar( (( VN ).Tile), ceil(VN.Offset)); }
FLWCScalar LWCRound(FLWCScalar V) { FLWCScalar VN = LWCMakeIntTile(V); return MakeLWCScalar( (( VN ).Tile), round(VN.Offset)); }
FLWCScalar LWCTrunc(FLWCScalar V) { FLWCScalar VN = LWCMakeIntTile(V); return MakeLWCScalar( (( VN ).Tile), trunc(VN.Offset)); }


float LWCSign(FLWCScalar V) { return float(sign(LWCToFloat(V))); }
float LWCSaturate(FLWCScalar V) { return saturate(LWCToFloat(V)); }
float LWCClampScalar(FLWCScalar V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCScalar LWCMultiply(FLWCScalar Lhs, FLWCScalar Rhs)
{
	return MakeLWCScalar( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCScalar LWCMultiply(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCScalar LWCMultiply(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

FLWCScalar LWCDivide(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCScalar LWCDivide(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCScalar LWCDivide(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar((float)0, Lhs * LWCRcp(Rhs)); }


FLWCScalar LWCLerp(FLWCScalar Lhs, FLWCScalar Rhs, float S)
{
	return MakeLWCScalar(lerp( (( Lhs ).Tile),  (( Rhs ).Tile), S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float LWCFmod(FLWCScalar Lhs, float Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float LWCFmodFloor(FLWCScalar Lhs, float Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float LWCFmodFloorPI(FLWCScalar V)
{
	return LWCFmodFloor(V, PI);
	
}
float LWCFmodFloor2PI(FLWCScalar V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

float LWCSin(FLWCScalar V) { return sin(LWCFmodFloor2PI(V)); }
float LWCCos(FLWCScalar V) { return cos(LWCFmodFloor2PI(V)); }
float LWCTan(FLWCScalar V) { return tan(LWCFmodFloorPI(V)); }
float LWCASin(FLWCScalar V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float LWCACos(FLWCScalar V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float LWCATan(FLWCScalar V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float LWCSmoothStep(FLWCScalar Lhs, FLWCScalar Rhs, FLWCScalar S)
{
	float t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCScalar LWCMin(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar LWCMin(float Lhs, FLWCScalar Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar LWCMin(FLWCScalar Lhs, float Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar LWCMax(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar LWCMax(float Lhs, FLWCScalar Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar LWCMax(FLWCScalar Lhs, float Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCScalar LWCAbs(FLWCScalar V) { return LWCSelect(LWCLess(V, (float)0), LWCNegate(V), V); }

float LWCStep(FLWCScalar Lhs, FLWCScalar Rhs)   { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float)1.0f , (float)0.0f ); }
float LWCStep(FLWCScalar Lhs, float Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float)1.0f , (float)0.0f ); }
float LWCStep(float Lhs, FLWCScalar Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float)1.0f , (float)0.0f ); }


FLWCScalar LWCSquareScaled(FLWCScalar V)
{
	float OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCScalar( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 376 "/Engine/Private/LargeWorldCoordinates.ush"










#line   5 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCNormalizeTile(FLWCVector2 V)
{
	float2 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector2(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}


FLWCVector2 LWCMakeIntTile(FLWCVector2 V)
{
	float2 IntTile = floor(V.Tile);
	return MakeLWCVector2(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

float2 LWCSqrtUnscaled(FLWCVector2 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float2 LWCRsqrtUnscaled(FLWCVector2 V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float2 LWCRcpUnscaled(FLWCVector2 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float2 LWCSqrtScaled(FLWCVector2 V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float2 LWCRsqrtScaled(FLWCVector2 V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float2 LWCRcpScaled(FLWCVector2 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float2 LWCSqrt(FLWCVector2 V) { return LWCSqrtScaled(V, 1448.15466f); }
float2 LWCRsqrt(FLWCVector2 V) { return LWCRsqrtScaled(V, 0.000690533954f); }
float2 LWCRcp(FLWCVector2 V) { return LWCRcpScaled(V, 4.76837158e-07f); }









  bool2  LWCGreater ( FLWCVector2 Lhs, FLWCVector2 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool2  LWCGreater ( float2 Lhs, FLWCVector2 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool2  LWCGreater ( FLWCVector2 Lhs, float2 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
  bool2  LWCGreaterEqual ( FLWCVector2 Lhs, FLWCVector2 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool2  LWCGreaterEqual ( float2 Lhs, FLWCVector2 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool2  LWCGreaterEqual ( FLWCVector2 Lhs, float2 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
  bool2  LWCLess ( FLWCVector2 Lhs, FLWCVector2 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool2  LWCLess ( float2 Lhs, FLWCVector2 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool2  LWCLess ( FLWCVector2 Lhs, float2 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
  bool2  LWCLessEqual ( FLWCVector2 Lhs, FLWCVector2 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool2  LWCLessEqual ( float2 Lhs, FLWCVector2 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool2  LWCLessEqual ( FLWCVector2 Lhs, float2 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }








float2 LWCDdx(FLWCVector2 V) { return ddx( (( V ).Tile)) * 2097152.00f + ddx(V.Offset); }
float2 LWCDdy(FLWCVector2 V) { return ddy( (( V ).Tile)) * 2097152.00f + ddy(V.Offset); }


FLWCVector2 LWCAdd(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector2 LWCAdd(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector2 LWCAdd(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset + Rhs); }

FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }

bool2 LWCEquals(FLWCVector2 Lhs, FLWCVector2 Rhs)
{
	return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f == Rhs.Offset - Lhs.Offset;
}
bool2 LWCEquals(float2 Lhs, FLWCVector2 Rhs)
{
	return - (( Rhs ).Tile) * 2097152.00f == Rhs.Offset - Lhs;
} 
bool2 LWCEquals(FLWCVector2 Lhs, float2 Rhs)
{
	return  (( Lhs ).Tile) * 2097152.00f == Rhs - Lhs.Offset;
}
bool2 LWCEqualsApprox(FLWCVector2 Lhs, FLWCVector2 Rhs, float Threshold)
{
	return abs(( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f + (Lhs.Offset - Rhs.Offset)) < (float2)Threshold;
}
bool2 LWCEqualsApprox(float2 Lhs, FLWCVector2 Rhs, float Threshold)
{
	return abs(- (( Rhs ).Tile) * 2097152.00f + (Lhs - Rhs.Offset)) < (float2)Threshold;
}
bool2 LWCEqualsApprox(FLWCVector2 Lhs, float2 Rhs, float Threshold)
{
	return abs( (( Lhs ).Tile) * 2097152.00f + (Lhs.Offset - Rhs)) < (float2)Threshold;
}

FLWCVector2 LWCSelect(bool2 S, FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( select_internal( S ,  (( Lhs ).Tile) ,  (( Rhs ).Tile) ),  select_internal( S , Lhs.Offset , Rhs.Offset )); }
FLWCVector2 LWCSelect(bool2 S, float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( select_internal( S , (float2)0 ,  (( Rhs ).Tile) ),  select_internal( S , Lhs , Rhs.Offset )); }
FLWCVector2 LWCSelect(bool2 S, FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( select_internal( S ,  (( Lhs ).Tile) , (float2)0 ),  select_internal( S , Lhs.Offset , Rhs )); }

FLWCVector2 LWCNegate(FLWCVector2 V) { return MakeLWCVector2(- (( V ).Tile), -V.Offset); }

float2 LWCFrac(FLWCVector2 V)
{
	float2 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

FLWCVector2 LWCFloor(FLWCVector2 V) { FLWCVector2 VN = LWCMakeIntTile(V); return MakeLWCVector2( (( VN ).Tile), floor(VN.Offset)); }
FLWCVector2 LWCCeil(FLWCVector2 V) { FLWCVector2 VN = LWCMakeIntTile(V); return MakeLWCVector2( (( VN ).Tile), ceil(VN.Offset)); }
FLWCVector2 LWCRound(FLWCVector2 V) { FLWCVector2 VN = LWCMakeIntTile(V); return MakeLWCVector2( (( VN ).Tile), round(VN.Offset)); }
FLWCVector2 LWCTrunc(FLWCVector2 V) { FLWCVector2 VN = LWCMakeIntTile(V); return MakeLWCVector2( (( VN ).Tile), trunc(VN.Offset)); }


float2 LWCSign(FLWCVector2 V) { return float2(sign(LWCToFloat(V))); }
float2 LWCSaturate(FLWCVector2 V) { return saturate(LWCToFloat(V)); }
float2 LWCClampScalar(FLWCVector2 V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector2 LWCMultiply(FLWCVector2 Lhs, FLWCVector2 Rhs)
{
	return MakeLWCVector2( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector2 LWCMultiply(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

FLWCVector2 LWCDivide(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector2 LWCDivide(FLWCVector2 Lhs, float2 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector2 LWCDivide(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2((float2)0, Lhs * LWCRcp(Rhs)); }


FLWCVector2 LWCLerp(FLWCVector2 Lhs, FLWCVector2 Rhs, float2 S)
{
	return MakeLWCVector2(lerp( (( Lhs ).Tile),  (( Rhs ).Tile), S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float2 LWCFmod(FLWCVector2 Lhs, float2 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float2 LWCFmodFloor(FLWCVector2 Lhs, float2 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float2 LWCFmodFloorPI(FLWCVector2 V)
{
	return LWCFmodFloor(V, PI);
	
}
float2 LWCFmodFloor2PI(FLWCVector2 V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

float2 LWCSin(FLWCVector2 V) { return sin(LWCFmodFloor2PI(V)); }
float2 LWCCos(FLWCVector2 V) { return cos(LWCFmodFloor2PI(V)); }
float2 LWCTan(FLWCVector2 V) { return tan(LWCFmodFloorPI(V)); }
float2 LWCASin(FLWCVector2 V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float2 LWCACos(FLWCVector2 V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float2 LWCATan(FLWCVector2 V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float2 LWCSmoothStep(FLWCVector2 Lhs, FLWCVector2 Rhs, FLWCVector2 S)
{
	float2 t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector2 LWCMin(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2 LWCMin(float2 Lhs, FLWCVector2 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2 LWCMin(FLWCVector2 Lhs, float2 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2 LWCMax(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2 LWCMax(float2 Lhs, FLWCVector2 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2 LWCMax(FLWCVector2 Lhs, float2 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector2 LWCAbs(FLWCVector2 V) { return LWCSelect(LWCLess(V, (float2)0), LWCNegate(V), V); }

float2 LWCStep(FLWCVector2 Lhs, FLWCVector2 Rhs)   { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float2)1.0f , (float2)0.0f ); }
float2 LWCStep(FLWCVector2 Lhs, float2 Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float2)1.0f , (float2)0.0f ); }
float2 LWCStep(float2 Lhs, FLWCVector2 Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float2)1.0f , (float2)0.0f ); }


FLWCVector2 LWCSquareScaled(FLWCVector2 V)
{
	float2 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector2( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 386 "/Engine/Private/LargeWorldCoordinates.ush"










#line   5 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCNormalizeTile(FLWCVector3 V)
{
	float3 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector3(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}


FLWCVector3 LWCMakeIntTile(FLWCVector3 V)
{
	float3 IntTile = floor(V.Tile);
	return MakeLWCVector3(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

float3 LWCSqrtUnscaled(FLWCVector3 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float3 LWCRsqrtUnscaled(FLWCVector3 V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float3 LWCRcpUnscaled(FLWCVector3 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float3 LWCSqrtScaled(FLWCVector3 V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float3 LWCRsqrtScaled(FLWCVector3 V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float3 LWCRcpScaled(FLWCVector3 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float3 LWCSqrt(FLWCVector3 V) { return LWCSqrtScaled(V, 1448.15466f); }
float3 LWCRsqrt(FLWCVector3 V) { return LWCRsqrtScaled(V, 0.000690533954f); }
float3 LWCRcp(FLWCVector3 V) { return LWCRcpScaled(V, 4.76837158e-07f); }









  bool3  LWCGreater ( FLWCVector3 Lhs, FLWCVector3 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool3  LWCGreater ( float3 Lhs, FLWCVector3 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool3  LWCGreater ( FLWCVector3 Lhs, float3 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
  bool3  LWCGreaterEqual ( FLWCVector3 Lhs, FLWCVector3 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool3  LWCGreaterEqual ( float3 Lhs, FLWCVector3 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool3  LWCGreaterEqual ( FLWCVector3 Lhs, float3 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
  bool3  LWCLess ( FLWCVector3 Lhs, FLWCVector3 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool3  LWCLess ( float3 Lhs, FLWCVector3 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool3  LWCLess ( FLWCVector3 Lhs, float3 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
  bool3  LWCLessEqual ( FLWCVector3 Lhs, FLWCVector3 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool3  LWCLessEqual ( float3 Lhs, FLWCVector3 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool3  LWCLessEqual ( FLWCVector3 Lhs, float3 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }








float3 LWCDdx(FLWCVector3 V) { return ddx( (( V ).Tile)) * 2097152.00f + ddx(V.Offset); }
float3 LWCDdy(FLWCVector3 V) { return ddy( (( V ).Tile)) * 2097152.00f + ddy(V.Offset); }


FLWCVector3 LWCAdd(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector3 LWCAdd(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector3 LWCAdd(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset + Rhs); }

FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }

bool3 LWCEquals(FLWCVector3 Lhs, FLWCVector3 Rhs)
{
	return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f == Rhs.Offset - Lhs.Offset;
}
bool3 LWCEquals(float3 Lhs, FLWCVector3 Rhs)
{
	return - (( Rhs ).Tile) * 2097152.00f == Rhs.Offset - Lhs;
} 
bool3 LWCEquals(FLWCVector3 Lhs, float3 Rhs)
{
	return  (( Lhs ).Tile) * 2097152.00f == Rhs - Lhs.Offset;
}
bool3 LWCEqualsApprox(FLWCVector3 Lhs, FLWCVector3 Rhs, float Threshold)
{
	return abs(( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f + (Lhs.Offset - Rhs.Offset)) < (float3)Threshold;
}
bool3 LWCEqualsApprox(float3 Lhs, FLWCVector3 Rhs, float Threshold)
{
	return abs(- (( Rhs ).Tile) * 2097152.00f + (Lhs - Rhs.Offset)) < (float3)Threshold;
}
bool3 LWCEqualsApprox(FLWCVector3 Lhs, float3 Rhs, float Threshold)
{
	return abs( (( Lhs ).Tile) * 2097152.00f + (Lhs.Offset - Rhs)) < (float3)Threshold;
}

FLWCVector3 LWCSelect(bool3 S, FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( select_internal( S ,  (( Lhs ).Tile) ,  (( Rhs ).Tile) ),  select_internal( S , Lhs.Offset , Rhs.Offset )); }
FLWCVector3 LWCSelect(bool3 S, float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( select_internal( S , (float3)0 ,  (( Rhs ).Tile) ),  select_internal( S , Lhs , Rhs.Offset )); }
FLWCVector3 LWCSelect(bool3 S, FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( select_internal( S ,  (( Lhs ).Tile) , (float3)0 ),  select_internal( S , Lhs.Offset , Rhs )); }

FLWCVector3 LWCNegate(FLWCVector3 V) { return MakeLWCVector3(- (( V ).Tile), -V.Offset); }

float3 LWCFrac(FLWCVector3 V)
{
	float3 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

FLWCVector3 LWCFloor(FLWCVector3 V) { FLWCVector3 VN = LWCMakeIntTile(V); return MakeLWCVector3( (( VN ).Tile), floor(VN.Offset)); }
FLWCVector3 LWCCeil(FLWCVector3 V) { FLWCVector3 VN = LWCMakeIntTile(V); return MakeLWCVector3( (( VN ).Tile), ceil(VN.Offset)); }
FLWCVector3 LWCRound(FLWCVector3 V) { FLWCVector3 VN = LWCMakeIntTile(V); return MakeLWCVector3( (( VN ).Tile), round(VN.Offset)); }
FLWCVector3 LWCTrunc(FLWCVector3 V) { FLWCVector3 VN = LWCMakeIntTile(V); return MakeLWCVector3( (( VN ).Tile), trunc(VN.Offset)); }


float3 LWCSign(FLWCVector3 V) { return float3(sign(LWCToFloat(V))); }
float3 LWCSaturate(FLWCVector3 V) { return saturate(LWCToFloat(V)); }
float3 LWCClampScalar(FLWCVector3 V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector3 LWCMultiply(FLWCVector3 Lhs, FLWCVector3 Rhs)
{
	return MakeLWCVector3( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector3 LWCMultiply(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

FLWCVector3 LWCDivide(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector3 LWCDivide(FLWCVector3 Lhs, float3 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector3 LWCDivide(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3((float3)0, Lhs * LWCRcp(Rhs)); }


FLWCVector3 LWCLerp(FLWCVector3 Lhs, FLWCVector3 Rhs, float3 S)
{
	return MakeLWCVector3(lerp( (( Lhs ).Tile),  (( Rhs ).Tile), S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float3 LWCFmod(FLWCVector3 Lhs, float3 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float3 LWCFmodFloor(FLWCVector3 Lhs, float3 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float3 LWCFmodFloorPI(FLWCVector3 V)
{
	return LWCFmodFloor(V, PI);
	
}
float3 LWCFmodFloor2PI(FLWCVector3 V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

float3 LWCSin(FLWCVector3 V) { return sin(LWCFmodFloor2PI(V)); }
float3 LWCCos(FLWCVector3 V) { return cos(LWCFmodFloor2PI(V)); }
float3 LWCTan(FLWCVector3 V) { return tan(LWCFmodFloorPI(V)); }
float3 LWCASin(FLWCVector3 V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float3 LWCACos(FLWCVector3 V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float3 LWCATan(FLWCVector3 V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float3 LWCSmoothStep(FLWCVector3 Lhs, FLWCVector3 Rhs, FLWCVector3 S)
{
	float3 t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector3 LWCMin(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3 LWCMin(float3 Lhs, FLWCVector3 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3 LWCMin(FLWCVector3 Lhs, float3 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3 LWCMax(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3 LWCMax(float3 Lhs, FLWCVector3 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3 LWCMax(FLWCVector3 Lhs, float3 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector3 LWCAbs(FLWCVector3 V) { return LWCSelect(LWCLess(V, (float3)0), LWCNegate(V), V); }

float3 LWCStep(FLWCVector3 Lhs, FLWCVector3 Rhs)   { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float3)1.0f , (float3)0.0f ); }
float3 LWCStep(FLWCVector3 Lhs, float3 Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float3)1.0f , (float3)0.0f ); }
float3 LWCStep(float3 Lhs, FLWCVector3 Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float3)1.0f , (float3)0.0f ); }


FLWCVector3 LWCSquareScaled(FLWCVector3 V)
{
	float3 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector3( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 396 "/Engine/Private/LargeWorldCoordinates.ush"










#line   5 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCNormalizeTile(FLWCVector4 V)
{
	float4 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector4(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}


FLWCVector4 LWCMakeIntTile(FLWCVector4 V)
{
	float4 IntTile = floor(V.Tile);
	return MakeLWCVector4(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

float4 LWCSqrtUnscaled(FLWCVector4 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float4 LWCRsqrtUnscaled(FLWCVector4 V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float4 LWCRcpUnscaled(FLWCVector4 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float4 LWCSqrtScaled(FLWCVector4 V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float4 LWCRsqrtScaled(FLWCVector4 V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float4 LWCRcpScaled(FLWCVector4 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float4 LWCSqrt(FLWCVector4 V) { return LWCSqrtScaled(V, 1448.15466f); }
float4 LWCRsqrt(FLWCVector4 V) { return LWCRsqrtScaled(V, 0.000690533954f); }
float4 LWCRcp(FLWCVector4 V) { return LWCRcpScaled(V, 4.76837158e-07f); }









  bool4  LWCGreater ( FLWCVector4 Lhs, FLWCVector4 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool4  LWCGreater ( float4 Lhs, FLWCVector4 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool4  LWCGreater ( FLWCVector4 Lhs, float4 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
  bool4  LWCGreaterEqual ( FLWCVector4 Lhs, FLWCVector4 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool4  LWCGreaterEqual ( float4 Lhs, FLWCVector4 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool4  LWCGreaterEqual ( FLWCVector4 Lhs, float4 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
  bool4  LWCLess ( FLWCVector4 Lhs, FLWCVector4 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool4  LWCLess ( float4 Lhs, FLWCVector4 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool4  LWCLess ( FLWCVector4 Lhs, float4 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
  bool4  LWCLessEqual ( FLWCVector4 Lhs, FLWCVector4 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool4  LWCLessEqual ( float4 Lhs, FLWCVector4 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool4  LWCLessEqual ( FLWCVector4 Lhs, float4 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }








float4 LWCDdx(FLWCVector4 V) { return ddx( (( V ).Tile)) * 2097152.00f + ddx(V.Offset); }
float4 LWCDdy(FLWCVector4 V) { return ddy( (( V ).Tile)) * 2097152.00f + ddy(V.Offset); }


FLWCVector4 LWCAdd(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector4 LWCAdd(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector4 LWCAdd(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset + Rhs); }

FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }

bool4 LWCEquals(FLWCVector4 Lhs, FLWCVector4 Rhs)
{
	return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f == Rhs.Offset - Lhs.Offset;
}
bool4 LWCEquals(float4 Lhs, FLWCVector4 Rhs)
{
	return - (( Rhs ).Tile) * 2097152.00f == Rhs.Offset - Lhs;
} 
bool4 LWCEquals(FLWCVector4 Lhs, float4 Rhs)
{
	return  (( Lhs ).Tile) * 2097152.00f == Rhs - Lhs.Offset;
}
bool4 LWCEqualsApprox(FLWCVector4 Lhs, FLWCVector4 Rhs, float Threshold)
{
	return abs(( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f + (Lhs.Offset - Rhs.Offset)) < (float4)Threshold;
}
bool4 LWCEqualsApprox(float4 Lhs, FLWCVector4 Rhs, float Threshold)
{
	return abs(- (( Rhs ).Tile) * 2097152.00f + (Lhs - Rhs.Offset)) < (float4)Threshold;
}
bool4 LWCEqualsApprox(FLWCVector4 Lhs, float4 Rhs, float Threshold)
{
	return abs( (( Lhs ).Tile) * 2097152.00f + (Lhs.Offset - Rhs)) < (float4)Threshold;
}

FLWCVector4 LWCSelect(bool4 S, FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( select_internal( S ,  (( Lhs ).Tile) ,  (( Rhs ).Tile) ),  select_internal( S , Lhs.Offset , Rhs.Offset )); }
FLWCVector4 LWCSelect(bool4 S, float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( select_internal( S , (float4)0 ,  (( Rhs ).Tile) ),  select_internal( S , Lhs , Rhs.Offset )); }
FLWCVector4 LWCSelect(bool4 S, FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( select_internal( S ,  (( Lhs ).Tile) , (float4)0 ),  select_internal( S , Lhs.Offset , Rhs )); }

FLWCVector4 LWCNegate(FLWCVector4 V) { return MakeLWCVector4(- (( V ).Tile), -V.Offset); }

float4 LWCFrac(FLWCVector4 V)
{
	float4 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

FLWCVector4 LWCFloor(FLWCVector4 V) { FLWCVector4 VN = LWCMakeIntTile(V); return MakeLWCVector4( (( VN ).Tile), floor(VN.Offset)); }
FLWCVector4 LWCCeil(FLWCVector4 V) { FLWCVector4 VN = LWCMakeIntTile(V); return MakeLWCVector4( (( VN ).Tile), ceil(VN.Offset)); }
FLWCVector4 LWCRound(FLWCVector4 V) { FLWCVector4 VN = LWCMakeIntTile(V); return MakeLWCVector4( (( VN ).Tile), round(VN.Offset)); }
FLWCVector4 LWCTrunc(FLWCVector4 V) { FLWCVector4 VN = LWCMakeIntTile(V); return MakeLWCVector4( (( VN ).Tile), trunc(VN.Offset)); }


float4 LWCSign(FLWCVector4 V) { return float4(sign(LWCToFloat(V))); }
float4 LWCSaturate(FLWCVector4 V) { return saturate(LWCToFloat(V)); }
float4 LWCClampScalar(FLWCVector4 V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector4 LWCMultiply(FLWCVector4 Lhs, FLWCVector4 Rhs)
{
	return MakeLWCVector4( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector4 LWCMultiply(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

FLWCVector4 LWCDivide(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector4 LWCDivide(FLWCVector4 Lhs, float4 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector4 LWCDivide(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4((float4)0, Lhs * LWCRcp(Rhs)); }


FLWCVector4 LWCLerp(FLWCVector4 Lhs, FLWCVector4 Rhs, float4 S)
{
	return MakeLWCVector4(lerp( (( Lhs ).Tile),  (( Rhs ).Tile), S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float4 LWCFmod(FLWCVector4 Lhs, float4 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float4 LWCFmodFloor(FLWCVector4 Lhs, float4 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float4 LWCFmodFloorPI(FLWCVector4 V)
{
	return LWCFmodFloor(V, PI);
	
}
float4 LWCFmodFloor2PI(FLWCVector4 V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

float4 LWCSin(FLWCVector4 V) { return sin(LWCFmodFloor2PI(V)); }
float4 LWCCos(FLWCVector4 V) { return cos(LWCFmodFloor2PI(V)); }
float4 LWCTan(FLWCVector4 V) { return tan(LWCFmodFloorPI(V)); }
float4 LWCASin(FLWCVector4 V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float4 LWCACos(FLWCVector4 V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float4 LWCATan(FLWCVector4 V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float4 LWCSmoothStep(FLWCVector4 Lhs, FLWCVector4 Rhs, FLWCVector4 S)
{
	float4 t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector4 LWCMin(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4 LWCMin(float4 Lhs, FLWCVector4 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4 LWCMin(FLWCVector4 Lhs, float4 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4 LWCMax(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4 LWCMax(float4 Lhs, FLWCVector4 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4 LWCMax(FLWCVector4 Lhs, float4 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector4 LWCAbs(FLWCVector4 V) { return LWCSelect(LWCLess(V, (float4)0), LWCNegate(V), V); }

float4 LWCStep(FLWCVector4 Lhs, FLWCVector4 Rhs)   { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float4)1.0f , (float4)0.0f ); }
float4 LWCStep(FLWCVector4 Lhs, float4 Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float4)1.0f , (float4)0.0f ); }
float4 LWCStep(float4 Lhs, FLWCVector4 Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float4)1.0f , (float4)0.0f ); }


FLWCVector4 LWCSquareScaled(FLWCVector4 V)
{
	float4 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector4( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 406 "/Engine/Private/LargeWorldCoordinates.ush"







FLWCScalar LWCMakeRelativeToTile(FLWCScalar V, float NewTile) { return MakeLWCScalar(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCScalar(NewTile, (float)0.0f)))); }
FLWCVector2 LWCMakeRelativeToTile(FLWCVector2 V, float2 NewTile) { return MakeLWCVector2(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCVector2(NewTile, (float2)0.0f)))); }
FLWCVector3 LWCMakeRelativeToTile(FLWCVector3 V, float3 NewTile) { return MakeLWCVector3(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCVector3(NewTile, (float3)0.0f)))); }
FLWCVector4 LWCMakeRelativeToTile(FLWCVector4 V, float4 NewTile) { return MakeLWCVector4(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCVector4(NewTile, (float4)0.0f)))); }
FLWCMatrix LWCMakeRelativeToTile(FLWCMatrix M, float3 NewTile)
{
	LWCSetOrigin(M, LWCMakeRelativeToTile(LWCGetOrigin(M), NewTile));
	return M;
}

FLWCScalar LWCVectorSum(FLWCScalar V) { return V; }
FLWCScalar LWCVectorSum(FLWCVector2 V) { return LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)); }
FLWCScalar LWCVectorSum(FLWCVector3 V) { return LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)); }
FLWCScalar LWCVectorSum(FLWCVector4 V) { return LWCAdd(LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)),  LWCGetComponent( V , 3)); }

FLWCScalar LWCDot(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, Rhs); }
FLWCScalar LWCDot(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, Rhs); }
FLWCScalar LWCDot(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector2 Lhs, float2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector3 Lhs, float3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector4 Lhs, float4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }


FLWCScalar LWCLength2Scaled(FLWCScalar V)
{
	return LWCSquareScaled(V);
}

FLWCScalar LWCLength2Scaled(FLWCVector2 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	return LWCAdd(X2, Y2);
}

FLWCScalar LWCLength2Scaled(FLWCVector3 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent( V , 2));
	return LWCAdd(LWCAdd(X2, Y2), Z2);
}

FLWCScalar LWCLength2Scaled(FLWCVector4 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent( V , 2));
	FLWCScalar W2 = LWCSquareScaled( LWCGetComponent( V , 3));
	return LWCAdd(LWCAdd(LWCAdd(X2, Y2), Z2), W2);
}



FLWCScalar LWCLength(FLWCScalar V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector2 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector3 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector4 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }

float LWCRcpLength(FLWCScalar V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCRcpLength(FLWCVector2 V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCRcpLength(FLWCVector3 V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCRcpLength(FLWCVector4 V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }

float LWCNormalize(FLWCScalar V) { return 1.0f; } 
float2 LWCNormalize(FLWCVector2 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float3 LWCNormalize(FLWCVector3 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float4 LWCNormalize(FLWCVector4 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }












#line 201 "/Engine/Private/Common.ush"


#line   7 "/Engine/Private/InstancedStereo.ush"








#line   1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 TranslatedWorldToSubpixelClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	min16float3 ViewForward;
	min16float3 ViewUp;
	min16float3 ViewRight;
	min16float3 HMDViewNoRollUp;
	min16float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	min16float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	min16float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float PreExposure;
	float OneOverPreExposure;
	min16float4 DiffuseOverrideParameter;
	min16float4 SpecularOverrideParameter;
	min16float4 NormalOverrideParameter;
	min16float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	min16float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	min16float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	min16float CameraCut;
	min16float UnlitViewmodeMask;
	min16float4 DirectionalLightColor;
	min16float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	min16float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	min16float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogScreenUVToHistoryVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint InstanceSceneDataSOAStride;
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	FLWCInverseMatrix WorldToClip;
	FLWCMatrix ClipToWorld;
	FLWCMatrix ScreenToWorld;
	FLWCMatrix PrevClipToWorld;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};
	void FinalizeViewState(inout ViewState InOutView);
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View_TranslatedWorldToClip;
	Result.TranslatedWorldToSubpixelClip = View_TranslatedWorldToSubpixelClip;
	Result.RelativeWorldToClip = View_RelativeWorldToClip;
	Result.ClipToRelativeWorld = View_ClipToRelativeWorld;
	Result.TranslatedWorldToView = View_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View_CameraViewToTranslatedWorld;
	Result.ViewToClip = View_ViewToClip;
	Result.ViewToClipNoAA = View_ViewToClipNoAA;
	Result.ClipToView = View_ClipToView;
	Result.ClipToTranslatedWorld = View_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View_SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View_ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View_MobileMultiviewShadowTransform;
	Result.ViewTilePosition = View_ViewTilePosition;
	Result.MatrixTilePosition = View_MatrixTilePosition;
	Result.ViewForward = View_ViewForward;
	Result.ViewUp = View_ViewUp;
	Result.ViewRight = View_ViewRight;
	Result.HMDViewNoRollUp = View_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View_ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = View_RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View_TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = View_RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = View_RelativePreViewTranslation;
	Result.PrevViewToClip = View_PrevViewToClip;
	Result.PrevClipToView = View_PrevClipToView;
	Result.PrevTranslatedWorldToClip = View_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View_PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View_PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = View_PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = View_PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = View_RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = View_PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View_ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View_ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View_TemporalAAJitter;
	Result.GlobalClippingPlane = View_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View_PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View_ViewRectMin;
	Result.ViewSizeAndInvSize = View_ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View_ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View_LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View_ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View_BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View_ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View_NumSceneColorMSAASamples;
	Result.PreExposure = View_PreExposure;
	Result.OneOverPreExposure = View_OneOverPreExposure;
	Result.DiffuseOverrideParameter = View_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View_SpecularOverrideParameter;
	Result.NormalOverrideParameter = View_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View_RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View_PrevFrameGameTime;
	Result.PrevFrameRealTime = View_PrevFrameRealTime;
	Result.OutOfBoundsMask = View_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View_CullingSign;
	Result.NearPlane = View_NearPlane;
	Result.GameTime = View_GameTime;
	Result.RealTime = View_RealTime;
	Result.DeltaTime = View_DeltaTime;
	Result.MaterialTextureMipBias = View_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View_MaterialTextureDerivativeMultiply;
	Result.Random = View_Random;
	Result.FrameNumber = View_FrameNumber;
	Result.StateFrameIndexMod8 = View_StateFrameIndexMod8;
	Result.StateFrameIndex = View_StateFrameIndex;
	Result.DebugViewModeMask = View_DebugViewModeMask;
	Result.WorldIsPaused = View_WorldIsPaused;
	Result.CameraCut = View_CameraCut;
	Result.UnlitViewmodeMask = View_UnlitViewmodeMask;
	Result.DirectionalLightColor = View_DirectionalLightColor;
	Result.DirectionalLightDirection = View_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View_TemporalAAParams;
	Result.CircleDOFParams = View_CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View_MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View_GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View_GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View_DemosaicVposOffset;
	Result.DecalDepthBias = View_DecalDepthBias;
	Result.IndirectLightingColorScale = View_IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View_PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View_PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View_AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View_AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View_AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View_AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View_SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View_SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View_SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View_SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View_SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View_SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View_RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View_RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View_RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View_SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = View_MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View_MobilePreviewMode;
	Result.HMDEyePaddingOffset = View_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View_StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View_GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View_GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View_GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View_GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View_GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View_GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View_GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View_GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View_GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View_GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View_MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View_NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View_CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View_NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View_NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View_DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View_DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogScreenUVToHistoryVolumeUV = View_VolumetricFogScreenUVToHistoryVolumeUV;
	Result.VolumetricFogMaxDistance = View_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View_VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View_EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View_XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View_GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View_VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View_VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View_VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View_VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View_VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View_RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View_RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View_RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = View_OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = View_FarShadowStaticMeshLODBias;
	Result.MinRoughness = View_MinRoughness;
	Result.HairRenderInfo = View_HairRenderInfo;
	Result.EnableSkyLight = View_EnableSkyLight;
	Result.HairRenderInfoBits = View_HairRenderInfoBits;
	Result.HairComponents = View_HairComponents;
	Result.bSubsurfacePostprocessEnabled = View_bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View_SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View_PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View_PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View_PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View_PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View_PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View_PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View_PhysicsFieldTargets;
	Result.InstanceSceneDataSOAStride = View_InstanceSceneDataSOAStride;
	Result.GPUSceneViewId = View_GPUSceneViewId;
	Result.ViewResolutionFraction = View_ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	FinalizeViewState(Result);
	return Result;
}
#line 649 "/Engine/Generated/GeneratedInstancedStereo.ush"

#line  15 "/Engine/Private/InstancedStereo.ush"


void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeLWCInverseMatrix(InOutView.MatrixTilePosition, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.PrevClipToRelativeWorld);

	InOutView.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOrigin);
	InOutView.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOrigin);
	InOutView.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOrigin);
	InOutView.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOrigin);
	InOutView.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslation);
	InOutView.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslation);
}



static ViewState ResolvedView = (ViewState)0.0f;

ViewState ResolveView()
{
	return GetPrimaryView();
}













bool IsInstancedStereo()
{



	return false;

}

uint GetEyeIndex(uint InstanceId)
{



	return 0;

}

uint GetInstanceId(uint InstanceId)
{



	return InstanceId;

}
#line 203 "/Engine/Private/Common.ush"


#line   7 "/Engine/Private/Definitions.usf"























































































































































































































































































#line 205 "/Engine/Private/Common.ush"


#line   7 "/Engine/Private/AssertionMacros.ush"

















	









	









	







	





















	

	
	

#line 207 "/Engine/Private/Common.ush"









	



	

























static float GlobalTextureMipBias = 0;
static float GlobalRayCone_TexArea = 0;
float ComputeRayConeLod(Texture2D Tex)
{






    return 0.0f;

}

float  ClampToHalfFloatRange(float  X) { return clamp(X, float(0), MaxHalfFloat); }
float2 ClampToHalfFloatRange(float2 X) { return clamp(X, float(0).xx, MaxHalfFloat.xx); }
float3 ClampToHalfFloatRange(float3 X) { return clamp(X, float(0).xxx, MaxHalfFloat.xxx); }
float4 ClampToHalfFloatRange(float4 X) { return clamp(X, float(0).xxxx, MaxHalfFloat.xxxx); }



min16float4 Texture1DSample(Texture1D Tex, SamplerState Sampler, float UV)
{



	return Tex.Sample(Sampler, UV);

}
min16float4 Texture2DSample(Texture2D Tex, SamplerState Sampler, float2 UV)
{



	return Tex.Sample(Sampler, UV);

}
min16float4 Texture2DSample(Texture2D Tex, SamplerState Sampler, FloatDeriv2 UV)
{



	return Tex.SampleGrad(Sampler, UV.Value, UV.Ddx, UV.Ddy);

}
min16float Texture2DSample_A8(Texture2D Tex, SamplerState Sampler, float2 UV)
{



	return Tex.Sample(Sampler, UV) .r;

}
min16float4 Texture3DSample(Texture3D Tex, SamplerState Sampler, float3 UV)
{



	return Tex.Sample(Sampler, UV);

}
min16float4 TextureCubeSample(TextureCube Tex, SamplerState Sampler, float3 UV)
{



	return Tex.Sample(Sampler, UV);

}
min16float4 Texture2DArraySample(Texture2DArray Tex, SamplerState Sampler, float3 UV)
{



	return Tex.Sample(Sampler, UV);

}
min16float4 Texture1DSampleLevel(Texture1D Tex, SamplerState Sampler, float UV, min16float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
min16float4 Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV, min16float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
min16float4 Texture2DSampleBias(Texture2D Tex, SamplerState Sampler, float2 UV, min16float MipBias)
{



	return Tex.SampleBias(Sampler, UV, MipBias);

}
min16float4 Texture2DSampleGrad(Texture2D Tex, SamplerState Sampler, float2 UV, min16float2 DDX, min16float2 DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
min16float4 Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV, min16float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
min16float4 Texture3DSampleBias(Texture3D Tex, SamplerState Sampler, float3 UV, min16float MipBias)
{



	return Tex.SampleBias(Sampler, UV, MipBias);

}
min16float4 Texture3DSampleGrad(Texture3D Tex, SamplerState Sampler, float3 UV, min16float3 DDX, min16float3 DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
min16float4 TextureCubeSampleLevel(TextureCube Tex, SamplerState Sampler, float3 UV, min16float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
min16float TextureCubeSampleDepthLevel(TextureCube TexDepth, SamplerState Sampler, float3 UV, min16float Mip)
{
	return TexDepth.SampleLevel(Sampler, UV, Mip).x;
}
min16float4 TextureCubeSampleBias(TextureCube Tex, SamplerState Sampler, float3 UV, min16float MipBias)
{



	return Tex.SampleBias(Sampler, UV, MipBias);

}
min16float4 TextureCubeSampleGrad(TextureCube Tex, SamplerState Sampler, float3 UV, min16float3 DDX, min16float3 DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
min16float4 TextureExternalSample(TextureExternal Tex, SamplerState Sampler, float2 UV)
{







	return Tex.Sample(Sampler, UV);

}
min16float4 TextureExternalSampleGrad(TextureExternal Tex, SamplerState Sampler, float2 UV, min16float2 DDX, min16float2 DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
min16float4 TextureExternalSampleLevel(TextureExternal Tex, SamplerState Sampler, float2 UV, min16float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}




min16float4 Texture1DSample_Decal(Texture1D Tex, SamplerState Sampler, float UV)
{

	return Texture1DSampleLevel(Tex, Sampler, UV, 0);



}
min16float4 Texture2DSample_Decal(Texture2D Tex, SamplerState Sampler, float2 UV)
{

	return Texture2DSampleLevel(Tex, Sampler, UV, 0);



}
min16float4 Texture3DSample_Decal(Texture3D Tex, SamplerState Sampler, float3 UV)
{

	return Texture3DSampleLevel(Tex, Sampler, UV, 0);



}
min16float4 TextureCubeSample_Decal(TextureCube Tex, SamplerState Sampler, float3 UV)
{

	return TextureCubeSampleLevel(Tex, Sampler, UV, 0);



}
min16float4 TextureExternalSample_Decal(TextureExternal Tex, SamplerState Sampler, float2 UV)
{

	return TextureExternalSampleLevel(Tex, Sampler, UV, 0);



}

min16float4 Texture2DArraySampleLevel(Texture2DArray Tex, SamplerState Sampler, float3 UV, min16float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
min16float4 Texture2DArraySampleBias(Texture2DArray Tex, SamplerState Sampler, float3 UV, min16float MipBias)
{



	return Tex.SampleBias(Sampler, UV, MipBias);

}
min16float4 Texture2DArraySampleGrad(Texture2DArray Tex, SamplerState Sampler, float3 UV, min16float2 DDX, min16float2 DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}


float2 Tile1Dto2D(float xsize, float idx)
{
	float2 xyidx = 0;
	xyidx.y = floor(idx / xsize);
	xyidx.x = idx - xsize * xyidx.y;

	return xyidx;
}












float4 PseudoVolumeTexture(Texture2D Tex, SamplerState TexSampler, float3 inPos, float2 xysize, float numframes,
	uint mipmode = 0, float miplevel = 0, float2 InDDX = 0, float2 InDDY = 0)
{
	float z = inPos.z - 0.5f / numframes;	
	float zframe = floor(z * numframes);
	float zphase = frac(z * numframes);

	float2 uv = frac(inPos.xy) / xysize;

	float2 curframe = Tile1Dto2D(xysize.x, zframe) / xysize;
	float2 nextframe = Tile1Dto2D(xysize.x, zframe + 1) / xysize;

	float2 uvCurFrame = uv + curframe;
	float2 uvNextFrame = uv + nextframe;

	
	uvCurFrame.y = 1.0 - uvCurFrame.y;
	uvNextFrame.y = 1.0 - uvNextFrame.y;
	

	float4 sampleA = 0, sampleB = 0;
	switch (mipmode)
	{
	case 0: 
		sampleA = Tex.SampleLevel(TexSampler, uvCurFrame, miplevel);
		sampleB = Tex.SampleLevel(TexSampler, uvNextFrame, miplevel);
		break;
	case 1: 
		sampleA = Texture2DSample(Tex, TexSampler, uvCurFrame);
		sampleB = Texture2DSample(Tex, TexSampler, uvNextFrame);
		break;
	case 2: 
		sampleA = Tex.SampleGrad(TexSampler, uvCurFrame,  InDDX, InDDY);
		sampleB = Tex.SampleGrad(TexSampler, uvNextFrame, InDDX, InDDY);
		break;
	default:
		break;
	}

	return lerp(sampleA, sampleB, zphase);
}

#line 554 "/Engine/Private/Common.ush"




	




#line 579 "/Engine/Private/Common.ush"

	
	
	


min16float Luminance( min16float3 LinearColor )
{
	return dot( LinearColor, min16float3( 0.3, 0.59, 0.11 ) );
}

float length2(float2 v)
{
	return dot(v, v);
}
float length2(float3 v)
{
	return dot(v, v);
}
float length2(float4 v)
{
	return dot(v, v);
}

uint Mod(uint a, uint b)
{

	return a % b;



}

uint2 Mod(uint2 a, uint2 b)
{

	return a % b;



}

uint3 Mod(uint3 a, uint3 b)
{

	return a % b;



}




min16float ClampedPow(min16float X,min16float Y)
{
	return pow(max(abs(X),0.000001f),Y);
}
min16float2 ClampedPow(min16float2 X,min16float2 Y)
{
	return pow(max(abs(X),min16float2(0.000001f,0.000001f)),Y);
}
min16float3 ClampedPow(min16float3 X,min16float3 Y)
{
	return pow(max(abs(X),min16float3(0.000001f,0.000001f,0.000001f)),Y);
}  
min16float4 ClampedPow(min16float4 X,min16float4 Y)
{
	return pow(max(abs(X),min16float4(0.000001f,0.000001f,0.000001f,0.000001f)),Y);
} 


min16float PositiveClampedPow(min16float Base, min16float Exponent)
{
	return (Base <= 0.0f) ? 0.0f : pow(Base, Exponent);
}
min16float2 PositiveClampedPow(min16float2 Base, min16float2 Exponent)
{
	return min16float2(PositiveClampedPow(Base.x, Exponent.x), PositiveClampedPow(Base.y, Exponent.y)); 
}
min16float3 PositiveClampedPow(min16float3 Base, min16float3 Exponent)
{
	return min16float3(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.z, Exponent.z)); 
}  
min16float4 PositiveClampedPow(min16float4 Base, min16float4 Exponent)
{
	return min16float4(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.zw, Exponent.zw)); 
} 

float DDX(float Input)
{



	return ddx(Input);

}

float2 DDX(float2 Input)
{



	return ddx(Input);

}

float3 DDX(float3 Input)
{



	return ddx(Input);

}

float4 DDX(float4 Input)
{



	return ddx(Input);

}

float DDY(float Input)
{



	return ddy(Input);

}

float2 DDY(float2 Input)
{



	return ddy(Input);

}

float3 DDY(float3 Input)
{



	return ddy(Input);

}

float4 DDY(float4 Input)
{



	return ddy(Input);

}

#line   7 "/Engine/Private/FastMath.ush"


#line   3 "/Engine/Private/FastMathThirdParty.ush"







































float rsqrtFast( float x )
{
	int i = asint(x);
	i = 0x5f3759df - (i >> 1);
	return asfloat(i);
}




float sqrtFast( float x )
{
	int i = asint(x);
	i = 0x1FBD1DF5 + (i >> 1);
	return asfloat(i);
}




float rcpFast( float x )
{
	int i = asint(x);
	i = 0x7EF311C2 - i;
	return asfloat(i);
}





float rcpFastNR1( float x )
{
	int i = asint(x);
	i = 0x7EF311C3 - i;
	float xRcp = asfloat(i);
	xRcp = xRcp * (-xRcp * x + 2.0f);
	return xRcp;
}

float lengthFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return sqrtFast( LengthSqr );
}

float3 normalizeFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return v * rsqrtFast( LengthSqr );
}

float4 fastClamp(float4 x, float4 Min, float4 Max)
{




	return clamp(x, Min, Max);

}

float3 fastClamp(float3 x, float3 Min, float3 Max)
{




	return clamp(x, Min, Max);

}

float2 fastClamp(float2 x, float2 Min, float2 Max)
{




	return clamp(x, Min, Max);

}

float fastClamp(float x, float Min, float Max)
{




	return clamp(x, Min, Max);

}

int4 fastClamp(int4 x, int4 Min, int4 Max)
{




	return clamp(x, Min, Max);

}

int3 fastClamp(int3 x, int3 Min, int3 Max)
{




	return clamp(x, Min, Max);

}

int2 fastClamp(int2 x, int2 Min, int2 Max)
{




	return clamp(x, Min, Max);

}

int fastClamp(int x, int Min, int Max)
{




	return clamp(x, Min, Max);

}









float acosFast(float inX) 
{
    float x = abs(inX);
    float res = -0.156583f * x + (0.5 * PI);
    res *= sqrt(1.0f - x);
    return (inX >= 0) ? res : PI - res;
}

float2 acosFast( float2 x )
{
	return float2( acosFast(x.x), acosFast(x.y) );
}

float3 acosFast( float3 x )
{
	return float3( acosFast(x.x), acosFast(x.y), acosFast(x.z) );
}

float4 acosFast( float4 x )
{
	return float4( acosFast(x.x), acosFast(x.y), acosFast(x.z), acosFast(x.w) );
}




float asinFast( float x )
{
    return (0.5 * PI) - acosFast(x);
}

float2 asinFast( float2 x)
{
	return float2( asinFast(x.x), asinFast(x.y) );
}

float3 asinFast( float3 x)
{
	return float3( asinFast(x.x), asinFast(x.y), asinFast(x.z) );
}

float4 asinFast( float4 x )
{
	return float4( asinFast(x.x), asinFast(x.y), asinFast(x.z), asinFast(x.w) );
}





float atanFastPos( float x ) 
{ 
    float t0 = (x < 1.0f) ? x : 1.0f / x;
    float t1 = t0 * t0;
    float poly = 0.0872929f;
    poly = -0.301895f + poly * t1;
    poly = 1.0f + poly * t1;
    poly = poly * t0;
    return (x < 1.0f) ? poly : (0.5 * PI) - poly;
}



float atanFast( float x )
{
    float t0 = atanFastPos( abs(x) );
    return (x < 0) ? -t0: t0;
}

float2 atanFast( float2 x )
{
	return float2( atanFast(x.x), atanFast(x.y) );
}

float3 atanFast( float3 x )
{
	return float3( atanFast(x.x), atanFast(x.y), atanFast(x.z) );
}

float4 atanFast( float4 x )
{
	return float4( atanFast(x.x), atanFast(x.y), atanFast(x.z), atanFast(x.w) );
}

float atan2Fast( float y, float x )
{
	float t0 = max( abs(x), abs(y) );
	float t1 = min( abs(x), abs(y) );
	float t3 = t1 / t0;
	float t4 = t3 * t3;

	
	t0 =         + 0.0872929;
	t0 = t0 * t4 - 0.301895;
	t0 = t0 * t4 + 1.0;
	t3 = t0 * t3;

	t3 = abs(y) > abs(x) ? (0.5 * PI) - t3 : t3;
	t3 = x < 0 ? PI - t3 : t3;
	t3 = y < 0 ? -t3 : t3;

	return t3;
}

float2 atan2Fast( float2 y, float2 x )
{
	return float2( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y) );
}

float3 atan2Fast( float3 y, float3 x )
{
	return float3( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y), atan2Fast(y.z, x.z) );
}

float4 atan2Fast( float4 y, float4 x )
{
	return float4( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y), atan2Fast(y.z, x.z), atan2Fast(y.w, x.w) );
}





float acosFast4(float inX)
{
	float x1 = abs(inX);
	float x2 = x1 * x1;
	float x3 = x2 * x1;
	float s;

	s = -0.2121144f * x1 + 1.5707288f;
	s = 0.0742610f * x2 + s;
	s = -0.0187293f * x3 + s;
	s = sqrt(1.0f - x1) * s;

	
	
	return inX >= 0.0f ? s : PI - s;
}




float asinFast4( float x )
{
	return (0.5 * PI) - acosFast4(x);
}




float CosBetweenVectors(float3 A, float3 B)
{
	
	return dot(A, B) * rsqrt(length2(A) * length2(B));
}



float AngleBetweenVectors(float3 A, float3 B)
{
	return acos(CosBetweenVectors(A, B));
}


float AngleBetweenVectorsFast(float3 A, float3 B)
{
	return acosFast(CosBetweenVectors(A, B));
}


int SignFastInt(float v)
{
	return 1 - int((asuint(v) & 0x80000000) >> 30);
}

int2 SignFastInt(float2 v)
{
	return int2(SignFastInt(v.x), SignFastInt(v.y));
}
#line   9 "/Engine/Private/FastMath.ush"




  float FastExp( float x) { return exp2(1.442695f * x); }
  float2 FastExp( float2 x) { return exp2(1.442695f * x); }
  float3 FastExp( float3 x) { return exp2(1.442695f * x); }
  float4 FastExp( float4 x) { return exp2(1.442695f * x); }




  float FastLog( float x) { return log2(0.693147f * x); }
  float2 FastLog( float2 x) { return log2(0.693147f * x); }
  float3 FastLog( float3 x) { return log2(0.693147f * x); }
  float4 FastLog( float4 x) { return log2(0.693147f * x); }
#line 740 "/Engine/Private/Common.ush"

#line   7 "/Engine/Private/Random.ush"





float PseudoRandom(float2 xy)
{
	float2 pos = frac(xy / 128.0f) * 128.0f + float2(-64.340622f, -72.465622f);
	
	
	return frac(dot(pos.xyx * pos.xyy, float3(20.390625f, 60.703125f, 2.4281209f)));
}







float InterleavedGradientNoise( float2 uv, float FrameId )
{
	
	uv += FrameId * (float2(47, 17) * 0.695f);

    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}



float RandFast( uint2 PixelPos, float Magic = 3571.0 )
{
	float2 Random2 = ( 1.0 / 4320.0 ) * PixelPos + float2( 0.25, 0.0 );
	float Random = frac( dot( Random2 * Random2, Magic ) );
	Random = frac( Random * Random * (2 * Magic) );
	return Random;
}












float RandBBSfloat(float seed)
{
	float s = frac(seed / 4093);
	s = frac(s * s * 4093);
	s = frac(s * s * 4093);
	return s;
}








uint3 Rand3DPCG16(int3 p)
{
	
	uint3 v = uint3(p);

	
	
	
	v = v * 1664525u + 1013904223u;

	
	
	
	
	
	
	
	
	
	
	
	
	
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	
	return v >> 16u;
}






uint3 Rand3DPCG32(int3 p)
{
	
	uint3 v = uint3(p);

	
	v = v * 1664525u + 1013904223u;

	
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	
	v ^= v >> 16u;

	
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return v;
}








uint4 Rand4DPCG32(int4 p)
{
	
	uint4 v = uint4(p);

	
	v = v * 1664525u + 1013904223u;

	
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	
	v ^= (v >> 16u);

	
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	return v;
}








void FindBestAxisVectors(float3 In, out float3 Axis1, out float3 Axis2 )
{
	const float3 N = abs(In);

	
	if( N.z > N.x && N.z > N.y )
	{
		Axis1 = float3(1, 0, 0);
	}
	else
	{
		Axis1 = float3(0, 0, 1);
	}

	Axis1 = normalize(Axis1 - In * dot(Axis1, In));
	Axis2 = cross(Axis1, In);
}
























uint2 ScrambleTEA(uint2 v, uint IterationCount = 3)
{
	
	uint k[4] ={ 0xA341316Cu , 0xC8013EA4u , 0xAD90777Du , 0x7E95761Eu };
	
	uint y = v[0];
	uint z = v[1];
	uint sum = 0;
	
	[unroll] for(uint i = 0; i < IterationCount; ++i)
	{
		sum += 0x9e3779b9;
		y += ((z << 4u) + k[0]) ^ (z + sum) ^ ((z >> 5u) + k[1]);
		z += ((y << 4u) + k[2]) ^ (y + sum) ^ ((y >> 5u) + k[3]);
	}

	return uint2(y, z);
}






float3 NoiseTileWrap(float3 v,  bool bTiling, float RepeatSize)
{
	return bTiling ? (frac(v / RepeatSize) * RepeatSize) : v;
}




float4 PerlinRamp(float4 t)
{
	return t * t * t * (t * (t * 6 - 15) + 10); 
}




float4 PerlinRampDerivative(float4 t)
{
	return t * t * (t * (t * 30 - 60) + 30);
}







float4 MGradient(int seed, float3 offset)
{
	uint rand = Rand3DPCG16(int3(seed,0,0)).x;
	float3 direction = float3(rand.xxx & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	return float4(direction, dot(direction, offset));
}







float3 NoiseSeeds(float3 v, bool bTiling, float RepeatSize,
	out float seed000, out float seed001, out float seed010, out float seed011,
	out float seed100, out float seed101, out float seed110, out float seed111)
{
	float3 fv = frac(v);
	float3 iv = floor(v);

	const float3 primes = float3(19, 47, 101);

	if (bTiling)
	{	
		seed000 = dot(primes, NoiseTileWrap(iv, true, RepeatSize));
		seed100 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 0), true, RepeatSize));
		seed010 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 0), true, RepeatSize));
		seed110 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 0), true, RepeatSize));
		seed001 = dot(primes, NoiseTileWrap(iv + float3(0, 0, 1), true, RepeatSize));
		seed101 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 1), true, RepeatSize));
		seed011 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 1), true, RepeatSize));
		seed111 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 1), true, RepeatSize));
	}
	else
	{	
		seed000 = dot(iv, primes);
		seed100 = seed000 + primes.x;
		seed010 = seed000 + primes.y;
		seed110 = seed100 + primes.y;
		seed001 = seed000 + primes.z;
		seed101 = seed100 + primes.z;
		seed011 = seed010 + primes.z;
		seed111 = seed110 + primes.z;
	}

	return fv;
}







float GradientNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = MGradient(int(seed000), fv - float3(0, 0, 0)).w;
	float rand100 = MGradient(int(seed100), fv - float3(1, 0, 0)).w;
	float rand010 = MGradient(int(seed010), fv - float3(0, 1, 0)).w;
	float rand110 = MGradient(int(seed110), fv - float3(1, 1, 0)).w;
	float rand001 = MGradient(int(seed001), fv - float3(0, 0, 1)).w;
	float rand101 = MGradient(int(seed101), fv - float3(1, 0, 1)).w;
	float rand011 = MGradient(int(seed011), fv - float3(0, 1, 1)).w;
	float rand111 = MGradient(int(seed111), fv - float3(1, 1, 1)).w;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}





float4x3 SimplexCorners(float3 v)
{
	
	float3 tet = floor(v + v.x/3 + v.y/3 + v.z/3);
	float3 base = tet - tet.x/6 - tet.y/6 - tet.z/6;
	float3 f = v - base;

	
	
	float3 g = step(f.yzx, f.xyz), h = 1 - g.zxy;
	float3 a1 = min(g, h) - 1. / 6., a2 = max(g, h) - 1. / 3.;

	
	return float4x3(base, base + a1, base + a2, base + 0.5);
}




float4 SimplexSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;	
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	return (1 * scale + s*(-3 * scale + s*(3 * scale - s*scale)));
}




float3x4 SimplexDSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;	
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	s = -12 * scale + s*(24 * scale - s * 12 * scale);

	return float3x4(
		s * float4(f[0][0], f[1][0], f[2][0], f[3][0]),
		s * float4(f[0][1], f[1][1], f[2][1], f[3][1]),
		s * float4(f[0][2], f[1][2], f[2][2], f[3][2]));
}
















float3x4 JacobianSimplex_ALU(float3 v, bool bTiling, float RepeatSize)
{
	
	float4x3 T = SimplexCorners(v);
	uint3 rand;
	float4x3 gvec[3], fv;
	float3x4 grad;

	
	
	fv[0] = v - T[0];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[0] + 0.5, bTiling, RepeatSize))));
	gvec[0][0] = float3(rand.xxx & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[1][0] = float3(rand.yyy & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[2][0] = float3(rand.zzz & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	grad[0][0] = dot(gvec[0][0], fv[0]);
	grad[1][0] = dot(gvec[1][0], fv[0]);
	grad[2][0] = dot(gvec[2][0], fv[0]);

	fv[1] = v - T[1];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[1] + 0.5, bTiling, RepeatSize))));
	gvec[0][1] = float3(rand.xxx & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[1][1] = float3(rand.yyy & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[2][1] = float3(rand.zzz & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	grad[0][1] = dot(gvec[0][1], fv[1]);
	grad[1][1] = dot(gvec[1][1], fv[1]);
	grad[2][1] = dot(gvec[2][1], fv[1]);

	fv[2] = v - T[2];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[2] + 0.5, bTiling, RepeatSize))));
	gvec[0][2] = float3(rand.xxx & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[1][2] = float3(rand.yyy & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[2][2] = float3(rand.zzz & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	grad[0][2] = dot(gvec[0][2], fv[2]);
	grad[1][2] = dot(gvec[1][2], fv[2]);
	grad[2][2] = dot(gvec[2][2], fv[2]);

	fv[3] = v - T[3];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[3] + 0.5, bTiling, RepeatSize))));
	gvec[0][3] = float3(rand.xxx & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[1][3] = float3(rand.yyy & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[2][3] = float3(rand.zzz & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	grad[0][3] = dot(gvec[0][3], fv[3]);
	grad[1][3] = dot(gvec[1][3], fv[3]);
	grad[2][3] = dot(gvec[2][3], fv[3]);

	
	float4 sv = SimplexSmooth(fv);
	float3x4 ds = SimplexDSmooth(fv);

	float3x4 jacobian;
	jacobian[0] = float4(mul(sv, gvec[0]) + mul(ds, grad[0]), dot(sv, grad[0]));
	jacobian[1] = float4(mul(sv, gvec[1]) + mul(ds, grad[1]), dot(sv, grad[1]));
	jacobian[2] = float4(mul(sv, gvec[2]) + mul(ds, grad[2]), dot(sv, grad[2]));

	return jacobian;
}






float ValueNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = RandBBSfloat(seed000) * 2 - 1;
	float rand100 = RandBBSfloat(seed100) * 2 - 1;
	float rand010 = RandBBSfloat(seed010) * 2 - 1;
	float rand110 = RandBBSfloat(seed110) * 2 - 1;
	float rand001 = RandBBSfloat(seed001) * 2 - 1;
	float rand101 = RandBBSfloat(seed101) * 2 - 1;
	float rand011 = RandBBSfloat(seed011) * 2 - 1;
	float rand111 = RandBBSfloat(seed111) * 2 - 1;
	
	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;
	
	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}









float GradientNoise3D_TEX(float3 v, bool bTiling, float RepeatSize)
{
	bTiling = true;
	float3 fv = frac(v);
	float3 iv0 = NoiseTileWrap(floor(v), bTiling, RepeatSize);
	float3 iv1 = NoiseTileWrap(iv0 + 1, bTiling, RepeatSize);

	const int2 ZShear = int2(17, 89);
	
	float2 OffsetA = iv0.z * ZShear;
	float2 OffsetB = OffsetA + ZShear;	
	if (bTiling)						
	{
		OffsetB = iv1.z * ZShear;
	}

	
	float ts = 1 / 128.0f;

	
	float2 TexA0 = (iv0.xy + OffsetA + 0.5f) * ts;
	float2 TexB0 = (iv0.xy + OffsetB + 0.5f) * ts;

	
	float2 TexA1 = TexA0 + ts;	
	float2 TexB1 = TexB0 + ts;
	if (bTiling)				
	{
		TexA1 = (iv1.xy + OffsetA + 0.5f) * ts;
		TexB1 = (iv1.xy + OffsetB + 0.5f) * ts;
	}


	
	float3 A = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA0.y), 0).xyz * 2 - 1;
	float3 B = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA0.y), 0).xyz * 2 - 1;
	float3 C = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA1.y), 0).xyz * 2 - 1;
	float3 D = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA1.y), 0).xyz * 2 - 1;
	float3 E = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB0.y), 0).xyz * 2 - 1;
	float3 F = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB0.y), 0).xyz * 2 - 1;
	float3 G = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB1.y), 0).xyz * 2 - 1;
	float3 H = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB1.y), 0).xyz * 2 - 1;

	float a = dot(A, fv - float3(0, 0, 0));
	float b = dot(B, fv - float3(1, 0, 0));
	float c = dot(C, fv - float3(0, 1, 0));
	float d = dot(D, fv - float3(1, 1, 0));
	float e = dot(E, fv - float3(0, 0, 1));
	float f = dot(F, fv - float3(1, 0, 1));
	float g = dot(G, fv - float3(0, 1, 1));
	float h = dot(H, fv - float3(1, 1, 1));

	float3 Weights = PerlinRamp(frac(float4(fv, 0))).xyz;
	
	float i = lerp(lerp(a, b, Weights.x), lerp(c, d, Weights.x), Weights.y);
	float j = lerp(lerp(e, f, Weights.x), lerp(g, h, Weights.x), Weights.y);

	return lerp(i, j, Weights.z);
}



float FastGradientPerlinNoise3D_TEX(float3 xyz)
{
	
	float Extent = 16;

	
	
	xyz = frac(xyz / (Extent - 1)) * (Extent - 1);

	
	float3 uvw = frac(xyz);
	
	
	float3 p0 = xyz - uvw;

	
	float3 f = PerlinRamp(float4(uvw, 0)).xyz;	
	
	float3 p = p0 + f;
	
	float4 NoiseSample = Texture3DSampleLevel(View_PerlinNoise3DTexture, View_PerlinNoise3DTextureSampler, p / Extent + 0.5f / Extent, 0);		

	
	
	float3 n = NoiseSample.xyz * 255.0f / 127.0f - 1.0f;
	float d = NoiseSample.w * 255.f - 127;
	return dot(xyz, n) - d;
}





float3 VoronoiCornerSample(float3 pos, int Quality)
{
	
	float3 noise = float3(Rand3DPCG16(int3(pos))) / 0xffff - 0.5;

	
	
	if (Quality <= 2)
	{
		return normalize(noise) * 0.2588;
	}

	
	
	if (Quality == 3)
	{
		return normalize(noise) * 0.3090;
	}

	
	return noise;
}








float4 VoronoiCompare(float4 minval, float3 candidate, float3 offset, bool bDistanceOnly)
{
	if (bDistanceOnly)
	{
		return float4(0, 0, 0, min(minval.w, dot(offset, offset)));
	}
	else
	{
		float newdist = dot(offset, offset);
		return newdist > minval.w ? minval : float4(candidate, newdist);
	}
}


float4 VoronoiNoise3D_ALU(float3 v, int Quality, bool bTiling, float RepeatSize, bool bDistanceOnly)
{
	float3 fv = frac(v),  fv2 = frac(v + 0.5);
	float3 iv = floor(v), iv2 = floor(v + 0.5);

	
	float4 mindist = float4(0,0,0,100);
	float3 p, offset;

	
	if (Quality == 3)
	{
		 [unroll( 3 )] for (offset.x = -1; offset.x <= 1; ++offset.x)
		{
			 [unroll( 3 )] for (offset.y = -1; offset.y <= 1; ++offset.y)
			{
				 [unroll( 3 )] for (offset.z = -1; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
				}
			}
		}
	}

	
	else
	{
		 [unroll( 2 )] for (offset.x = 0; offset.x <= 1; ++offset.x)
		{
			 [unroll( 2 )] for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				 [unroll( 2 )] for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);

					
					if (Quality == 2)
					{
						
						p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize) + 467, Quality);
						mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
					}
				}
			}
		}
	}

	
	if (Quality >= 4)
	{
		 [unroll( 2 )] for (offset.x = -1; offset.x <= 2; offset.x += 3)
		{
			 [unroll( 2 )] for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				 [unroll( 2 )] for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					
					p = offset.xyz + VoronoiCornerSample(NoiseTileWrap(iv + offset.xyz, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);

					
					p = offset.yzx + VoronoiCornerSample(NoiseTileWrap(iv + offset.yzx, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);

					
					p = offset.zxy + VoronoiCornerSample(NoiseTileWrap(iv + offset.zxy, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);
				}
			}
		}
	}

	
	return float4(mindist.xyz, sqrt(mindist.w));
}







float3 ComputeSimplexWeights2D(float2 OrthogonalPos, out float2 PosA, out float2 PosB, out float2 PosC)
{
	float2 OrthogonalPosFloor = floor(OrthogonalPos); 
	PosA = OrthogonalPosFloor;
	PosB = PosA + float2(1, 1); 

	float2 LocalPos = OrthogonalPos - OrthogonalPosFloor;

	PosC = PosA + ((LocalPos.x > LocalPos.y) ? float2(1,0) : float2(0,1));

	float b = min(LocalPos.x, LocalPos.y);
	float c = abs(LocalPos.y - LocalPos.x);
	float a = 1.0f - b - c;

	return float3(a, b, c);
}



float4 ComputeSimplexWeights3D(float3 OrthogonalPos, out float3 PosA, out float3 PosB, out float3 PosC, out float3 PosD)
{
	float3 OrthogonalPosFloor = floor(OrthogonalPos);

	PosA = OrthogonalPosFloor;
	PosB = PosA + float3(1, 1, 1);

	OrthogonalPos -= OrthogonalPosFloor;

	float Largest = max(OrthogonalPos.x, max(OrthogonalPos.y, OrthogonalPos.z));
	float Smallest = min(OrthogonalPos.x, min(OrthogonalPos.y, OrthogonalPos.z));

	PosC = PosA + float3(Largest == OrthogonalPos.x, Largest == OrthogonalPos.y, Largest == OrthogonalPos.z);
	PosD = PosA + float3(Smallest != OrthogonalPos.x, Smallest != OrthogonalPos.y, Smallest != OrthogonalPos.z);

	float4 ret;

	float RG = OrthogonalPos.x - OrthogonalPos.y;
	float RB = OrthogonalPos.x - OrthogonalPos.z;
	float GB = OrthogonalPos.y - OrthogonalPos.z;

	ret.b = 
		  min(max(0, RG), max(0, RB))		
		+ min(max(0, -RG), max(0, GB))		
		+ min(max(0, -RB), max(0, -GB));	
	
	ret.a = 
		  min(max(0, -RG), max(0, -RB))		
		+ min(max(0, RG), max(0, -GB))		
		+ min(max(0, RB), max(0, GB));		

	ret.g = Smallest;
	ret.r = 1.0f - ret.g - ret.b - ret.a;

	return ret;
}

float2 GetPerlinNoiseGradientTextureAt(float2 v)
{
	float2 TexA = (v.xy + 0.5f) / 128.0f;

	
	float3 p = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA, 0).xyz * 2 - 1;
	return normalize(p.xy + p.z * 0.33f);
}

float3 GetPerlinNoiseGradientTextureAt(float3 v)
{
	const float2 ZShear = float2(17.0f, 89.0f);

	float2 OffsetA = v.z * ZShear;
	float2 TexA = (v.xy + OffsetA + 0.5f) / 128.0f;

	return Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA , 0).xyz * 2 - 1;
}

float2 SkewSimplex(float2 In)
{
	return In + dot(In, (sqrt(3.0f) - 1.0f) * 0.5f );
}
float2 UnSkewSimplex(float2 In)
{
	return In - dot(In, (3.0f - sqrt(3.0f)) / 6.0f );
}
float3 SkewSimplex(float3 In)
{
	return In + dot(In, 1.0 / 3.0f );
}
float3 UnSkewSimplex(float3 In)
{
	return In - dot(In, 1.0 / 6.0f );
}




float GradientSimplexNoise2D_TEX(float2 EvalPos)
{
	float2 OrthogonalPos = SkewSimplex(EvalPos);

	float2 PosA, PosB, PosC, PosD;
	float3 Weights = ComputeSimplexWeights2D(OrthogonalPos, PosA, PosB, PosC);

	
	float2 A = GetPerlinNoiseGradientTextureAt(PosA);
	float2 B = GetPerlinNoiseGradientTextureAt(PosB);
	float2 C = GetPerlinNoiseGradientTextureAt(PosC);

	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);

	float DistanceWeight;

	DistanceWeight = saturate(0.5f - length2(EvalPos - PosA));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosB));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosC));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;
	
	return 70 * (a + b + c);
}






float SimplexNoise3D_TEX(float3 EvalPos)
{
	float3 OrthogonalPos = SkewSimplex(EvalPos);

	float3 PosA, PosB, PosC, PosD;
	float4 Weights = ComputeSimplexWeights3D(OrthogonalPos, PosA, PosB, PosC, PosD);

	
	float3 A = GetPerlinNoiseGradientTextureAt(PosA);
	float3 B = GetPerlinNoiseGradientTextureAt(PosB);
	float3 C = GetPerlinNoiseGradientTextureAt(PosC);
	float3 D = GetPerlinNoiseGradientTextureAt(PosD);
	
	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);
	PosD = UnSkewSimplex(PosD);

	float DistanceWeight;

	DistanceWeight = saturate(0.6f - length2(EvalPos - PosA));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosB));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosC));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosD));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float d = dot(D, EvalPos - PosD) * DistanceWeight;

	return 32 * (a + b + c + d);
}


float VolumeRaymarch(float3 posPixelWS, float3 posCameraWS)
{
	float ret = 0;
	int cnt = 60;

	[loop] for(int i=0; i < cnt; ++i)
	{
		ret += saturate(FastGradientPerlinNoise3D_TEX(lerp(posPixelWS, posCameraWS, i/(float)cnt) * 0.01) - 0.2f);
	}

	return ret / cnt * (length(posPixelWS - posCameraWS) * 0.001f );
}


#line 741 "/Engine/Private/Common.ush"

  




min16float PhongShadingPow(min16float X, min16float Y)
{
	
	

	

	

	
	
	

	

	
	

	return ClampedPow(X, Y);
}




















Texture2D		LightAttenuationTexture;
SamplerState	LightAttenuationTextureSampler;





float ConvertTangentUnormToSnorm8(float Input)
{
	int IntVal = int(round(Input * 255.0f));
	
	IntVal =  select_internal( IntVal > 127 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 127.0f, -1, 1);
}
float2 ConvertTangentUnormToSnorm8(float2 Input)
{
	int2 IntVal = int2(round(Input * 255.0f));
	
	IntVal =  select_internal( IntVal > 127 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 127.0f, -1, 1);
}
float3 ConvertTangentUnormToSnorm8(float3 Input)
{
	int3 IntVal = int3(round(Input * 255.0f));
	IntVal =  select_internal( IntVal > 127 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 127.0f, -1, 1);
}
float4 ConvertTangentUnormToSnorm8(float4 Input)
{
	int4 IntVal = int4(round(Input * 255.0f));
	
	IntVal =  select_internal( IntVal > 127 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 127.0f, -1, 1);
}
float ConvertTangentUnormToSnorm16(float Input)
{
	int IntVal = int(round(Input * 65535.0f));
	
	IntVal =  select_internal( IntVal > 32767 , IntVal | 0xFFFF8000 , IntVal );
	return clamp(IntVal / 32767.0f, -1, 1);
}
float2 ConvertTangentUnormToSnorm16(float2 Input)
{
	int2 IntVal = int2(round(Input * 65535.0f));
	
	IntVal =  select_internal( IntVal > 32767 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 32767.0f, -1, 1);
}
float3 ConvertTangentUnormToSnorm16(float3 Input)
{
	int3 IntVal = int3(round(Input * 65535.0f));
	IntVal =  select_internal( IntVal > 32767 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 32767.0f, -1, 1);
}
float4 ConvertTangentUnormToSnorm16(float4 Input)
{
	int4 IntVal = int4(round(Input * 65535.0f));
	
	IntVal =  select_internal( IntVal > 32767 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 32767.0f, -1, 1);
}
float ConvertTangentSnormToUnorm8(float Input)
{
	float Res =  select_internal( Input >= 0.0f , Input * 127 , ((Input + 1.0) * 127) + 128 );
	return clamp(Res / 255, 0.0f, 0.99f);
}
float2 ConvertTangentSnormToUnorm8(float2 Input)
{
	float2 Res =  select_internal( Input >= 0.0f , Input * 127 , ((Input + 1.0) * 127) + 128 );
	return clamp(Res / 255, 0.0f, 0.99f);
}
float3 ConvertTangentSnormToUnorm8(float3 Input)
{
	float3 Res =  select_internal( Input >= 0.0f , Input * 127 , ((Input + 1.0) * 127) + 128 );
	return clamp(Res / 255, 0.0f, 0.99f);
}
float4 ConvertTangentSnormToUnorm8(float4 Input)
{
	float4 Res =  select_internal( Input >= 0.0f , Input * 127 , ((Input + 1.0) * 127) + 128 );
	return clamp(Res / 255, 0.0f, 0.99f);
}
float ConvertTangentSnormToUnorm16(float Input)
{
	float Res =  select_internal( Input >= 0.0f , Input * 32767 , ((Input + 1.0) * 32767) + 32768 );
	return clamp(Res / 65535, 0.0f, 0.99f);
}
float2 ConvertTangentSnormToUnorm16(float2 Input)
{
	float2 Res =  select_internal( Input >= 0.0f , Input * 32767 , ((Input + 1.0) * 32767) + 32768 );
	return clamp(Res / 65535, 0.0f, 0.99f);
}
float3 ConvertTangentSnormToUnorm16(float3 Input)
{
	float3 Res =  select_internal( Input >= 0.0f , Input * 32767 , ((Input + 1.0) * 32767) + 32768 );
	return clamp(Res / 65535, 0.0f, 0.99f);
}
float4 ConvertTangentSnormToUnorm16(float4 Input)
{
	float4 Res =  select_internal( Input >= 0.0f , Input * 32767 , ((Input + 1.0) * 32767) + 32768 );
	return clamp(Res / 65535, 0.0f, 0.99f);
}






uint PackUnorm2x16(float2 v)
{
	uint2 sv = uint2(round(clamp(v, 0.0, 1.0) * 65535.0));
	return (sv.x | (sv.y << 16u));
}

uint PackSnorm2x16(float2 v)
{
	uint2 sv = uint2(round(clamp(v, -1.0, 1.0) * 32767.0) + 32767.0);
	return (sv.x | (sv.y << 16u));
}

float2 UnpackUnorm2x16(uint p)
{
	float2 Ret;
	Ret.x = (p & 0xffff) * rcp(65535.0f);
	Ret.y = (p >> 16u) * rcp(65535.0f);
	return Ret;
}

float2 UnpackSnorm2x16(uint p)
{
	float2 Ret;
	Ret.x = clamp((float(p & 0xffff) - 32767.0f) * rcp(32767.0f), -1.0, 1.0);
	Ret.y = clamp((float(p >> 16u) - 32767.0f) * rcp(32767.0f), -1.0, 1.0);
	return Ret;
}

float Square( float x )
{
	return x*x;
}

float2 Square( float2 x )
{
	return x*x;
}

float3 Square( float3 x )
{
	return x*x;
}

float4 Square( float4 x )
{
	return x*x;
}

float Pow2( float x )
{
	return x*x;
}

float2 Pow2( float2 x )
{
	return x*x;
}

float3 Pow2( float3 x )
{
	return x*x;
}

float4 Pow2( float4 x )
{
	return x*x;
}

float Pow3( float x )
{
	return x*x*x;
}

float2 Pow3( float2 x )
{
	return x*x*x;
}

float3 Pow3( float3 x )
{
	return x*x*x;
}

float4 Pow3( float4 x )
{
	return x*x*x;
}

float Pow4( float x )
{
	float xx = x*x;
	return xx * xx;
}

float2 Pow4( float2 x )
{
	float2 xx = x*x;
	return xx * xx;
}

float3 Pow4( float3 x )
{
	float3 xx = x*x;
	return xx * xx;
}

float4 Pow4( float4 x )
{
	float4 xx = x*x;
	return xx * xx;
}

float Pow5( float x )
{
	float xx = x*x;
	return xx * xx * x;
}

float2 Pow5( float2 x )
{
	float2 xx = x*x;
	return xx * xx * x;
}

float3 Pow5( float3 x )
{
	float3 xx = x*x;
	return xx * xx * x;
}

float4 Pow5( float4 x )
{
	float4 xx = x*x;
	return xx * xx * x;
}

float Pow6( float x )
{
	float xx = x*x;
	return xx * xx * xx;
}

float2 Pow6( float2 x )
{
	float2 xx = x*x;
	return xx * xx * xx;
}

float3 Pow6( float3 x )
{
	float3 xx = x*x;
	return xx * xx * xx;
}

float4 Pow6( float4 x )
{
	float4 xx = x*x;
	return xx * xx * xx;
}


min16float AtanFast( min16float x )
{
	
	min16float3 A = x < 1 ? min16float3( x, 0, 1 ) : min16float3( 1/x, 0.5 * PI, -1 );
	return A.y + A.z * ( ( ( -0.130234 * A.x - 0.0954105 ) * A.x + 1.00712 ) * A.x - 0.00001203333 );
}


min16float EncodeLightAttenuation(min16float InColor)
{
	
	
	return sqrt(InColor);
}


min16float4 EncodeLightAttenuation(min16float4 InColor)
{
	return sqrt(InColor);
}


min16float DecodeLightAttenuation(min16float InColor)
{
	return Square(InColor);
}


min16float4 DecodeLightAttenuation(min16float4 InColor)
{
	return Square(InColor);
}


min16float4 RGBTEncode(min16float3 Color)
{
	min16float4 RGBT;
	min16float Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	min16float RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	RGBT.a = Max * rcp(1.0 + Max);
	return RGBT;
}

min16float3 RGBTDecode(min16float4 RGBT)
{
	RGBT.a = RGBT.a * rcp(1.0 - RGBT.a);
	return RGBT.rgb * RGBT.a;
}



min16float4 RGBMEncode( min16float3 Color )
{
	Color *= 1.0 / 64.0;
	
	float4 rgbm;
	rgbm.a = saturate( max( max( Color.r, Color.g ), max( Color.b, 1e-6 ) ) );
	rgbm.a = ceil( rgbm.a * 255.0 ) / 255.0;
	rgbm.rgb = Color / rgbm.a;
	return rgbm;
}

min16float4 RGBMEncodeFast( min16float3 Color )
{
	
	min16float4 rgbm;
	rgbm.a = dot( Color, 255.0 / 64.0 );
	rgbm.a = ceil( rgbm.a );
	rgbm.rgb = Color / rgbm.a;
	rgbm *= min16float4( 255.0 / 64.0, 255.0 / 64.0, 255.0 / 64.0, 1.0 / 255.0 );
	return rgbm;
}

min16float3 RGBMDecode( min16float4 rgbm, min16float MaxValue )
{
	return rgbm.rgb * (rgbm.a * MaxValue);
}

min16float3 RGBMDecode( min16float4 rgbm )
{
	return rgbm.rgb * (rgbm.a * 64.0f);
}

min16float4 RGBTEncode8BPC(min16float3 Color, min16float Range)
{
	min16float Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	Max = min(Max, Range);

	min16float4 RGBT;
	RGBT.a = (Range + 1) / Range *  Max / (1 + Max);

	
	RGBT.a = ceil(RGBT.a*255.0) / 255.0;
	Max = RGBT.a / (1 + 1 / Range - RGBT.a);

	min16float RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	return RGBT;
}

min16float3 RGBTDecode8BPC(min16float4 RGBT, min16float Range)
{
	RGBT.a = RGBT.a / (1 + 1 / Range - RGBT.a);
	return RGBT.rgb * RGBT.a;
}


















float2 CalcScreenUVFromOffsetFraction(float4 ScreenPosition, float2 OffsetFraction)
{
	float2 NDC = ScreenPosition.xy / ScreenPosition.w;
	
	
	
	float2 OffsetNDC = clamp(NDC + OffsetFraction * float2(2, -2), -.999f, .999f);
	return float2(OffsetNDC * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float4 GetPerPixelLightAttenuation(float2 UV)
{
	return DecodeLightAttenuation(Texture2DSampleLevel(LightAttenuationTexture, LightAttenuationTextureSampler, UV, 0));
}




float ConvertFromDeviceZ(float DeviceZ)
{
	
	return DeviceZ * View_InvDeviceZToWorldZTransform[0] + View_InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View_InvDeviceZToWorldZTransform[2] - View_InvDeviceZToWorldZTransform[3]);
}


bool IsOrthoProjection(float4x4 ViewToClip)
{
	return ViewToClip[3][3] >= 1.0f;
}




float ConvertToDeviceZ(float SceneDepth)
{
	[flatten]
	if (IsOrthoProjection(View_ViewToClip))
	{
		
		return SceneDepth * View_ViewToClip[2][2] + View_ViewToClip[3][2];
	}
	else
	{
		
		return 1.0f / ((SceneDepth + View_InvDeviceZToWorldZTransform[3]) * View_InvDeviceZToWorldZTransform[2]);
	}
}

float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float2 SvPositionToBufferUV(float4 SvPosition)
{
	return SvPosition.xy * View_BufferSizeAndInvSize.zw;
}


float3 SvPositionToTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), View_SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


float3 SvPositionToResolvedTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), ResolvedView.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


FLWCVector3 SvPositionToWorld(float4 SvPosition)
{
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);
	return LWCSubtract(TranslatedWorldPosition, GetPrimaryView().PreViewTranslation);
}


float4 SvPositionToScreenPosition(float4 SvPosition)
{
	


	float2 PixelPos = SvPosition.xy - View_ViewRectMin.xy;	

	
	float3 NDCPos = float3( (PixelPos * View_ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);

	
	return float4(NDCPos.xyz, 1) * SvPosition.w;
}


float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;	

	
	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);

	
	return float4(NDCPos.xyz, 1) * SvPosition.w;
}

void SvPositionToResolvedScreenPositionDeriv(float4 SvPosition, float2 PPZ_DDX_DDY, float2 W_DDX_DDY, inout float4 ScreenPosition, inout float4 ScreenPositionDDX, inout float4 ScreenPositionDDY)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;

	
	float4 NDCPos = float4((PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z, 1.0f);
	float4 NDCPosDDX = float4(ResolvedView.ViewSizeAndInvSize.z * 2.0f, 0.0f, PPZ_DDX_DDY.x, 0.0f);
	float4 NDCPosDDY = float4(ResolvedView.ViewSizeAndInvSize.w * 2.0f, 0.0f, PPZ_DDX_DDY.y, 0.0f);

	ScreenPosition = NDCPos * SvPosition.w;
	ScreenPositionDDX = NDCPos * W_DDX_DDY.x + NDCPosDDX * SvPosition.w;
	ScreenPositionDDY = NDCPos * W_DDX_DDY.y + NDCPosDDY * SvPosition.w;
}

float2 SvPositionToViewportUV(float4 SvPosition)
{
	
	float2 PixelPos = SvPosition.xy - View_ViewRectMin.xy;	

	return PixelPos.xy * View_ViewSizeAndInvSize.zw;
}

float2 BufferUVToViewportUV(float2 BufferUV)
{
	float2 PixelPos = BufferUV.xy * View_BufferSizeAndInvSize.xy - View_ViewRectMin.xy;
	return PixelPos.xy * View_ViewSizeAndInvSize.zw;
}

float2 ViewportUVToBufferUV(float2 ViewportUV)
{
	float2 PixelPos = ViewportUV * View_ViewSizeAndInvSize.xy;
	return (PixelPos + View_ViewRectMin.xy) * View_BufferSizeAndInvSize.zw;
}


float2 ViewportUVToScreenPos(float2 ViewportUV)
{
	return float2(2 * ViewportUV.x - 1, 1 - 2 * ViewportUV.y);
}

float2 ScreenPosToViewportUV(float2 ScreenPos)
{
	return float2(0.5 + 0.5 * ScreenPos.x, 0.5 - 0.5 * ScreenPos.y);
}



float3 ScreenToViewPos(float2 ViewportUV, float SceneDepth)
{
	float2 ProjViewPos;

	ProjViewPos.x =  ViewportUV.x * View_ScreenToViewSpace.x  + View_ScreenToViewSpace.z;
	ProjViewPos.y =  ViewportUV.y * View_ScreenToViewSpace.y  + View_ScreenToViewSpace.w;
	return float3(ProjViewPos * SceneDepth, SceneDepth);
}







min16float2 ScreenAlignedPosition( float4 ScreenPosition )
{
	return min16float2(ScreenPositionToBufferUV(ScreenPosition));
}




min16float2 ScreenAlignedUV( min16float2 UV )
{
	return (UV*min16float2(2,-2) + min16float2(-1,1))*View_ScreenPositionScaleBias.xy + View_ScreenPositionScaleBias.wz;
}




min16float2 GetViewportCoordinates(min16float2 InFragmentCoordinates)
{
	return InFragmentCoordinates;
}




min16float4 UnpackNormalMap( min16float4 TextureSample )
{
	


		min16float2 NormalXY = TextureSample.rg;
	

	NormalXY = NormalXY * min16float2(2.0f,2.0f) - min16float2(1.0f,1.0f);
	min16float NormalZ = sqrt( saturate( 1.0f - dot( NormalXY, NormalXY ) ) );
	return min16float4( NormalXY.xy, NormalZ, 1.0f );
}


float AntialiasedTextureMask( Texture2D Tex, SamplerState Sampler, float2 UV, float ThresholdConst, int Channel )
{
	
	min16float4 MaskConst = min16float4(Channel == 0, Channel == 1, Channel == 2, Channel == 3);

	
	const float WidthConst = 1.0f;			
	float InvWidthConst = 1 / WidthConst;

	

	
	
	
	

	

	
	
	
	
	
	
	
	
	

	
	
	float Result;
	{
		
		float Sample1 = dot(MaskConst, Texture2DSample(Tex, Sampler, UV));

		
		float2 TexDD = float2(DDX(Sample1), DDY(Sample1));

		float TexDDLength = max(abs(TexDD.x), abs(TexDD.y)); 
		float Top = InvWidthConst * (Sample1 - ThresholdConst);
		Result = Top / TexDDLength + ThresholdConst;
	}

	Result = saturate(Result);	

	return Result;
}



float Noise3D_Multiplexer(int Function, float3 Position, int Quality, bool bTiling, float RepeatSize)
{
	
	switch(Function)
	{
		case 0:
			return SimplexNoise3D_TEX(Position);
		case 1:
			return GradientNoise3D_TEX(Position, bTiling, RepeatSize);
		case 2:
			return FastGradientPerlinNoise3D_TEX(Position);
		case 3:
			return GradientNoise3D_ALU(Position, bTiling, RepeatSize);
		case 4:
			return ValueNoise3D_ALU(Position, bTiling, RepeatSize);
		default:
			return VoronoiNoise3D_ALU(Position, Quality, bTiling, RepeatSize, true).w * 2. - 1.;
	}
	return 0;
}



min16float MaterialExpressionNoise(float3 Position, float Scale, int Quality, int Function, bool bTurbulence, uint Levels, float OutputMin, float OutputMax, float LevelScale, float FilterWidth, bool bTiling, float RepeatSize)
{
	Position *= Scale;
	FilterWidth *= Scale;

	float Out = 0.0f;
	float OutScale = 1.0f;
	float InvLevelScale = 1.0f / LevelScale;
	
	[loop] for(uint i = 0; i < Levels; ++i)
	{
		
		OutScale *= saturate(1.0 - FilterWidth);

		if(bTurbulence)
		{
			Out += abs(Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize)) * OutScale;
		}
		else
		{
			Out += Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize) * OutScale;
		}

		Position *= LevelScale;
		RepeatSize *= LevelScale;
		OutScale *= InvLevelScale;
		FilterWidth *= LevelScale;
	}

	if(!bTurbulence)
	{
		
		Out = Out * 0.5f + 0.5f;
	}

	
	return lerp(OutputMin, OutputMax, Out);
}





min16float4 MaterialExpressionVectorNoise(min16float3 Position, int Quality, int Function, bool bTiling, float TileSize)
{
	float4 result = float4(0,0,0,1);
	float3x4 Jacobian = JacobianSimplex_ALU(Position, bTiling, TileSize);	

	
	switch (Function)
	{
	case 0:	
		result.xyz = float3(Rand3DPCG16(int3(floor(NoiseTileWrap(Position, bTiling, TileSize))))) / 0xffff;
		break;
	case 1: 
		result.xyz = float3(Jacobian[0].w, Jacobian[1].w, Jacobian[2].w);
		break;
	case 2: 
		result = Jacobian[0];
		break;
	case 3: 
		result.xyz = float3(Jacobian[2][1] - Jacobian[1][2], Jacobian[0][2] - Jacobian[2][0], Jacobian[1][0] - Jacobian[0][1]);
		break;
	default: 
		result = VoronoiNoise3D_ALU(Position, Quality, bTiling, TileSize, false);
		break;
	}
	return result;
}















float2 LineBoxIntersect(float3 RayOrigin, float3 RayEnd, float3 BoxMin, float3 BoxMax)
{
	float3 InvRayDir = 1.0f / (RayEnd - RayOrigin);
	
	
	float3 FirstPlaneIntersections = (BoxMin - RayOrigin) * InvRayDir;
	
	float3 SecondPlaneIntersections = (BoxMax - RayOrigin) * InvRayDir;
	
	float3 ClosestPlaneIntersections = min(FirstPlaneIntersections, SecondPlaneIntersections);
	
	float3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);

	float2 BoxIntersections;
	
	BoxIntersections.x = max(ClosestPlaneIntersections.x, max(ClosestPlaneIntersections.y, ClosestPlaneIntersections.z));
	
	BoxIntersections.y = min(FurthestPlaneIntersections.x, min(FurthestPlaneIntersections.y, FurthestPlaneIntersections.z));
	
	return saturate(BoxIntersections);
}


min16float ComputeDistanceFromBoxToPoint(min16float3 Mins, min16float3 Maxs, min16float3 InPoint)
{
	min16float3 DistancesToMin =  select_internal( InPoint < Mins , abs(InPoint - Mins) , min16float(0.0) );
	min16float3 DistancesToMax =  select_internal( InPoint > Maxs , abs(InPoint - Maxs) , min16float(0.0) );

	
	min16float Distance = dot(DistancesToMin, 1);
	Distance += dot(DistancesToMax, 1);
	return Distance;
}


min16float ComputeSquaredDistanceFromBoxToPoint(min16float3 BoxCenter, min16float3 BoxExtent, min16float3 InPoint)
{
	min16float3 AxisDistances = max(abs(InPoint - BoxCenter) - BoxExtent, 0);
	return dot(AxisDistances, AxisDistances);
}


float ComputeDistanceFromBoxToPointInside(float3 BoxCenter, float3 BoxExtent, float3 InPoint)
{
	float3 DistancesToMin = max(InPoint - BoxCenter + BoxExtent, 0);
	float3 DistancesToMax = max(BoxCenter + BoxExtent - InPoint, 0);
	float3 ClosestDistances = min(DistancesToMin, DistancesToMax);
	return min(ClosestDistances.x, min(ClosestDistances.y, ClosestDistances.z));
}

bool RayHitSphere(float3 RayOrigin, float3 UnitRayDirection, float3 SphereCenter, float SphereRadius)
{
	float3 ClosestPointOnRay = max(0, dot(SphereCenter - RayOrigin, UnitRayDirection)) * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius);
}

bool RaySegmentHitSphere(float3 RayOrigin, float3 UnitRayDirection, float RayLength, float3 SphereCenter, float SphereRadius)
{
	float DistanceAlongRay = dot(SphereCenter - RayOrigin, UnitRayDirection);
	float3 ClosestPointOnRay = DistanceAlongRay * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius) && DistanceAlongRay > -SphereRadius && DistanceAlongRay - SphereRadius < RayLength;
}





float2 RayIntersectSphere(float3 RayOrigin, float3 RayDirection, float4 Sphere)
{
	float3 LocalPosition = RayOrigin - Sphere.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);

	float3 QuadraticCoef;
	QuadraticCoef.x = dot(RayDirection, RayDirection);
	QuadraticCoef.y = 2 * dot(RayDirection, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - Sphere.w * Sphere.w;

	float Discriminant = QuadraticCoef.y * QuadraticCoef.y - 4 * QuadraticCoef.x * QuadraticCoef.z;

	float2 Intersections = -1;

	
	[flatten]
	if (Discriminant >= 0)
	{
		float SqrtDiscriminant = sqrt(Discriminant);
		Intersections = (-QuadraticCoef.y + float2(-1, 1) * SqrtDiscriminant) / (2 * QuadraticCoef.x);
	}

	return Intersections;
}


min16float3 TransformTangentVectorToWorld(min16float3x3 TangentToWorld, min16float3 InTangentVector)
{
	
	
	return mul(InTangentVector, TangentToWorld);
}


min16float3 TransformWorldVectorToTangent(min16float3x3 TangentToWorld, min16float3 InWorldVector)
{
	
	
	return mul(TangentToWorld, InWorldVector);
}

float3 TransformWorldVectorToView(float3 InTangentVector)
{
	
	return mul(InTangentVector, (float3x3)ResolvedView.TranslatedWorldToView);
}


min16float GetBoxPushout(min16float3 Normal,min16float3 Extent)
{
	return dot(abs(Normal * Extent), min16float3(1.0f, 1.0f, 1.0f));
}


void GenerateCoordinateSystem(float3 ZAxis, out float3 XAxis, out float3 YAxis)
{
	if (abs(ZAxis.x) > abs(ZAxis.y))
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.xz, ZAxis.xz));
		XAxis = float3(-ZAxis.z * InverseLength, 0.0f, ZAxis.x * InverseLength);
	}
	else
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.yz, ZAxis.yz));
		XAxis = float3(0.0f, ZAxis.z * InverseLength, -ZAxis.y * InverseLength);
	}

	YAxis = cross(ZAxis, XAxis);
}



	float EvaluateAttributeAtSample(float Attribute,uint SampleIndex) { return Attribute; }
	float2 EvaluateAttributeAtSample(float2 Attribute,uint SampleIndex) { return Attribute; }
	float3 EvaluateAttributeAtSample(float3 Attribute,uint SampleIndex) { return Attribute; }
	float4 EvaluateAttributeAtSample(float4 Attribute,uint SampleIndex) { return Attribute; }



struct FScreenVertexOutput
{
	noperspective float2 UV : TEXCOORD0;
	float4 Position : SV_POSITION;
};




uint4 EncodeVelocityToTexture(float3 V)
{
	



	
	
	float4 EncodedV;
	EncodedV.xy = V.xy * (0.499f * 0.5f) + 32767.0f / 65535.0f;

	
		uint Vz = asuint(V.z);

		EncodedV.z = saturate(float((Vz >> 16) & 0xFFFF) * rcp(65535.0f) + (0.1 / 65535.0f));
		EncodedV.w = saturate(float((Vz >>  0) & 0xFFFF) * rcp(65535.0f) + (0.1 / 65535.0f));
	




	return uint4(EncodedV * 65535.0 + 0.5f);



}

float3 DecodeVelocityFromTexture(uint4 InEncodedV)
{

	float4 EncodedV = InEncodedV / 65535.0f;



	const float InvDiv = 1.0f / (0.499f * 0.5f);

	float3 V;
	V.xy = EncodedV.xy * InvDiv - 32767.0f / 65535.0f * InvDiv;

	
		V.z = asfloat((uint(round(EncodedV.z * 65535.0f)) << 16) | uint(round(EncodedV.w * 65535.0f)));
	



	



	return V;
}


bool GetGIReplaceState()
{



	return false;

}


bool GetNaniteReplaceState()
{



	return false;

}

bool GetRayTracingQualitySwitch()
{



	return false;

}




bool GetPathTracingQualitySwitch() { return false;  }
bool GetPathTracingIsShadow() { return false; }
bool GetPathTracingIsIndirectDiffuse() { return false; }
bool GetPathTracingIsIndirectSpecular() { return false; }
bool GetPathTracingIsIndirectVolume() { return false; }


bool GetLightmassReplaceState()
{



	return false;

}



bool GetRuntimeVirtualTextureOutputSwitch()
{



	return false;

}

struct FWriteToSliceGeometryOutput
{
	FScreenVertexOutput Vertex;
	uint LayerIndex : SV_RenderTargetArrayIndex;
};







void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float2 OutTexCoord)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters_PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters_PosScaleBias.xy)) * DrawRectangleParameters_InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
	OutTexCoord.xy = (DrawRectangleParameters_UVScaleBias.zw + (InTexCoord.xy * DrawRectangleParameters_UVScaleBias.xy)) * DrawRectangleParameters_InvTargetSizeAndTextureSize.zw;
}


void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float4 OutUVAndScreenPos)
{
	DrawRectangle(InPosition, InTexCoord, OutPosition, OutUVAndScreenPos.xy);
	OutUVAndScreenPos.zw = OutPosition.xy;
}


void DrawRectangle(in float4 InPosition, out float4 OutPosition)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters_PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters_PosScaleBias.xy)) * DrawRectangleParameters_InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
}












  float SafeSaturate( float In) {	return saturate(In);}
  float2 SafeSaturate( float2 In) {	return saturate(In);}
  float3 SafeSaturate( float3 In) {	return saturate(In);}
  float4 SafeSaturate( float4 In) {	return saturate(In);}







#line 1893 "/Engine/Private/Common.ush"


  bool IsFinite( float In) {	return (asuint(In) & 0x7F800000) != 0x7F800000; } bool IsPositiveFinite( float In) {	return asuint(In) < 0x7F800000; } float MakeFinite( float In) {    return  select_internal( !IsFinite(In) , 0.0 , In ); } float MakePositiveFinite( float In) {    return  select_internal( !IsPositiveFinite(In) , 0.0 , In ); }
  bool2 IsFinite( float2 In) {	return (asuint(In) & 0x7F800000) != 0x7F800000; } bool2 IsPositiveFinite( float2 In) {	return asuint(In) < 0x7F800000; } float2 MakeFinite( float2 In) {    return  select_internal( !IsFinite(In) , 0.0 , In ); } float2 MakePositiveFinite( float2 In) {    return  select_internal( !IsPositiveFinite(In) , 0.0 , In ); }
  bool3 IsFinite( float3 In) {	return (asuint(In) & 0x7F800000) != 0x7F800000; } bool3 IsPositiveFinite( float3 In) {	return asuint(In) < 0x7F800000; } float3 MakeFinite( float3 In) {    return  select_internal( !IsFinite(In) , 0.0 , In ); } float3 MakePositiveFinite( float3 In) {    return  select_internal( !IsPositiveFinite(In) , 0.0 , In ); }
  bool4 IsFinite( float4 In) {	return (asuint(In) & 0x7F800000) != 0x7F800000; } bool4 IsPositiveFinite( float4 In) {	return asuint(In) < 0x7F800000; } float4 MakeFinite( float4 In) {    return  select_internal( !IsFinite(In) , 0.0 , In ); } float4 MakePositiveFinite( float4 In) {    return  select_internal( !IsPositiveFinite(In) , 0.0 , In ); }





bool GetShadowReplaceState()
{



	return false;

}

bool GetReflectionCapturePassSwitchState()
{
	return View_RenderingReflectionCaptureMask > 0.0f;
}

float IsShadowDepthShader()
{
	return GetShadowReplaceState() ? 1.0f : 0.0f;
}




float DecodePackedTwoChannelValue(float2 PackedHeight)
{
	return PackedHeight.x * 255.0 * 256.0 + PackedHeight.y * 255.0;
}

float DecodeHeightValue(float InValue)
{
	return (InValue - 32768.0) * (1.0f/128.0f);
}

float DecodePackedHeight(float2 PackedHeight)
{
	return DecodeHeightValue(DecodePackedTwoChannelValue(PackedHeight));
}


uint ReverseBitsN(uint Bitfield, const uint BitCount)
{
	return reversebits(Bitfield) >> (32 - BitCount);
}


inline uint Flatten2D(uint2 Coord, uint2 Dim)
{
	return Coord.x + Coord.y * Dim.x;
}


inline uint2 Unflatten2D(uint Index, uint2 Dim)
{
	return uint2(Index % Dim.x, Index / Dim.x);
}

uint2 ZOrder2D(uint Index, const uint SizeLog2)
{
	uint2 Coord = 0; 

	[unroll]
	for (uint i = 0; i < SizeLog2; i++)
	{
		Coord.x |= ((Index >> (2 * i + 0)) & 0x1) << i;
		Coord.y |= ((Index >> (2 * i + 1)) & 0x1) << i;
	}

	return Coord;
}

uint3 ZOrder3D(uint Index, const uint SizeLog2)
{
    uint3 Coord = 0;
    
    [unroll]
    for (uint i = 0; i < SizeLog2; i++)
    {
        Coord.x |= ((Index >> (3 * i + 0)) & 0x1) << i;
        Coord.y |= ((Index >> (3 * i + 1)) & 0x1) << i;
        Coord.z |= ((Index >> (3 * i + 2)) & 0x1) << i;
    }

    return Coord;
}

uint ZOrder3DEncode(uint3 Coord, const uint SizeLog2)
{
    uint Index = 0;
    
    [unroll]
    for (uint i = 0; i < SizeLog2; i++)
    {
        Index |= ((Coord.x >> i) & 0x1) << (3 * i + 0);
        Index |= ((Coord.y >> i) & 0x1) << (3 * i + 1);
        Index |= ((Coord.z >> i) & 0x1) << (3 * i + 2);
    }

    return Index;
}

uint DivideAndRoundUp(uint Dividend, uint Divisor)
{
	return (Dividend + Divisor - 1) / Divisor;
}


uint DivideAndRoundUp(uint Dividend, uint Divisor, uint DivisorAsBitShift)
{
	return (Dividend + Divisor - 1) >> DivisorAsBitShift;
}


struct FPixelShaderIn
{
	
	float4 SvPosition;

	
	uint Coverage;

	
	bool bIsFrontFace;
};

struct FPixelShaderOut
{
	
	float4 MRT[8];
	
	
	uint StrataOutput[3];
	uint StrataTopLayerData;

	
	uint Coverage;

	
	float Depth;
};

















#line 2085 "/Engine/Private/Common.ush"

#line   7 "/Engine/Private/MobileBasePassPixelShader.usf"



























































































	





#line   7 "/Engine/Private/SHCommon.ush"



struct FOneBandSHVector
{
	min16float V;
};


struct FOneBandSHVectorRGB
{
	FOneBandSHVector R;
	FOneBandSHVector G;
	FOneBandSHVector B;
};


struct FTwoBandSHVector
{
	min16float4 V;
};


struct FTwoBandSHVectorRGB
{
	FTwoBandSHVector R;
	FTwoBandSHVector G;
	FTwoBandSHVector B;
};


struct FThreeBandSHVector
{
	min16float4 V0;
	min16float4 V1;
	min16float V2;
};

struct FThreeBandSHVectorRGB
{
	FThreeBandSHVector R;
	FThreeBandSHVector G;
	FThreeBandSHVector B;
};

FTwoBandSHVectorRGB MulSH(FTwoBandSHVectorRGB A, min16float Scalar)
{
	FTwoBandSHVectorRGB Result;
	Result.R.V = A.R.V * Scalar;
	Result.G.V = A.G.V * Scalar;
	Result.B.V = A.B.V * Scalar;
	return Result;
}

FTwoBandSHVectorRGB MulSH(FTwoBandSHVector A, min16float3 Color)
{
	FTwoBandSHVectorRGB Result;
	Result.R.V = A.V * Color.r;
	Result.G.V = A.V * Color.g;
	Result.B.V = A.V * Color.b;
	return Result;
}

FTwoBandSHVector MulSH(FTwoBandSHVector A, min16float Scalar)
{
	FTwoBandSHVector Result;
	Result.V = A.V * Scalar;
	return Result;
}

FThreeBandSHVectorRGB MulSH3(FThreeBandSHVector A, min16float3 Color)
{
	FThreeBandSHVectorRGB Result;
	Result.R.V0 = A.V0 * Color.r;
	Result.R.V1 = A.V1 * Color.r;
	Result.R.V2 = A.V2 * Color.r;
	Result.G.V0 = A.V0 * Color.g;
	Result.G.V1 = A.V1 * Color.g;
	Result.G.V2 = A.V2 * Color.g;
	Result.B.V0 = A.V0 * Color.b;
	Result.B.V1 = A.V1 * Color.b;
	Result.B.V2 = A.V2 * Color.b;
	return Result;
}

FThreeBandSHVector MulSH3(FThreeBandSHVector A, min16float Scalar)
{
	FThreeBandSHVector Result;
	Result.V0 = A.V0 * Scalar;
	Result.V1 = A.V1 * Scalar;
	Result.V2 = A.V2 * Scalar;
	return Result;
}

FTwoBandSHVector AddSH(FTwoBandSHVector A, FTwoBandSHVector B)
{
	FTwoBandSHVector Result = A;
	Result.V += B.V;
	return Result;
}

FTwoBandSHVectorRGB AddSH(FTwoBandSHVectorRGB A, FTwoBandSHVectorRGB B)
{
	FTwoBandSHVectorRGB Result;
	Result.R = AddSH(A.R, B.R);
	Result.G = AddSH(A.G, B.G);
	Result.B = AddSH(A.B, B.B);
	return Result;
}

FThreeBandSHVector AddSH(FThreeBandSHVector A, FThreeBandSHVector B)
{
	FThreeBandSHVector Result = A;
	Result.V0 += B.V0;
	Result.V1 += B.V1;
	Result.V2 += B.V2;
	return Result;
}

FThreeBandSHVectorRGB AddSH(FThreeBandSHVectorRGB A, FThreeBandSHVectorRGB B)
{
	FThreeBandSHVectorRGB Result;
	Result.R = AddSH(A.R, B.R);
	Result.G = AddSH(A.G, B.G);
	Result.B = AddSH(A.B, B.B);
	return Result;
}





min16float DotSH(FTwoBandSHVector A,FTwoBandSHVector B)
{
	min16float Result = dot(A.V, B.V);
	return Result;
}





min16float3 DotSH(FTwoBandSHVectorRGB A,FTwoBandSHVector B)
{
	min16float3 Result = 0;
	Result.r = DotSH(A.R,B);
	Result.g = DotSH(A.G,B);
	Result.b = DotSH(A.B,B);
	return Result;
}

min16float DotSH1(FOneBandSHVector A,FOneBandSHVector B)
{
	min16float Result = A.V * B.V;
	return Result;
}

min16float3 DotSH1(FOneBandSHVectorRGB A,FOneBandSHVector B)
{
	min16float3 Result = 0;
	Result.r = DotSH1(A.R,B);
	Result.g = DotSH1(A.G,B);
	Result.b = DotSH1(A.B,B);
	return Result;
}

min16float DotSH3(FThreeBandSHVector A,FThreeBandSHVector B)
{
	min16float Result = dot(A.V0, B.V0);
	Result += dot(A.V1, B.V1);
	Result += A.V2 * B.V2;
	return Result;
}

min16float3 DotSH3(FThreeBandSHVectorRGB A,FThreeBandSHVector B)
{
	min16float3 Result = 0;
	Result.r = DotSH3(A.R,B);
	Result.g = DotSH3(A.G,B);
	Result.b = DotSH3(A.B,B);
	return Result;
}

FTwoBandSHVector GetLuminance(FTwoBandSHVectorRGB InRGBVector)
{
	FTwoBandSHVector Out;
	Out.V = InRGBVector.R.V * 0.3f + InRGBVector.G.V * 0.59f + InRGBVector.B.V * 0.11f;
	return Out;
}


float3 GetMaximumDirection(FTwoBandSHVector SHVector)
{
	
	float3 MaxDirection = float3(-SHVector.V.w, -SHVector.V.y, SHVector.V.z);
	float Length = length(MaxDirection);
	return MaxDirection / max(Length, .0001f);
}


FOneBandSHVector SHBasisFunction1()
{
	FOneBandSHVector Result;
	
	Result.V = 0.282095f; 
	return Result;
}

FTwoBandSHVector SHBasisFunction(min16float3 InputVector)
{
	FTwoBandSHVector Result;
	
	Result.V.x = 0.282095f; 
	Result.V.y = -0.488603f * InputVector.y;
	Result.V.z = 0.488603f * InputVector.z;
	Result.V.w = -0.488603f * InputVector.x;
	return Result;
}

FThreeBandSHVector SHBasisFunction3(min16float3 InputVector)
{
	FThreeBandSHVector Result;
	
	Result.V0.x = 0.282095f; 
	Result.V0.y = -0.488603f * InputVector.y;
	Result.V0.z = 0.488603f * InputVector.z;
	Result.V0.w = -0.488603f * InputVector.x;

	min16float3 VectorSquared = InputVector * InputVector;
	Result.V1.x = 1.092548f * InputVector.x * InputVector.y;
	Result.V1.y = -1.092548f * InputVector.y * InputVector.z;
	Result.V1.z = 0.315392f * (3.0f * VectorSquared.z - 1.0f);
	Result.V1.w = -1.092548f * InputVector.x * InputVector.z;
	Result.V2 = 0.546274f * (VectorSquared.x - VectorSquared.y);

	return Result;
}


min16float SHAmbientFunction()
{
	return 1 / (2 * sqrt(PI));
}





FOneBandSHVector CalcDiffuseTransferSH1(min16float Exponent)
{
	FOneBandSHVector Result = SHBasisFunction1();

	
	
	min16float L0 =					2 * PI / (1 + 1 * Exponent							);

	
	Result.V *= L0;

	return Result;
}

FTwoBandSHVector CalcDiffuseTransferSH(min16float3 Normal,min16float Exponent)
{
	FTwoBandSHVector Result = SHBasisFunction(Normal);

	
	
	min16float L0 =					2 * PI / (1 + 1 * Exponent							);
	min16float L1 =					2 * PI / (2 + 1 * Exponent							);

	
	Result.V.x *= L0;
	Result.V.yzw *= L1;

	return Result;
}

FThreeBandSHVector CalcDiffuseTransferSH3(min16float3 Normal,min16float Exponent)
{
	FThreeBandSHVector Result = SHBasisFunction3(Normal);

	
	
	min16float L0 =					2 * PI / (1 + 1 * Exponent						);
	min16float L1 =					2 * PI / (2 + 1 * Exponent						);
	min16float L2 = Exponent *		2 * PI / (3 + 4 * Exponent + Exponent * Exponent);
	min16float L3 = (Exponent - 1) *	2 * PI / (8 + 6 * Exponent + Exponent * Exponent);

	







	Result.V0.x *= L0;
	Result.V0.yzw *= L1;
	Result.V1.xyzw *= L2;
	Result.V2 *= L2;

	return Result;
}
 
  


float3 EvaluateSHIrradiance(float3 Direction, float CosThetaAO, FThreeBandSHVectorRGB SH)
{
	float t2 = CosThetaAO * CosThetaAO;
	float t3 = t2 * CosThetaAO;
	float t4 = t2 * t2;

	float c0 = .5f * sqrt(PI) * (1 - t2);
	float c1 = sqrt(PI / 3.0f) * (1 - t3);
	float c2 = sqrt(5.0f * PI) / 16.0f * (3.0f * (1.0f - t4) - 2.0f * (1.0f - t2));

	return max(0.0f, c0 * float3(SH.R.V0.x, SH.G.V0.x, SH.B.V0.x)
		+ c1 * (-float3(SH.R.V0.y, SH.G.V0.y, SH.B.V0.y) * Direction.y + float3(SH.R.V0.z, SH.G.V0.z, SH.B.V0.z) * Direction.z - float3(SH.R.V0.w, SH.G.V0.w, SH.B.V0.w) * Direction.x)
		+ c2 * (float3(SH.R.V1.z, SH.G.V1.z, SH.B.V1.z) * (3.0f * Direction.z * Direction.z - 1.0f)
			+ sqrt(3.0f) * (float3(SH.R.V2, SH.G.V2, SH.B.V2) * (Direction.x * Direction.x - Direction.y * Direction.y)
				+ 2.0f * (float3(SH.R.V1.x, SH.G.V1.x, SH.B.V1.x) * Direction.x * Direction.y - float3(SH.R.V1.y, SH.G.V1.y, SH.B.V1.y) * Direction.y * Direction.z - float3(SH.R.V1.w, SH.G.V1.w, SH.B.V1.w) * Direction.z * Direction.x))));
}
#line 104 "/Engine/Private/MobileBasePassPixelShader.usf"

#line   8 "/Engine/Generated/Material.ush"



#line   7 "/Engine/Private/SceneTexturesCommon.ush"








#line 139 "/Engine/Private/SceneTexturesCommon.ush"





float3 CalcSceneColor(float2 ScreenUV)
{



	return Texture2DSampleLevel(MobileBasePass_SceneTextures_SceneColorTexture, MobileBasePass_SceneTextures_SceneColorTextureSampler, ScreenUV, 0).rgb;

}


float4 CalcFullSceneColor(float2 ScreenUV)
{



	return Texture2DSample(MobileBasePass_SceneTextures_SceneColorTexture, MobileBasePass_SceneTextures_SceneColorTextureSampler,ScreenUV);

}






	
















#line   6 "/Engine/Public/Platform/GL/GLSubpassSupport.ush"





	

	[[vk::input_attachment_index(0)]]
	SubpassInput<float> GENERATED_SubpassDepthFetchAttachment;
	

	[[vk::input_attachment_index(1)]]
	SubpassInput<float4> GENERATED_SubpassFetchAttachment0;
	

	[[vk::input_attachment_index(2)]]
	SubpassInput<float4> GENERATED_SubpassFetchAttachment1;
	

	[[vk::input_attachment_index(3)]]
	SubpassInput<float4> GENERATED_SubpassFetchAttachment2;
	
	
	[[vk::input_attachment_index(4)]]
	SubpassInput<float4> GENERATED_SubpassFetchAttachment3;
	
	
#line  45 "/Engine/Public/Platform/GL/GLSubpassSupport.ush"

#line 185 "/Engine/Private/SceneTexturesCommon.ush"





float LookupDeviceZ( float2 ScreenUV )
{






	return DepthbufferFetchES2();












}


float CalcSceneDepth(float2 ScreenUV)
{



	return ConvertFromDeviceZ(LookupDeviceZ(ScreenUV));

}


#line  11 "/Engine/Generated/Material.ush"

#line   3 "/Engine/Private/EyeAdaptationCommon.ush"





StructuredBuffer<float4> EyeAdaptationBuffer;

float4 EyeAdaptationLookupBuffer(StructuredBuffer<float4> InEyeAdaptation)
{
	return InEyeAdaptation[0];
}



	











float EyeAdaptationLookup()
{



	


		
		
		
		return ResolvedView.PreExposure;
	










}

float EyeAdaptationInverseLookup(float Alpha)
{
	float Adaptation = EyeAdaptationLookup();

	
	
	
	
	
	

	float LerpLogScale = -Alpha * log(Adaptation);
	float Scale = exp(LerpLogScale);
	return Scale;
}

float3 EyeAdaptationInverseLookup(float3 LightValue, float Alpha)
{
	return LightValue * EyeAdaptationInverseLookup(Alpha);
}
#line  12 "/Engine/Generated/Material.ush"


#line   3 "/Engine/Private/SobolRandom.ush"





















uint2 SobolPixel(uint2 Pixel)
{
	
	int3 SobolLo = int3(Pixel & 0xfu, 0);
	int3 SobolHi = int3((Pixel >> 4u) & 0xfu, 0) + int3(16, 0, 0);
	uint Packed = View_SobolSamplingTexture.Load(SobolLo) ^ View_SobolSamplingTexture.Load(SobolHi);
	return uint2(Packed, Packed << 8u) & 0xff00u;
}






uint2 SobolIndex(uint2 Base, int Index, int Bits = 10)
{
	uint2 SobolNumbers[10] = {
		uint2(0x8680u, 0x4c80u), uint2(0xf240u, 0x9240u), uint2(0x8220u, 0x0e20u), uint2(0x4110u, 0x1610u), uint2(0xa608u, 0x7608u),
		uint2(0x8a02u, 0x280au), uint2(0xe204u, 0x9e04u), uint2(0xa400u, 0x4682u), uint2(0xe300u, 0xa74du), uint2(0xb700u, 0x9817u),
	};

	uint2 Result = Base;
	[unroll] for (int b = 0; b < 10 && b < Bits; ++b)
	{
		Result ^= (Index & (1u << b)) ? SobolNumbers[b] : 0;
	}
	return Result;
}


uint2 ComputePixelUniqueSobolRandSample(uint2 PixelCoord)
{
	const uint TemporalBits = 10;
	uint FrameIndexMod1024 = ReverseBitsN(GetPowerOfTwoModulatedFrameIndex(1u << TemporalBits), TemporalBits);

	uint2 SobolBase = SobolPixel(PixelCoord);
	return SobolIndex(SobolBase, FrameIndexMod1024, TemporalBits);
}


float2 SobolIndexToUniformUnitSquare(uint2 SobolRand)
{
	return float2(SobolRand) * rcp(65536.0) + rcp(65536.0 * 2.0);
}
#line  14 "/Engine/Generated/Material.ush"

#line   3 "/Engine/Private/MonteCarlo.ush"










float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;
	
	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * Pow2( TangentZ.y ), -TangentZ.y };

	return float3x3( TangentX, TangentY, TangentZ );
}



float3x3 GetTangentBasisFrisvad(float3 TangentZ)
{
	float3 TangentX;
	float3 TangentY;

	if (TangentZ.z < -0.9999999f)
	{
		TangentX = float3(0, -1, 0);
		TangentY = float3(-1, 0, 0);
	}
	else
	{
		float A = 1.0f / (1.0f + TangentZ.z);
		float B = -TangentZ.x * TangentZ.y * A;
		TangentX = float3(1.0f - TangentZ.x * TangentZ.x * A, B, -TangentZ.x);
		TangentY = float3(B, 1.0f - TangentZ.y * TangentZ.y * A, -TangentZ.y);
	}

	return float3x3( TangentX, TangentY, TangentZ );
}

float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}

float3 WorldToTangent(float3 Vec, float3 TangentZ)
{
	return mul(GetTangentBasis(TangentZ), Vec);
}

float2 Hammersley( uint Index, uint NumSamples, uint2 Random )
{
	float E1 = frac( (float)Index / NumSamples + float( Random.x & 0xffff ) / (1<<16) );
	float E2 = float( reversebits(Index) ^ Random.y ) * 2.3283064365386963e-10;
	return float2( E1, E2 );
}

float2 Hammersley16( uint Index, uint NumSamples, uint2 Random )
{
	float E1 = frac( (float)Index / NumSamples + float( Random.x ) * (1.0 / 65536.0) );
	float E2 = float( ( reversebits(Index) >> 16 ) ^ Random.y ) * (1.0 / 65536.0);
	return float2( E1, E2 );
}


float2 R2Sequence( uint Index )
{
	const float Phi = 1.324717957244746;
	const float2 a = float2( 1.0 / Phi, 1.0 / Pow2(Phi) );
	return frac( a * Index );
}



float2 JitteredR2( uint Index, uint NumSamples, float2 Jitter, float JitterAmount = 0.5 )
{
	const float Phi = 1.324717957244746;
	const float2 a = float2( 1.0 / Phi, 1.0 / Pow2(Phi) );
	const float d0 = 0.76;
	const float i0 = 0.7;

	return frac( a * float(Index) + ( JitterAmount * 0.5 * d0 * sqrt(PI) * rsqrt( float(NumSamples) ) ) * Jitter );
}


float2 JitteredR2( uint Index, float2 Jitter, float JitterAmount = 0.5 )
{
	const float Phi = 1.324717957244746;
	const float2 a = float2( 1.0 / Phi, 1.0 / Pow2(Phi) );
	const float d0 = 0.76;
	const float i0 = 0.7;

	return frac( a * Index + ( JitterAmount * 0.25 * d0 * sqrt(PI) * rsqrt( Index - i0 ) ) * Jitter );
}




float2 UniformSampleDisk( float2 E )
{
	float Theta = 2 * PI * E.x;
	float Radius = sqrt( E.y );
	return Radius * float2( cos( Theta ), sin( Theta ) );
}


float3 ConcentricDiskSamplingHelper(float2 E)
{
	
	float2 p = 2 * E - 0.99999994;
	float2 a = abs(p);
	float Lo = min(a.x, a.y);
	float Hi = max(a.x, a.y);
	float Epsilon = 5.42101086243e-20; 
	float Phi = (PI / 4) * (Lo / (Hi + Epsilon) + 2 * float(a.y >= a.x));
	float Radius = Hi;
	
	const uint SignMask = 0x80000000;
	float2 Disk = asfloat((asuint(float2(cos(Phi), sin(Phi))) & ~SignMask) | (asuint(p) & SignMask));
	
	return float3(Disk, Radius);
}

float2 UniformSampleDiskConcentric( float2 E )
{
	float3 Result = ConcentricDiskSamplingHelper(E);
	return Result.xy * Result.z; 
}



float2 UniformSampleDiskConcentricApprox( float2 E )
{
	float2 sf = E * sqrt(2.0) - sqrt(0.5);	
	float2 sq = sf*sf;
	float root = sqrt(2.0*max(sq.x, sq.y) - min(sq.x, sq.y));
	if (sq.x > sq.y)
	{
		sf.x = sf.x > 0 ? root : -root;
	}
	else
	{
		sf.y = sf.y > 0 ? root : -root;
	}
	return sf;
}





float3 EquiAreaSphericalMapping(float2 UV)
{
	UV = 2 * UV - 1;
	float D = 1 - (abs(UV.x) + abs(UV.y));
	float R = 1 - abs(D);
	
	
	float Phi = R == 0 ? 0 : (PI / 4) * ((abs(UV.y) - abs(UV.x)) / R + 1);
	float F = R * sqrt(2 - R * R);
	return float3(
		F * sign(UV.x) * abs(cos(Phi)),
		F * sign(UV.y) * abs(sin(Phi)),
		sign(D) * (1 - R * R)
	);
}




float2 InverseEquiAreaSphericalMapping(float3 Direction)
{
	
	Direction = normalize(Direction);
	
	float3 AbsDir = abs(Direction);
	float R = sqrt(1 - AbsDir.z);
	float Epsilon = 5.42101086243e-20; 
	float x = min(AbsDir.x, AbsDir.y) / (max(AbsDir.x, AbsDir.y) + Epsilon);

	
	const float t1 = 0.406758566246788489601959989e-5f;
	const float t2 = 0.636226545274016134946890922156f;
	const float t3 = 0.61572017898280213493197203466e-2f;
	const float t4 = -0.247333733281268944196501420480f;
	const float t5 = 0.881770664775316294736387951347e-1f;
	const float t6 = 0.419038818029165735901852432784e-1f;
	const float t7 = -0.251390972343483509333252996350e-1f;

	
	float Phi = t6 + t7 * x;
	Phi = t5 + Phi * x;
	Phi = t4 + Phi * x;
	Phi = t3 + Phi * x;
	Phi = t2 + Phi * x;
	Phi = t1 + Phi * x;

	Phi = (AbsDir.x < AbsDir.y) ? 1 - Phi : Phi;
	float2 UV = float2(R - Phi * R, Phi * R);
	UV = (Direction.z < 0) ? 1 - UV.yx : UV;
	UV = asfloat(asuint(UV) ^ (asuint(Direction.xy) & 0x80000000u));
	return UV * 0.5 + 0.5;
}



float4 UniformSampleSphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = 1 - 2 * E.y;
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;

	float PDF = 1.0 / (4 * PI);

	return float4( H, PDF );
}


float4 UniformSampleHemisphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = E.y;
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;

	float PDF = 1.0 / (2 * PI);

	return float4( H, PDF );
}


float4 CosineSampleHemisphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt(E.y);
	float SinTheta = sqrt(1 - CosTheta * CosTheta);

	float3 H;
	H.x = SinTheta * cos(Phi);
	H.y = SinTheta * sin(Phi);
	H.z = CosTheta;

	float PDF = CosTheta * (1.0 / PI);

	return float4(H, PDF);
}


float4 CosineSampleHemisphereConcentric(float2 E)
{
	float3 Result = ConcentricDiskSamplingHelper(E);
	float SinTheta = Result.z;
	float CosTheta = sqrt(1 - SinTheta * SinTheta);
	return float4(Result.xy * SinTheta, CosTheta, CosTheta * (1.0 / PI));
}


float4 CosineSampleHemisphere( float2 E, float3 N ) 
{
	float3 H = UniformSampleSphere( E ).xyz;
	H = normalize( N + H );

	float PDF = dot(H, N) * (1.0 /  PI);

	return float4( H, PDF );
}

float4 UniformSampleCone( float2 E, float CosThetaMax )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = lerp( CosThetaMax, 1, E.y );
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 L;
	L.x = SinTheta * cos( Phi );
	L.y = SinTheta * sin( Phi );
	L.z = CosTheta;

	float PDF = 1.0 / ( 2 * PI * (1 - CosThetaMax) );

	return float4( L, PDF );
}




float4 UniformSampleConeRobust(float2 E, float SinThetaMax2)
{
	float Phi = 2 * PI * E.x;
	
	
	
	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);

	float CosTheta = 1 - OneMinusCosThetaMax * E.y;
	float SinTheta = sqrt(1 - CosTheta * CosTheta);

	float3 L;
	L.x = SinTheta * cos(Phi);
	L.y = SinTheta * sin(Phi);
	L.z = CosTheta;
	float PDF = 1.0 / (2 * PI * OneMinusCosThetaMax);

	return float4(L, PDF);
}

float UniformConeSolidAngle(float SinThetaMax2)
{
	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);
	return 2 * PI * OneMinusCosThetaMax;
}


float4 UniformSampleConeConcentricRobust(float2 E, float SinThetaMax2)
{
	
	
	
	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);
	float3 Result = ConcentricDiskSamplingHelper(E);
	float SinTheta = Result.z * sqrt(SinThetaMax2);
	float CosTheta = sqrt(1 - SinTheta * SinTheta);

	float3 L = float3(Result.xy * SinTheta, CosTheta);
	float PDF = 1.0 / (2 * PI * OneMinusCosThetaMax);

	return float4(L, PDF);
}


float4 ImportanceSampleGGX( float2 E, float a2 )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt( (1 - E.y) / ( 1 + (a2 - 1) * E.y ) );
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;
	
	float d = ( CosTheta * a2 - CosTheta ) * CosTheta + 1;
	float D = a2 / ( PI*d*d );
	float PDF = D * CosTheta;

	return float4( H, PDF );
}

float VisibleGGXPDF(float3 V, float3 H, float a2)
{
	float NoV = V.z;
	float NoH = H.z;
	float VoH = dot(V, H);

	float d = (NoH * a2 - NoH) * NoH + 1;
	float D = a2 / (PI*d*d);

	float PDF = 2 * VoH * D / (NoV + sqrt(NoV * (NoV - NoV * a2) + a2));
	return PDF;
}

float VisibleGGXPDF_aniso(float3 V, float3 H, float2 Alpha)
{
	float NoV = V.z;
	float NoH = H.z;
	float VoH = dot(V, H);
	float a2 = Alpha.x * Alpha.y;
	float3 Hs = float3(Alpha.y * H.x, Alpha.x * H.y, a2 * NoH);
	float S = dot(Hs, Hs);
	float D = (1.0f / PI) * a2 * Square(a2 / S);
	float LenV = length(float3(V.x * Alpha.x, V.y * Alpha.y, NoV));
	float Pdf = (2 * D * VoH) / (NoV + LenV);
	return Pdf;
}





float4 ImportanceSampleVisibleGGX( float2 DiskE, float a2, float3 V )
{
	
	float a = sqrt(a2);

	
	float3 Vh = normalize( float3( a * V.xy, V.z ) );

	
	
	float LenSq = Vh.x * Vh.x + Vh.y * Vh.y;
	float3 Tangent0 = LenSq > 0 ? float3(-Vh.y, Vh.x, 0) * rsqrt(LenSq) : float3(1, 0, 0);
	float3 Tangent1 = cross(Vh, Tangent0);

	float2 p = DiskE;
	float s = 0.5 + 0.5 * Vh.z;
	p.y = (1 - s) * sqrt( 1 - p.x * p.x ) + s * p.y;

	float3 H;
	H  = p.x * Tangent0;
	H += p.y * Tangent1;
	H += sqrt( saturate( 1 - dot( p, p ) ) ) * Vh;

	
	H = normalize( float3( a * H.xy, max(0.0, H.z) ) );

	return float4(H, VisibleGGXPDF(V, H, a2));
}





float4 ImportanceSampleVisibleGGX_aniso(float2 DiskE, float2 Alpha, float3 V)
{
	
	float3 Vh = normalize(float3(Alpha * V.xy, V.z));

	
	float LenSq = Vh.x * Vh.x + Vh.y * Vh.y;
	float3 Tx = LenSq > 0 ? float3(-Vh.y, Vh.x, 0) * rsqrt(LenSq) : float3(1, 0, 0);
	float3 Ty = cross(Vh, Tx);

	float2 p = DiskE;
	float s = 0.5 + 0.5 * Vh.z;
	p.y = lerp(sqrt(1 - p.x * p.x), p.y, s);

	float3 H = p.x * Tx + p.y * Ty + sqrt(saturate(1 - dot(p, p))) * Vh;

	
	H = normalize(float3(Alpha * H.xy, max(0.0, H.z)));

	return float4(H, VisibleGGXPDF_aniso(V, H, Alpha));
}



float MISWeight( uint Num, float PDF, uint OtherNum, float OtherPDF )
{
	float Weight = Num * PDF;
	float OtherWeight = OtherNum * OtherPDF;
	return Weight * Weight / (Weight * Weight + OtherWeight * OtherWeight);
}


float MISWeightBalanced(float Pdf, float OtherPdf)
{
	
	

	if (Pdf == OtherPdf)
	{
		
		return 0.5f;
	}

	
	
	
	
	
	if (OtherPdf < Pdf)
	{
		float x = OtherPdf / Pdf;
		return 1.0 / (1.0 + x);
	}
	else
	{
		
		float x = Pdf / OtherPdf;
		return 1.0 - 1.0 / (1.0 + x);
	}
}


float MISWeightRobust(float Pdf, float OtherPdf) {
	
	

	
	
	
	
	
	

	if (Pdf == OtherPdf)
	{
		
		return 0.5f;
	}

	
	
	
	
	
	if (OtherPdf < Pdf)
	{
		float x = OtherPdf / Pdf;
		return 1.0 / (1.0 + x * x);
	}
	else
	{
		
		float x = Pdf / OtherPdf;
		return 1.0 - 1.0 / (1.0 + x * x);
	}
}



float RescaleRandomNumber(float RandVal, float LowerBound, float UpperBound)
{
	const float OneMinusEpsilon = 0.99999994; 
	return min((RandVal - LowerBound) / (UpperBound - LowerBound), OneMinusEpsilon);
}




float RayPDFToReflectionRayPDF(float VoH, float RayPDF)
{
	float ReflectPDF = RayPDF / (4.0 * saturate(VoH));

	return ReflectPDF;
}
#line  15 "/Engine/Generated/Material.ush"


#line   3 "/Engine/Private/DepthOfFieldCommon.ush"







float4 DepthOfFieldParams;






float ComputeCircleOfConfusion(float SceneDepth)
{
	
	[flatten] if(SceneDepth > View_DepthOfFieldFocalDistance)
	{
		SceneDepth = View_DepthOfFieldFocalDistance + max(0, SceneDepth - View_DepthOfFieldFocalDistance - View_DepthOfFieldFocalRegion);
	}

	
	float D = SceneDepth;
	
	float F = View_DepthOfFieldFocalLength;
	
	float P = View_DepthOfFieldFocalDistance;
	
	float Aperture = View_DepthOfFieldScale;
		
	 
	
	P *= 0.001f / 100.0f;
	D *= 0.001f / 100.0f;







	
	float CoCRadius = Aperture * F * (P - D) / (D * (P - F));

	return saturate(abs(CoCRadius));
}




float ComputeCircleOfConfusionNorm(float SceneDepth)
{
	
	[flatten] if(SceneDepth > View_DepthOfFieldFocalDistance)
	{
		SceneDepth = View_DepthOfFieldFocalDistance + max(0, SceneDepth - View_DepthOfFieldFocalDistance - View_DepthOfFieldFocalRegion);
	}

	
	min16float TransitionRegion = (SceneDepth < View_DepthOfFieldFocalDistance) ? View_DepthOfFieldNearTransitionRegion : View_DepthOfFieldFarTransitionRegion;

	return saturate(abs(SceneDepth - View_DepthOfFieldFocalDistance) / TransitionRegion);
}






min16float CalcUnfocusedPercentCustomBound(float SceneDepth, float MaxBlurNear, float MaxBlurFar)
{
	min16float MaxUnfocusedPercent = (SceneDepth < View_DepthOfFieldFocalDistance) ? MaxBlurNear : MaxBlurFar;

	min16float Unbound = ComputeCircleOfConfusionNorm(SceneDepth);

	return min(MaxUnfocusedPercent, Unbound);
}
#line  17 "/Engine/Generated/Material.ush"

#line  10 "/Engine/Private/CircleDOFCommon.ush"
float DepthToCoc(float SceneDepth) 
{
	
	float4 CircleDofParams = View_CircleDOFParams;

	

	float Focus = View_DepthOfFieldFocalDistance;
	float Radius = CircleDofParams.x;
	float CocRadius = ((SceneDepth - Focus) / SceneDepth) * Radius;
	float DepthBlurRadius = (1.0 - exp2(-SceneDepth * CircleDofParams.y)) * CircleDofParams.z;
	float ReturnCoc = max(abs(CocRadius), DepthBlurRadius);
	if(CocRadius < 0.0) 
	{
		
		ReturnCoc = -ReturnCoc;
	}
	return ReturnCoc;
}
#line  18 "/Engine/Generated/Material.ush"

#line   3 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"


#line 421 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"

#line  19 "/Engine/Generated/Material.ush"

#line   7 "/Engine/Private/PhysicsFieldSampler.ush"


#line   7 "/Engine/Private/PhysicsFieldShared.ush"






float3 PhysicsField_ComputeSampleUV(in float3 LocalPosition, in int ClipmapIndex, in float ClipmapDistance, in int ClipmapExponent, in int ClipmapCount)
{
	const float ClipmapExtent = 2.0 * ClipmapDistance * pow((float) ClipmapExponent, (float) (ClipmapIndex + 1 - ClipmapCount));
	return LocalPosition / ClipmapExtent + 0.5;
}

int PhysicsField_GetClipmapIndex(in float3 LocalPosition, in float ClipmapDistance, in int ClipmapExponent, in int ClipmapCount)
{
	const int3 ClipmapIndices = floor(log(abs(LocalPosition) / ClipmapDistance) / log((float) (ClipmapExponent)) + int3(ClipmapCount, ClipmapCount, ClipmapCount));
	const int ClipmapIndex = max(max(ClipmapIndices[0], ClipmapIndices[1]), ClipmapIndices[2]);
	
	return clamp(ClipmapIndex, 0, ClipmapCount - 1);
}

void PhysicsField_ComputeVoxelIndices(in int3 PrevCell, in int ClipmapResolution, 
				out int I000, out int I100, out int I010, out int I110, 
				out int I001, out int I101, out int I011, out int I111)
{
	const int3 NextCell = PrevCell + int3(1, 1, 1);
	const int ResolutionSquare = ClipmapResolution * ClipmapResolution;
	
	const int PrevOffsetX = PrevCell.x;
	const int NextOffsetX = NextCell.x;
	
	const int PrevOffsetY = ClipmapResolution * PrevCell.y;
	const int NextOffsetY = ClipmapResolution * NextCell.y;
	
	const int PrevOffsetZ = ResolutionSquare * PrevCell.z;
	const int NextOffsetZ = ResolutionSquare * NextCell.z;
			
	I000 = (PrevOffsetX + PrevOffsetY + PrevOffsetZ);
	I100 = (NextOffsetX + PrevOffsetY + PrevOffsetZ);
	I010 = (PrevOffsetX + NextOffsetY + PrevOffsetZ);
	I110 = (NextOffsetX + NextOffsetY + PrevOffsetZ);
	I001 = (PrevOffsetX + PrevOffsetY + NextOffsetZ);
	I101 = (NextOffsetX + PrevOffsetY + NextOffsetZ);
	I011 = (PrevOffsetX + NextOffsetY + NextOffsetZ);
	I111 = (NextOffsetX + NextOffsetY + NextOffsetZ);
}

float3 PhysicsField_InterpolateVector(in int3 SampleIndex, in float3 SampleFraction, in int ClipmapResolution,  in Buffer<float> ClipmapBuffer, in int ClipmapCount)
{
	int I000 = 0, I100 = 0, I010 = 0, I110 = 0, I001 = 0, I101 = 0, I011 = 0, I111 = 0;
	PhysicsField_ComputeVoxelIndices(SampleIndex, ClipmapResolution, I000, I100, I010, I110, I001, I101, I011, I111);
	
	const int AttributeOffsetY = ClipmapResolution * ClipmapResolution * ClipmapResolution * ClipmapCount;
	const int AttributeOffsetZ = 2 * AttributeOffsetY;
	
	
	const float3 V000 = float3(ClipmapBuffer[I000], ClipmapBuffer[I000 + AttributeOffsetY], ClipmapBuffer[I000 + AttributeOffsetZ]);
	const float3 V100 = float3(ClipmapBuffer[I100], ClipmapBuffer[I100 + AttributeOffsetY], ClipmapBuffer[I100 + AttributeOffsetZ]);
	const float3 V010 = float3(ClipmapBuffer[I010], ClipmapBuffer[I010 + AttributeOffsetY], ClipmapBuffer[I010 + AttributeOffsetZ]);
	const float3 V110 = float3(ClipmapBuffer[I110], ClipmapBuffer[I110 + AttributeOffsetY], ClipmapBuffer[I110 + AttributeOffsetZ]);
	const float3 V001 = float3(ClipmapBuffer[I001], ClipmapBuffer[I001 + AttributeOffsetY], ClipmapBuffer[I001 + AttributeOffsetZ]);
	const float3 V101 = float3(ClipmapBuffer[I101], ClipmapBuffer[I101 + AttributeOffsetY], ClipmapBuffer[I101 + AttributeOffsetZ]);
	const float3 V011 = float3(ClipmapBuffer[I011], ClipmapBuffer[I011 + AttributeOffsetY], ClipmapBuffer[I011 + AttributeOffsetZ]);
	const float3 V111 = float3(ClipmapBuffer[I111], ClipmapBuffer[I111 + AttributeOffsetY], ClipmapBuffer[I111 + AttributeOffsetZ]);

	
	const float3 V00 = lerp(V000, V100, SampleFraction.x);
	const float3 V01 = lerp(V001, V101, SampleFraction.x);
	const float3 V10 = lerp(V010, V110, SampleFraction.x);
	const float3 V11 = lerp(V011, V111, SampleFraction.x);

	
	const float3 V0 = lerp(V00, V10, SampleFraction.y);
	const float3 V1 = lerp(V01, V11, SampleFraction.y);

	
	return lerp(V0, V1, SampleFraction.z);
}

float PhysicsField_InterpolateScalar(in int3 SampleIndex, in float3 SampleFraction, in int ClipmapResolution,  in Buffer<float> ClipmapBuffer)
{
	int I000 = 0, I100 = 0, I010 = 0, I110 = 0, I001 = 0, I101 = 0, I011 = 0, I111 = 0;
	PhysicsField_ComputeVoxelIndices(SampleIndex, ClipmapResolution, I000, I100, I010, I110, I001, I101, I011, I111);
	
	
	const float V000 = ClipmapBuffer[I000];
	const float V100 = ClipmapBuffer[I100];
	const float V010 = ClipmapBuffer[I010];
	const float V110 = ClipmapBuffer[I110];
	const float V001 = ClipmapBuffer[I001];
	const float V101 = ClipmapBuffer[I101];
	const float V011 = ClipmapBuffer[I011];
	const float V111 = ClipmapBuffer[I111];

	
	const float V00 = lerp(V000, V100, SampleFraction.x);
	const float V01 = lerp(V001, V101, SampleFraction.x);
	const float V10 = lerp(V010, V110, SampleFraction.x);
	const float V11 = lerp(V011, V111, SampleFraction.x);

	
	const float V0 = lerp(V00, V10, SampleFraction.y);
	const float V1 = lerp(V01, V11, SampleFraction.y);

	
	return lerp(V0, V1, SampleFraction.z);
}

void PhysicsField_GetSamplingInfos(in float3 LocalPosition, in int TargetIndex, 
			in float ClipmapDistance, in int ClipmapExponent, in int ClipmapCount, in int ClipmapResolution, out int3 SampleIndex, out float3 SampleFraction)
{
	const int ClipmapIndex = PhysicsField_GetClipmapIndex(LocalPosition, ClipmapDistance, ClipmapExponent, ClipmapCount);
	const float3 SampleUV = PhysicsField_ComputeSampleUV(LocalPosition, ClipmapIndex, ClipmapDistance, ClipmapExponent, ClipmapCount);
			
	float3 SampleVoxel = SampleUV * float3(ClipmapResolution - 1, ClipmapResolution - 1, ClipmapResolution - 1);
	SampleVoxel.z += (ClipmapCount * TargetIndex + ClipmapIndex) * ClipmapResolution;
			
	SampleIndex = floor(SampleVoxel);
	SampleFraction = SampleVoxel - SampleIndex;
}

float3 PhysicsField_SamplePhysicsVectorField(in float3 WorldPosition, in int VectorTarget, in int4 VectorTargets[32], in int TargetCount, in float3 ClipmapCenter,
			in float ClipmapDistance, in int ClipmapExponent, in int ClipmapCount, in int ClipmapResolution, in Buffer<float> ClipmapBuffer)
{
	const float3 LocalPosition = WorldPosition - ClipmapCenter;
	
	float3 FieldValue = float3(0, 0, 0);
	if (VectorTarget != -1 && VectorTarget < 32 && all(abs(LocalPosition) < float3(ClipmapDistance, ClipmapDistance, ClipmapDistance)))
	{
		const int TargetIndex = VectorTargets[VectorTarget].x;
		if (TargetIndex != -1)
		{
			int3 SampleIndex = int3(0, 0, 0);
			float3 SampleFraction = float3(0, 0, 0);
			PhysicsField_GetSamplingInfos(LocalPosition, TargetIndex, ClipmapDistance, ClipmapExponent, ClipmapCount, ClipmapResolution, SampleIndex, SampleFraction);
			
			FieldValue = PhysicsField_InterpolateVector(SampleIndex, SampleFraction, ClipmapResolution, ClipmapBuffer, ClipmapCount);
		}
	}
	return FieldValue;
}

float PhysicsField_SamplePhysicsScalarField(in float3 WorldPosition, in int ScalarTarget, in int4 ScalarTargets[32], in int TargetCount, in float3 ClipmapCenter,
			in float ClipmapDistance, in int ClipmapExponent, in int ClipmapCount, in int ClipmapResolution, in Buffer<float> ClipmapBuffer)
{
	const float3 LocalPosition = WorldPosition - ClipmapCenter;
	
	float FieldValue = 0.0;
	if (ScalarTarget != -1 && ScalarTarget < 32 && all(abs(LocalPosition) < float3(ClipmapDistance, ClipmapDistance, ClipmapDistance)))
	{
		const int TargetIndex = ScalarTargets[ScalarTarget].y;
		if (TargetIndex != -1)
		{
			int3 SampleIndex = int3(0, 0, 0);
			float3 SampleFraction = float3(0, 0, 0);
			PhysicsField_GetSamplingInfos(LocalPosition, TargetIndex, ClipmapDistance, ClipmapExponent, ClipmapCount, ClipmapResolution, SampleIndex, SampleFraction);
		
			FieldValue = PhysicsField_InterpolateScalar(SampleIndex, SampleFraction, ClipmapResolution, ClipmapBuffer);
		}
	}
	return FieldValue;
}

int PhysicsField_SamplePhysicsIntegerField(in float3 WorldPosition, in int IntegerTarget, in int4 IntegerTargets[32], in int TargetCount, in float3 ClipmapCenter,
			in float ClipmapDistance, in int ClipmapExponent, in int ClipmapCount, in int ClipmapResolution, in Buffer<float> ClipmapBuffer)
{
	const float3 LocalPosition = WorldPosition - ClipmapCenter;
	
	int FieldValue = 0.0;
	if (IntegerTarget != -1 && IntegerTarget < 32 && all(abs(LocalPosition) < float3(ClipmapDistance, ClipmapDistance, ClipmapDistance)))
	{
		const int TargetIndex = IntegerTargets[IntegerTarget].z;
		if (TargetIndex != -1)
		{
			int3 SampleIndex = int3(0, 0, 0);
			float3 SampleFraction = float3(0, 0, 0);
			PhysicsField_GetSamplingInfos(LocalPosition, TargetIndex, ClipmapDistance, ClipmapExponent, ClipmapCount, ClipmapResolution, SampleIndex, SampleFraction);
		
			FieldValue = PhysicsField_InterpolateScalar(SampleIndex, SampleFraction, ClipmapResolution, ClipmapBuffer);
		}
	}
	return FieldValue;
}

#line   9 "/Engine/Private/PhysicsFieldSampler.ush"


#line  53 "/Engine/Private/PhysicsFieldSampler.ush"

#line  20 "/Engine/Generated/Material.ush"

#line   3 "/Engine/Private/SceneData.ush"



#line   7 "/Engine/Private/OctahedralCommon.ush"











float2 UnitVectorToOctahedron( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) *  select_internal( N.xy >= 0 , float2(1,1) , float2(-1,-1) );
	}
	return N.xy;
}

float3 OctahedronToUnitVector( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	float t = max( -N.z, 0 );
	N.xy +=  select_internal( N.xy >= 0 , float2(-t, -t) , float2(t, t) );
	return normalize(N);
}

float2 UnitVectorToHemiOctahedron( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	return float2( N.x + N.y, N.x - N.y );
}

float3 HemiOctahedronToUnitVector( float2 Oct )
{
	Oct = float2( Oct.x + Oct.y, Oct.x - Oct.y );
	float3 N = float3( Oct, 2.0 - dot( 1, abs(Oct) ) );
	return normalize(N);
}


uint2 OctahedralMapWrapBorder(uint2 TexelCoord, uint Resolution, uint BorderSize)
{
	if (TexelCoord.x < BorderSize)
	{
		TexelCoord.x = BorderSize - 1 + BorderSize - TexelCoord.x;
		TexelCoord.y = Resolution - 1 - TexelCoord.y;
	}
	if (TexelCoord.x >= Resolution - BorderSize)
	{
		TexelCoord.x = (Resolution - BorderSize) - (TexelCoord.x - (Resolution - BorderSize - 1));
		TexelCoord.y = Resolution - 1 - TexelCoord.y;
	}
	if (TexelCoord.y < BorderSize)
	{
		TexelCoord.y = BorderSize - 1 + BorderSize - TexelCoord.y;
		TexelCoord.x = Resolution - 1 - TexelCoord.x;
	}
	if (TexelCoord.y >= Resolution - BorderSize)
	{
		TexelCoord.y = (Resolution - BorderSize) - (TexelCoord.y - (Resolution - BorderSize - 1));
		TexelCoord.x = Resolution - 1 - TexelCoord.x;
	}

	return TexelCoord - BorderSize;
}



float ComputeSphericalExcess(float3 A, float3 B, float3 C) {
    float CosAB = dot(A, B);
    float SinAB = 1.0f - CosAB * CosAB;
    float CosBC = dot(B, C);
    float SinBC = 1.0f - CosBC * CosBC;
    float CosCA = dot(C, A);
    float CosC = CosCA - CosAB * CosBC;
    float SinC = sqrt(SinAB * SinBC - CosC * CosC);
    float Inv = (1.0f - CosAB) * (1.0f - CosBC);
	return 2.0f * atan2(SinC, sqrt((SinAB * SinBC * (1.0f + CosBC) * (1.0f + CosAB)) / Inv) + CosC);
}


float OctahedralSolidAngle(float2 TexelCoord, float InvResolution)
{
	float3 Direction10 = OctahedronToUnitVector((TexelCoord + float2(.5f, -.5f) * InvResolution) * 2.0f - 1.0f);
	float3 Direction01 = OctahedronToUnitVector((TexelCoord + float2(-.5f, .5f) * InvResolution) * 2.0f - 1.0f);

	float SolidAngle0 = ComputeSphericalExcess(
		OctahedronToUnitVector((TexelCoord + float2(-.5f, -.5f) * InvResolution) * 2.0f - 1.0f), 
		Direction10,
		Direction01);

	float SolidAngle1 = ComputeSphericalExcess(
		OctahedronToUnitVector((TexelCoord + float2(.5f, .5f) * InvResolution) * 2.0f - 1.0f), 
		Direction01,
		Direction10);

	return SolidAngle0 + SolidAngle1;
}
#line   6 "/Engine/Private/SceneData.ush"

#line   3 "/Engine/Shared/LightSceneData.h"












struct FLightSceneData
{
	
	FLWCVector3 WorldPosition;

	
	float InvRadius;

	
	float4 Color;

	
	float FalloffExponent;

	
	float3 Direction;

	
	float SpecularScale;

	
	
	float3 Tangent;

	
	float SourceRadius;

	
	float2 SpotAngles;

	
	float SoftSourceRadius;

	
	float SourceLength;

	
	float RectLightBarnCosAngle;

	
	float RectLightBarnLength;

	
	float2 RectLightAtlasUVOffset;
	float2 RectLightAtlasUVScale;
	float RectLightAtlasMaxLevel;

	float InverseExposureBlend;

	
	uint LightTypeAndShadowMapChannelMaskPacked;
};





#line   7 "/Engine/Private/SceneData.ush"



	



	















	



	












	



	




		
			
		
	




































uint GetDefaultPrimitiveSceneDataFlags()
{
	
	return
		0x1 |
		0x200 |
		0x8000 |
		0x10000 |
		0x20000 |
		0x40000 |
		0x80000 |
		0x100000;
}





























	static const uint InstanceTransformSizeFloat4Count = 3u; 




struct FPrimitiveSceneData
{
	uint		Flags; 
	int			InstanceSceneDataOffset; 
	int			NumInstanceSceneDataEntries;
	int			PersistentPrimitiveIndex;
	uint		SingleCaptureIndex; 
	float3		TilePosition;
	uint		PrimitiveComponentId; 
	FLWCMatrix	LocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	FLWCMatrix	PreviousLocalToWorld;
	FLWCInverseMatrix PreviousWorldToLocal;
	float4x4	WorldToPreviousWorld; 
	float3		InvNonUniformScale;
	float		ObjectBoundsX;
	FLWCVector3	ObjectWorldPosition;
	FLWCVector3	ActorWorldPosition;
	float		ObjectRadius;
	uint		LightmapUVIndex;   
	float3		ObjectOrientation; 
	uint		LightmapDataIndex; 
	float4		NonUniformScale;
	float3		PreSkinnedLocalBoundsMin;
	uint		NaniteResourceID;
	float3		PreSkinnedLocalBoundsMax;
	uint		NaniteHierarchyOffset;
	float3		LocalObjectBoundsMin;
	float		ObjectBoundsY;
	float3		LocalObjectBoundsMax;
	float		ObjectBoundsZ;
	uint		InstancePayloadDataOffset;
	uint		InstancePayloadDataStride; 
	float3		InstanceLocalBoundsCenter;
	float3		InstanceLocalBoundsExtent;
	float3		WireframeColor; 
	float3		LevelColor; 
	uint		PackedNaniteFlags;
	float2 		InstanceDrawDistanceMinMaxSquared;
	float		InstanceWPODisableDistanceSquared;
	uint		NaniteRayTracingDataOffset;
	float		MaxWPODisplacement;
	uint		CustomStencilValueAndMask;
	float4		CustomPrimitiveData[9]; 
};


FPrimitiveSceneData GetPrimitiveDataFromUniformBuffer()
{
	FPrimitiveSceneData PrimitiveData;

	PrimitiveData.Flags								= Primitive_Flags;
	PrimitiveData.InstanceSceneDataOffset			= Primitive_InstanceSceneDataOffset;
	PrimitiveData.NumInstanceSceneDataEntries		= Primitive_NumInstanceSceneDataEntries;
	PrimitiveData.SingleCaptureIndex				= Primitive_SingleCaptureIndex;
	PrimitiveData.TilePosition						= Primitive_TilePosition;
	PrimitiveData.PrimitiveComponentId				= Primitive_PrimitiveComponentId;
	PrimitiveData.LocalToWorld						= MakeLWCMatrix4x3(Primitive_TilePosition, Primitive_LocalToRelativeWorld);
	PrimitiveData.WorldToLocal						= MakeLWCInverseMatrix4x3(Primitive_TilePosition, Primitive_RelativeWorldToLocal);
	PrimitiveData.PreviousLocalToWorld				= MakeLWCMatrix4x3(Primitive_TilePosition, Primitive_PreviousLocalToRelativeWorld);
	PrimitiveData.PreviousWorldToLocal				= MakeLWCInverseMatrix4x3(Primitive_TilePosition, Primitive_PreviousRelativeWorldToLocal);
	PrimitiveData.WorldToPreviousWorld				= Primitive_WorldToPreviousWorld;
	PrimitiveData.InvNonUniformScale				= Primitive_InvNonUniformScale;
	PrimitiveData.ObjectBoundsX						= Primitive_ObjectBoundsX;
	PrimitiveData.ObjectWorldPosition				= MakeLWCVector3(Primitive_TilePosition, Primitive_ObjectRelativeWorldPositionAndRadius.xyz);
	PrimitiveData.ObjectRadius						= Primitive_ObjectRelativeWorldPositionAndRadius.w;
	PrimitiveData.ActorWorldPosition				= MakeLWCVector3(Primitive_TilePosition, Primitive_ActorRelativeWorldPosition);
	PrimitiveData.LightmapUVIndex					= Primitive_LightmapUVIndex;
	PrimitiveData.ObjectOrientation					= Primitive_ObjectOrientation;
	PrimitiveData.LightmapDataIndex					= Primitive_LightmapDataIndex;
	PrimitiveData.NonUniformScale					= Primitive_NonUniformScale;
	PrimitiveData.PreSkinnedLocalBoundsMin			= Primitive_PreSkinnedLocalBoundsMin;
	PrimitiveData.NaniteResourceID					= Primitive_NaniteResourceID;
	PrimitiveData.PreSkinnedLocalBoundsMax			= Primitive_PreSkinnedLocalBoundsMax;
	PrimitiveData.NaniteHierarchyOffset				= Primitive_NaniteHierarchyOffset;
	PrimitiveData.LocalObjectBoundsMin				= Primitive_LocalObjectBoundsMin;
	PrimitiveData.ObjectBoundsY						= Primitive_ObjectBoundsY;
	PrimitiveData.LocalObjectBoundsMax				= Primitive_LocalObjectBoundsMax;
	PrimitiveData.ObjectBoundsZ						= Primitive_ObjectBoundsZ;
	PrimitiveData.InstancePayloadDataOffset			= Primitive_InstancePayloadDataOffset;
	PrimitiveData.InstancePayloadDataStride			= Primitive_InstancePayloadDataStride;
	PrimitiveData.InstanceLocalBoundsCenter			= Primitive_InstanceLocalBoundsCenter;
	PrimitiveData.InstanceLocalBoundsExtent			= Primitive_InstanceLocalBoundsExtent;
	PrimitiveData.WireframeColor					= Primitive_WireframeColor;
	PrimitiveData.LevelColor						= Primitive_LevelColor;
	PrimitiveData.PackedNaniteFlags					= Primitive_PackedNaniteFlags;
	PrimitiveData.InstanceDrawDistanceMinMaxSquared	= Primitive_InstanceDrawDistanceMinMaxSquared;
	PrimitiveData.InstanceWPODisableDistanceSquared	= Primitive_InstanceWPODisableDistanceSquared;
	PrimitiveData.PersistentPrimitiveIndex			= Primitive_PersistentPrimitiveIndex;
	PrimitiveData.NaniteRayTracingDataOffset		= Primitive_NaniteRayTracingDataOffset;
	PrimitiveData.MaxWPODisplacement				= Primitive_MaxWPODisplacement;
	PrimitiveData.CustomStencilValueAndMask			= Primitive_CustomStencilValueAndMask;
	
	[unroll]
	for (int DataIndex = 0; DataIndex < 9; ++DataIndex)
	{
		PrimitiveData.CustomPrimitiveData[DataIndex] = Primitive_CustomPrimitiveData[DataIndex];
	}

	return PrimitiveData;
}

#line 379 "/Engine/Private/SceneData.ush"


FPrimitiveSceneData GetPrimitiveData(uint PrimitiveId)
{
	return GetPrimitiveDataFromUniformBuffer();
}



float GetPrimitive_DeterminantSign_FromFlags(uint Flags)
{
	return CondMask(Flags & 0x40, -1.0f, 1.0f);
}

float GetPrimitive_DeterminantSign(uint PrimitiveId)
{
	return GetPrimitive_DeterminantSign_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}








float GetPrimitive_PerObjectGBufferData_FromFlags(uint Flags)
{
	const float CapsuleRepresentation = CondMask(Flags & 0x100, 1.0f, 0.0f);
	const float CastContactShadow     = CondMask(Flags & 0x200,    1.0f, 0.0f);
	return (2.0f * CapsuleRepresentation + CastContactShadow) / 3.0f;
}

float GetPrimitive_PerObjectGBufferData(uint PrimitiveId)
{
	return GetPrimitive_PerObjectGBufferData_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}








uint GetPrimitive_LightingChannelMask_FromFlags(uint Flags)
{
	const uint Channel0 = CondMask(Flags & 0x800, 1u, 0u);
	const uint Channel1 = CondMask(Flags & 0x1000, 1u, 0u);
	const uint Channel2 = CondMask(Flags & 0x2000, 1u, 0u);
	return (Channel0 | (Channel1 << 1u) | (Channel2 << 2u));
}

uint GetPrimitive_LightingChannelMask(uint PrimitiveId)
{
	return GetPrimitive_LightingChannelMask_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}


















float3 UnpackHitProxyId(uint HitProxyPacked)
{
	
	return float3
	(
		float((HitProxyPacked       ) & 0xFF),
		float((HitProxyPacked >>  8u) & 0xFF),
		float((HitProxyPacked >> 16u) & 0xFF)
	) * (1.0f / 255.0f);
}

struct FInstancePayloadDataOffsets
{
	uint HierarchyOffset;
	uint EditorData;
	uint LocalBounds;
	uint DynamicData;
	uint LightShadowUVBias;
	uint CustomData;
};

struct FInstanceSceneData
{
	FLWCMatrix LocalToWorld;
	FLWCMatrix PrevLocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	float4   NonUniformScale;
	float3   InvNonUniformScale;
	float    DeterminantSign;
	float3   LocalBoundsCenter;
	uint     PrimitiveId;
	uint     RelativeId;
	uint     PayloadDataOffset;
	float3   LocalBoundsExtent;
	uint     LastUpdateSceneFrameNumber;
	uint     NaniteRuntimeResourceID;
	uint     NaniteHierarchyOffset;








	float4   LightMapAndShadowMapUVBias;

	bool     ValidInstance;
	uint     Flags;




};











uint GetGPUSceneFrameNumber()
{



	return View_FrameNumber;

}

float4 LoadInstanceSceneDataElement(uint Index)
{





	return View_InstanceSceneData[Index];

}

float4 LoadInstancePayloadDataElement(uint Index)
{





	return View_InstancePayloadData[Index];

}

float4 LoadInstanceCustomDataElement(FInstanceSceneData SceneData, uint Float4Index)
{








	return (float4)0.0f;
}

float LoadInstanceCustomDataFloat(FInstanceSceneData SceneData, uint FloatIndex)
{






	return 0.0f;

}


void GetHemiOrthoBasis( inout float3 BasisX, inout float3 BasisY, float3 BasisZ )
{
	float A = 1.0f / ( 1.0f + BasisZ.z );
	float B = -BasisZ.x * BasisZ.y * A;
	BasisX = float3( 1.0f - BasisZ.x * BasisZ.x * A, B, -BasisZ.x );
	BasisY = float3( B, 1.0f - BasisZ.y * BasisZ.y * A, -BasisZ.y );
}

uint4 EncodeScaleAndRotation(float3 Scale, float3x3 Axis)
{
	const uint ExpBits			= 8;
	const uint ExpBias			= ( 1u << (ExpBits - 1) ) - 1;
	const uint SignMantissaBits	= 16;
	const uint SignMantissaMask	= (1u << SignMantissaBits) - 1;
	const uint MantissaBits		= SignMantissaBits - 1;
	const float Sqrt2 			= 1.41421356f;

	uint4 Output;

	
	{
		if( Axis[2].z < 0.0f )
		{
			Axis[2] *= -1.0f;
			Scale.z *= -1.0f;
		}

		float2 OctZ = UnitVectorToHemiOctahedron( Axis[2] );

		float3 BasisX, BasisY;
		GetHemiOrthoBasis( BasisX, BasisY, Axis[2] );

		float X = dot(Axis[0], BasisX);
		float Y = dot(Axis[0], BasisY);

		float aX = abs( X );
		float aY = abs( Y );

		bool bSpinIsX = aX < aY;
		float Spin0 = bSpinIsX ? X : Y;
		float Spin1 = bSpinIsX ? Y : X;
		float Sign1 = Spin1 < 0.0f ? -1.0f : 1.0f;
	
		
		Scale.x *= Sign1;
		Spin0	*= Sign1;

		float3 GeneratedY = cross(Axis[2], Axis[0]);
		Scale.y *= dot( Axis[1], GeneratedY ) < 0.0f ? -Sign1 : Sign1;

		
		Output.x  = (((int)round( OctZ.x * 32767.0f ) + 32768) & 0xFFFF) <<  0;
		Output.x |= (((int)round( OctZ.y * 32767.0f ) + 32768) & 0xFFFF) << 16;

		
		
		Output.y  = ((int)round( Spin0 * 16383.0f * Sqrt2 ) + 16384); 
		Output.y |=	bSpinIsX ? (1u << 15) : 0;
	}

	
	{
		float MaxComponent = max3(abs(Scale.x), abs(Scale.y), abs(Scale.z));
		uint MaxComponentExponent = (asuint(MaxComponent) & 0x7f800000u) >> 23;

		
		
		
		uint SharedExp = MaxComponentExponent + 1;

		float ExpScale = asfloat(((127 + ExpBias + MantissaBits - SharedExp) & 0xFFu) << 23);

		if( (uint)round( MaxComponent * ExpScale ) == (1u << MantissaBits) )
		{
			
			SharedExp++;
			ExpScale *= 0.5f;
		}

		Output.z  = (((int)round( Scale.x * ExpScale ) + (1u << MantissaBits)) & 0xFFFFu) <<  0;
		Output.z |= (((int)round( Scale.y * ExpScale ) + (1u << MantissaBits)) & 0xFFFFu) << 16;
		Output.w  = (((int)round( Scale.z * ExpScale ) + (1u << MantissaBits)) & 0xFFFFu) <<  0;
		Output.w |= SharedExp << 16;		
	}

	return Output;
}

uint4 EncodeScaleAndRotation( float3x3 InTransform )
{
	float3 Scale = {
		length(InTransform[0]),
		length(InTransform[1]),
		length(InTransform[2])
	};
	float3x3 Axis = {
		InTransform[0] / Scale.x,
		InTransform[1] / Scale.y,
		InTransform[2] / Scale.z
	};
	return EncodeScaleAndRotation(Scale, Axis);
}

void EncodeTransform( float4x4 InTransform, inout uint4 OutRotationScale, inout float3 OutTranslation )
{
	OutRotationScale = EncodeScaleAndRotation((float3x3)InTransform);
	OutTranslation = InTransform[3].xyz;
}

float4x4 DecodeTransform( uint4 RotationScale, float3 Translation, inout float3 Scale )
{
	float4x4 M = 0.0;
	M[3].xyz = Translation;
	M[3].w = 1.0;

	
	{
		float3 Rotation =
		{
			( RotationScale[0] >>  0 ) & 0xffff,
			( RotationScale[0] >> 16 ) & 0xffff,
			( RotationScale[1] >>  0 ) & 0x7fff
		};

		float2 OctZ  = ( Rotation.xy - 32768 ) * (1.0f / 32767.0f);
		float Spin0  = ( Rotation.z  - 16384 ) * (0.70710678f / 16383.0f);	
		bool bSpinIsX = RotationScale[1] & 0x8000;

		M[2].xyz = HemiOctahedronToUnitVector( OctZ );

		float3 BasisX, BasisY;
		GetHemiOrthoBasis( BasisX, BasisY, M[2].xyz );

		float Spin1 = sqrt( 1.0f - Spin0 * Spin0 );
		float X = bSpinIsX ? Spin0 : Spin1;
		float Y = bSpinIsX ? Spin1 : Spin0;

		M[0].xyz = BasisX * X + BasisY * Y;
		M[1].xyz = cross( M[2].xyz, M[0].xyz );
	}

	
	{
		const uint SignMantissaBits	= 16;
		const uint SignMantissaMask	= (1u << SignMantissaBits) - 1;
		const uint MantissaBits		= SignMantissaBits - 1;













		uint SharedExp = RotationScale[3] >> 16;

		float ExpScale = asfloat( ( SharedExp - MantissaBits ) << 23 );

		uint3 Mantissa =
		{
			RotationScale[2] >> 0,
			RotationScale[2] >> 16,
			RotationScale[3] >> 0
		};
		

		Mantissa &= SignMantissaMask;
		Scale = Mantissa;
		Scale -= 1u << MantissaBits;
		Scale *= ExpScale;

		M[0] *= Scale[0];
		M[1] *= Scale[1];
		M[2] *= Scale[2];
	}

	return M;
}


void UnpackPrimitiveIdAndInstanceFlags(uint PackedPrimitiveIdAndFlags, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	OutPrimitiveId		= BitFieldExtractU32(PackedPrimitiveIdAndFlags, (20u),  0);
	OutInstanceFlags	= BitFieldExtractU32(PackedPrimitiveIdAndFlags, (12u), (20u));	
}

uint PackPrimitiveIdAndInstanceFlags(uint PrimitiveId, uint InstanceFlags)
{
	return (PrimitiveId & ((1u << (20u)) - 1u)) | (InstanceFlags << (20u));
}

void LoadInstancePrimitiveIdAndFlags(uint InstanceId, uint SOAStride, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	const uint PackedPrimitiveIdAndFlags = asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).x);
	UnpackPrimitiveIdAndInstanceFlags(PackedPrimitiveIdAndFlags, OutPrimitiveId, OutInstanceFlags);
}


void UnpackInstanceRelativeIdAndCustomDataCount(uint PackedRelativeIdAndCustomDataCount, inout uint OutRelativeId, inout uint OutCustomDataCount)
{
	OutRelativeId		= BitFieldExtractU32(PackedRelativeIdAndCustomDataCount, (24u),  0);
	OutCustomDataCount	= BitFieldExtractU32(PackedRelativeIdAndCustomDataCount, (8u), (24u));
}

uint PackInstanceRelativeIdAndCustomDataCount(uint RelativeId, uint CustomDataCount)
{
	return (RelativeId & ((1u << (24u)) - 1u)) | (CustomDataCount << (24u));
}

void LoadInstanceRelativeIdAndCustomDataCount(uint InstanceId, uint SOAStride, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	const uint PackedRelativeIdAndCustomDataCount = asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).y);
	UnpackInstanceRelativeIdAndCustomDataCount(PackedRelativeIdAndCustomDataCount, OutPrimitiveId, OutInstanceFlags);
}


float GetInstanceDeterminantSignFromFlags(uint Flags)
{
	
	return CondMask(Flags & 0x1, -1.0f, 1.0f);
}

void SetInstanceDeterminantSignFlag(float Determinant, inout uint Flags)
{
	if (Determinant < 0.0f)
	{
		Flags |= 0x1;
	}
	else
	{
		Flags &= ~0x1;
	}
}


FInstancePayloadDataOffsets GetInstancePayloadDataOffsets(uint PrimitiveId, uint Flags, uint InstanceRelativeId)
{
	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(PrimitiveId);

	const uint PayloadDataRelativeOffset	= InstanceRelativeId * PrimitiveData.InstancePayloadDataStride;
	const uint PayloadDataGlobalOffset		= PayloadDataRelativeOffset + PrimitiveData.InstancePayloadDataOffset;

	const bool bHasHierarchyOffset			= (Flags & 0x20) != 0u;
	const bool bHasLocalBounds				= (Flags & 0x40) != 0u;
	const bool bHasDynamicData				= (Flags & 0x8) != 0u;
	const bool bHasLightShadowUVBias		= (Flags & 0x10) != 0u;
	const bool bHasCustomData				= (Flags & 0x4) != 0u;



	const bool bHasEditorData				= false;


	uint CurOffset = PayloadDataGlobalOffset;

	
	FInstancePayloadDataOffsets Offsets;
	Offsets.HierarchyOffset 	= (0xFFFFFFFFu);
	Offsets.EditorData 			= (0xFFFFFFFFu);
	Offsets.LocalBounds 		= (0xFFFFFFFFu);
	Offsets.DynamicData 		= (0xFFFFFFFFu);
	Offsets.LightShadowUVBias 	= (0xFFFFFFFFu);
	Offsets.CustomData 			= (0xFFFFFFFFu);
	
	
	if (bHasHierarchyOffset)
	{
		Offsets.HierarchyOffset = CurOffset;
	}
	
	if (bHasEditorData)
	{
		Offsets.EditorData = CurOffset;
	}
	
	if (bHasLocalBounds)
	{
		Offsets.LocalBounds = CurOffset;
	}
	CurOffset += CondMask(bHasLocalBounds, 2u, CondMask(bHasHierarchyOffset || bHasEditorData, 1u, 0u));

	if (bHasDynamicData)
	{
		Offsets.DynamicData = CurOffset;
		CurOffset += InstanceTransformSizeFloat4Count;
	}

	if (bHasLightShadowUVBias)
	{
		Offsets.LightShadowUVBias = CurOffset;
		++CurOffset;
	}

	if (bHasCustomData)
	{
		Offsets.CustomData = CurOffset;
	}

	return Offsets;
}

void ComputeInstanceDerivedData(inout FInstanceSceneData InstanceData, float3 TilePosition, float4x4 LocalToRelativeWorld)
{
	
	
	


	
	float3 Scale2;
	Scale2.x = length2(LocalToRelativeWorld[0].xyz);
	Scale2.y = length2(LocalToRelativeWorld[1].xyz);
	Scale2.z = length2(LocalToRelativeWorld[2].xyz);

	InstanceData.InvNonUniformScale							= rsqrt(Scale2);
	InstanceData.NonUniformScale.xyz						= Scale2 * InstanceData.InvNonUniformScale;


	InstanceData.NonUniformScale.w							= max3( InstanceData.NonUniformScale.x, InstanceData.NonUniformScale.y, InstanceData.NonUniformScale.z );
	InstanceData.DeterminantSign							= GetInstanceDeterminantSignFromFlags(InstanceData.Flags);

	float4x4 RelativeWorldToLocal							= LocalToRelativeWorld;
	RelativeWorldToLocal[0].xyz							   *= Pow2(InstanceData.InvNonUniformScale.x);
	RelativeWorldToLocal[1].xyz					           *= Pow2(InstanceData.InvNonUniformScale.y);
	RelativeWorldToLocal[2].xyz					           *= Pow2(InstanceData.InvNonUniformScale.z);
	RelativeWorldToLocal[3].xyz						        = 0.0f;
	RelativeWorldToLocal								    = transpose(RelativeWorldToLocal);
	RelativeWorldToLocal[3].xyz						        = mul(float4(-LocalToRelativeWorld[3].xyz, 0.0f), RelativeWorldToLocal).xyz;
	InstanceData.WorldToLocal								= MakeLWCInverseMatrix(TilePosition, RelativeWorldToLocal);
}


FInstanceSceneData GetInstanceSceneData(uint InstanceId, uint SOAStride, bool bCheckValid = true)
{
	FInstanceSceneData InstanceData = (FInstanceSceneData)0;

	
	
	
	

	
	LoadInstancePrimitiveIdAndFlags(InstanceId, SOAStride, InstanceData.PrimitiveId, InstanceData.Flags);
	InstanceData.ValidInstance = InstanceData.PrimitiveId != ((1u << (20u)) - 1u);

	
	
	
	
	
	
	
	






	
	
	
	
	


	[branch]
	if (!bCheckValid || InstanceData.ValidInstance)
	{
		uint CustomDataCount;
		LoadInstanceRelativeIdAndCustomDataCount(InstanceId, SOAStride, InstanceData.RelativeId, CustomDataCount);

		FInstancePayloadDataOffsets Offsets 	= GetInstancePayloadDataOffsets(InstanceData.PrimitiveId, InstanceData.Flags, InstanceData.RelativeId);
	
	



		InstanceData.LastUpdateSceneFrameNumber	= asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).z);
	



		FPrimitiveSceneData PrimitiveData		= GetPrimitiveData(InstanceData.PrimitiveId);

		float3 TilePosition 									= PrimitiveData.TilePosition;










		float4x4 LocalToRelativeWorld							= transpose(float4x4(LoadInstanceSceneDataElement(1 * SOAStride + InstanceId),
																			LoadInstanceSceneDataElement(2 * SOAStride + InstanceId),
																	                LoadInstanceSceneDataElement(3 * SOAStride + InstanceId),
																	                float4(0.0f, 0.0f, 0.0f, 1.0f)));



		InstanceData.LocalToWorld	= MakeLWCMatrix(TilePosition, LocalToRelativeWorld);
		ComputeInstanceDerivedData(InstanceData, TilePosition, LocalToRelativeWorld);

		InstanceData.NaniteRuntimeResourceID	= PrimitiveData.NaniteResourceID;
		InstanceData.NaniteHierarchyOffset		= PrimitiveData.NaniteHierarchyOffset;

		[branch]
		if (Offsets.HierarchyOffset != (0xFFFFFFFFu))
		{
			const uint HierarchyRootOffset = asuint(LoadInstancePayloadDataElement(Offsets.HierarchyOffset)).x;

			
			InstanceData.NaniteHierarchyOffset += HierarchyRootOffset;
		}

	











		[branch]
		if (Offsets.LocalBounds != (0xFFFFFFFFu))
		{
			InstanceData.LocalBoundsCenter = float3(LoadInstancePayloadDataElement(Offsets.LocalBounds + 0).zw, LoadInstancePayloadDataElement(Offsets.LocalBounds + 1).x);
			InstanceData.LocalBoundsExtent = LoadInstancePayloadDataElement(Offsets.LocalBounds + 1).yzw;
		}
		else
		{
			InstanceData.LocalBoundsCenter = PrimitiveData.InstanceLocalBoundsCenter;
			InstanceData.LocalBoundsExtent = PrimitiveData.InstanceLocalBoundsExtent;
		}

		[branch]
		if (Offsets.DynamicData != (0xFFFFFFFFu))
		{
		





			float4x4 PrevLocalToRelativeWorld	= transpose(float4x4(LoadInstancePayloadDataElement(Offsets.DynamicData + 0),
																 LoadInstancePayloadDataElement(Offsets.DynamicData + 1),
																 LoadInstancePayloadDataElement(Offsets.DynamicData + 2),
																 float4(0.0f, 0.0f, 0.0f, 1.0f)));
		

			float3 TilePosition 				= PrimitiveData.TilePosition;
			InstanceData.PrevLocalToWorld		= MakeLWCMatrix(TilePosition, PrevLocalToRelativeWorld);
		}
		else
		{
			
			
			
			InstanceData.PrevLocalToWorld = MakeLWCMatrix(TilePosition, mul(LocalToRelativeWorld, PrimitiveData.WorldToPreviousWorld));
		}

	
		[branch]
		if (Offsets.LightShadowUVBias != (0xFFFFFFFFu))
		{
			InstanceData.LightMapAndShadowMapUVBias = LoadInstancePayloadDataElement(Offsets.LightShadowUVBias);
		}
	
	}

	return InstanceData;
}

struct FSceneDataIntermediates
{
	uint PrimitiveId;
	uint InstanceId;
	uint ViewIndex;
	
	uint InstanceIdLoadIndex;
	FInstanceSceneData InstanceData;
	FPrimitiveSceneData Primitive;
};






#line 1222 "/Engine/Private/SceneData.ush"

FSceneDataIntermediates GetSceneDataIntermediates()
{
	FSceneDataIntermediates Intermediates = (FSceneDataIntermediates)0;
	
	Intermediates.ViewIndex = 0U;
	Intermediates.PrimitiveId = 0U;
	Intermediates.InstanceId = 0U;
	Intermediates.Primitive = GetPrimitiveDataFromUniformBuffer();
	
	Intermediates.InstanceData.LocalToWorld			= Intermediates.Primitive.LocalToWorld;
	Intermediates.InstanceData.PrevLocalToWorld		= Intermediates.Primitive.PreviousLocalToWorld;
	Intermediates.InstanceData.WorldToLocal			= Intermediates.Primitive.WorldToLocal;
	Intermediates.InstanceData.NonUniformScale		= Intermediates.Primitive.NonUniformScale;
	Intermediates.InstanceData.InvNonUniformScale	= Intermediates.Primitive.InvNonUniformScale;
	Intermediates.InstanceData.DeterminantSign		= GetPrimitive_DeterminantSign_FromFlags(Intermediates.Primitive.Flags);
	Intermediates.InstanceData.LocalBoundsCenter	= (Intermediates.Primitive.LocalObjectBoundsMax + Intermediates.Primitive.LocalObjectBoundsMin) * 0.5f;
	Intermediates.InstanceData.LocalBoundsExtent	= (Intermediates.Primitive.LocalObjectBoundsMax - Intermediates.Primitive.LocalObjectBoundsMin) * 0.5f;
	Intermediates.InstanceData.ValidInstance		= true;
	
	return Intermediates;
}












FLightSceneData GetLightSceneData(int LightId)
{





	return (FLightSceneData)0; 

}
#line  21 "/Engine/Generated/Material.ush"

#line   3 "/Engine/Private/HairShadingCommon.ush"

















struct FHairTransmittanceData
{
	bool bUseLegacyAbsorption;
	bool bUseSeparableR;
	bool bUseBacklit;

	float  OpaqueVisibility;
	float3 LocalScattering;
	float3 GlobalScattering;

	uint ScatteringComponent;
};

FHairTransmittanceData InitHairTransmittanceData(bool bMultipleScatterEnable = true)
{
	FHairTransmittanceData o;
	o.bUseLegacyAbsorption = true;
	o.bUseSeparableR = true;
	o.bUseBacklit = false;

	o.OpaqueVisibility = 1;
	o.LocalScattering = 0;
	o.GlobalScattering = 1;
	o.ScatteringComponent = 0x1u | 0x2u | 0x4u | (bMultipleScatterEnable ? 0x20u : 0);

	return o;
}

FHairTransmittanceData InitHairStrandsTransmittanceData(bool bMultipleScatterEnable = false)
{
	FHairTransmittanceData o = InitHairTransmittanceData(bMultipleScatterEnable);
	o.bUseLegacyAbsorption = false;
	o.bUseBacklit = true;
	return o;
}



 

float3 HairAbsorptionToColor(float3 A, float B=0.3f)
{
	const float b2 = B * B;
	const float b3 = B * b2;
	const float b4 = b2 * b2;
	const float b5 = B * b4;
	const float D = (5.969f - 0.215f * B + 2.532f * b2 - 10.73f * b3 + 5.574f * b4 + 0.245f * b5);
	return exp(-sqrt(A) * D);
}


float3 HairColorToAbsorption(float3 C, float B = 0.3f)
{
	const float b2 = B * B;
	const float b3 = B * b2;
	const float b4 = b2 * b2;
	const float b5 = B * b4;
	const float D = (5.969f - 0.215f * B + 2.532f * b2 - 10.73f * b3 + 5.574f * b4 + 0.245f * b5);
	return Pow2(log(C) / D);
}



float3 GetHairColorFromMelanin(float InMelanin, float InRedness, float3 InDyeColor)
{
	InMelanin = saturate(InMelanin);
	InRedness = saturate(InRedness);
	const float Melanin		= -log(max(1 - InMelanin, 0.0001f));
	const float Eumelanin 	= Melanin * (1 - InRedness);
	const float Pheomelanin = Melanin * InRedness;

	const float3 DyeAbsorption = HairColorToAbsorption(saturate(InDyeColor));
	const float3 Absorption = Eumelanin * float3(0.506f, 0.841f, 1.653f) + Pheomelanin * float3(0.343f, 0.733f, 1.924f);

	return HairAbsorptionToColor(Absorption + DyeAbsorption);
}
#line  22 "/Engine/Generated/Material.ush"

#line   3 "/Engine/Private/HairStrands/HairCardsAttributeCommon.ush"


#line 152 "/Engine/Private/HairStrands/HairCardsAttributeCommon.ush"
#line  23 "/Engine/Generated/Material.ush"

#line   3 "/Engine/Private/HairStrands/HairStrandsAttributeCommon.ush"


#line   3 "/Engine/Private/HairStrands/HairStrandsVertexFactoryCommon.ush"


#line   8 "/Engine/Shared/HairStrandsDefinitions.h"






























#line   5 "/Engine/Private/HairStrands/HairStrandsVertexFactoryCommon.ush"











struct FHairControlPoint
{
	float3 Position;
	float  WorldRadius;
	float  UCoord;
	uint   Type;
};

uint4 PackHairControlPoint(
	FHairControlPoint CP,
	float3 InVF_PositionOffset,
	float InVF_Radius)
{
	uint PackedAttribute =  (uint(clamp(CP.UCoord * 0xFFu, 0u, 0xFFu)) << 8) |
							(uint(clamp((CP.WorldRadius / InVF_Radius) * 63u, 0u, 63u)) << 2u) |
							(CP.Type & 0x3);
	return uint4(f32tof16(CP.Position - InVF_PositionOffset), PackedAttribute);
}

FHairControlPoint UnpackHairControlPoint(
	uint4 InPackedData,
	float3 InVF_PositionOffset,
	float InVF_Radius,
	float InVF_RootScale,
	float InVF_TipScale)
{
	const uint PackedAlpha	= asuint(InPackedData.a);

	FHairControlPoint Out = (FHairControlPoint)0;
	Out.Position	= f16tof32(InPackedData.xyz) + InVF_PositionOffset;
	Out.UCoord		= ((PackedAlpha & 0xFF00) >> 8) / 255.f;
	Out.WorldRadius	= ((PackedAlpha & 0x00FC) >> 2) / 63.f;
	Out.Type		= PackedAlpha & 0x3;

	Out.WorldRadius *= InVF_Radius * lerp(InVF_RootScale, InVF_TipScale, Out.UCoord);

	return Out;	
}

float UnpackHairControlPointCoordU(uint4 InPackedData)
{
	const uint PackedAlpha = asuint(InPackedData.w);
	return ((PackedAlpha & 0xFF00) >> 8) / 255.f;
}

float3 UnpackHairControlPointPosition(uint4 InPackedData, float3 InVF_PositionOffset)
{
	return f16tof32(InPackedData.xyz) + InVF_PositionOffset;
}

uint4 PackHairControlPointPosition(uint4 InPackedData, float3 InNewPosition, float3 InPositionOffset)
{
	return uint4(f32tof16(InNewPosition.xyz - InPositionOffset), InPackedData.w);
}

bool IsValidHairStrandsSegment(const FHairControlPoint CP0, const FHairControlPoint CP1)
{
	return !(CP0.Type == 2 && CP1.Type == 1);
}




float2 UnpackHairRootUV(uint In)
{
	float2 RootUV, RootIndex;
	RootUV.x	= ((In) & 0x7FF) / 2047.f;			
	RootUV.y	= ((In >> 11) & 0x7FF) / 2047.f;	
	RootIndex.x = ((In >> 22) & 0x1F);				
	RootIndex.y = ((In >> 27) & 0x1F);				

	
	RootUV.y = 1.0f - RootUV.y;

	return RootUV = RootUV + RootIndex;
}

float UnpackHairLength(uint In)
{
	return f16tof32(In & 0xFFFF);
}

float UnpackHairSeed(uint In)
{
	return (In & 0xFF) / 255.f;
}

uint UnpackHairClumpID(uint In)
{
	return (In & 0xFFFF);
}

float3 UnpackHairColor(uint In)
{
	float3 Out;
	Out.x = (In       & 0x7FF) / 2047.f;
	Out.y = ((In>>11) & 0x7FF) / 2047.f;
	Out.z = ((In>>22) & 0x3FF) / 1023.f;
	return Out;
}

float UnpackHairRoughness(uint In)
{
	return (In & 0xFF) / 255.f;
}




struct FHairCurve
{
	uint PointIndex;
	uint PointCount;
};

FHairCurve UnpackHairCurve(uint In)
{
	FHairCurve Out = (FHairCurve)0;
	Out.PointIndex = In & 0xFFFFFF;
	Out.PointCount = In >> 24;
	return Out;
}




#line 168 "/Engine/Private/HairStrands/HairStrandsVertexFactoryCommon.ush"
#line   5 "/Engine/Private/HairStrands/HairStrandsAttributeCommon.ush"























uint InternalGetHairStrandsAttributes(uint Index, uint AttributeOffsetInBytes, uint AttributeStrideInBytes, ByteAddressBuffer InAttributeBuffer)
{
	
	const uint Address = AttributeOffsetInBytes + Index * AttributeStrideInBytes;
	const uint Address_4BytesAligned = Address & (~0x3);
	const uint Packed = InAttributeBuffer.Load(Address_4BytesAligned);

	
	const uint ElementIndex = Address - Address_4BytesAligned;
	return Packed >> (8u * ElementIndex);
}

uint InternalGetHairStrandsAttributesPerCurve(uint HairPrimitiveId, uint AttributeOffsetInBytes, uint AttributeStrideInBytes, ByteAddressBuffer InAttributeBuffer, Buffer<uint> InVertexToCurveBuffer)
{
	const uint CurveIndex = InVertexToCurveBuffer[HairPrimitiveId];
	return InternalGetHairStrandsAttributes(CurveIndex, AttributeOffsetInBytes, AttributeStrideInBytes, InAttributeBuffer);
}

uint InternalGetHairStrandsAttributesPerVertex(uint HairPrimitiveId, uint AttributeOffsetInBytes, uint AttributeStrideInBytes, ByteAddressBuffer InAttributeBuffer)
{
	return InternalGetHairStrandsAttributes(HairPrimitiveId, AttributeOffsetInBytes, AttributeStrideInBytes, InAttributeBuffer);
}

float InternalGetHairStrandsCoordU(Buffer<uint4> InPositionBuffer, uint VertexId, float InRadius, float InRootScale, float InTipScale)
{
	return UnpackHairControlPoint(InPositionBuffer[VertexId], float3(0, 0, 0), InRadius, InRootScale, InTipScale).UCoord;
}

float InternalGetHairStrandsWorldRadius(Buffer<uint4> InPositionBuffer, uint VertexId, float InRadius, float InRootScale, float InTipScale)
{
	return UnpackHairControlPoint(InPositionBuffer[VertexId], float3(0, 0, 0), InRadius, InRootScale, InTipScale).WorldRadius;
}

bool IsAttributeValid(uint InOffset)
{
	return InOffset != 0xFFFFFFFF;
}



#line 191 "/Engine/Private/HairStrands/HairStrandsAttributeCommon.ush"
#line  24 "/Engine/Generated/Material.ush"

#line   7 "/Engine/Private/DeferredShadingCommon.ush"


#line   3 "/Engine/Private/ShadingCommon.ush"












































float3 GetShadingModelColor(uint ShadingModelID)
{
	
	
#line  66 "/Engine/Private/ShadingCommon.ush"

	switch(ShadingModelID)
	{
		case 0: return float3(0.1f, 0.1f, 0.2f); 
		case 1: return float3(0.1f, 1.0f, 0.1f); 
		case 2: return float3(1.0f, 0.1f, 0.1f); 
		case 3: return float3(0.6f, 0.4f, 0.1f); 
		case 4: return float3(0.1f, 0.4f, 0.4f); 
		case 5: return float3(0.2f, 0.6f, 0.5f); 
		case 6: return float3(0.2f, 0.2f, 0.8f); 
		case 7: return float3(0.6f, 0.1f, 0.5f);
		case 8: return float3(0.7f, 1.0f, 1.0f);
		case 9: return float3(0.3f, 1.0f, 1.0f);
		case 10: return float3(0.5f, 0.5f, 1.0f);
		case 11: return float3(1.0f, 0.8f, 0.3f);
		case 12: return float3(1.0f, 1.0f, 0.0f);
		default: return float3(1.0f, 1.0f, 1.0f); 
	}

}




bool GetShadingModelRequiresBackfaceLighting(uint ShadingModelID)
{
	return ShadingModelID == 6;
}




float F0ToDielectricSpecular(float F0)
{
	return saturate(F0 / 0.08f);
}

float F0RGBToF0(float3 F0)
{
	return dot(0.3333333.xxx, F0);
}

float F0RGBToDielectricSpecular(float3 F0)
{
	return F0ToDielectricSpecular(F0RGBToF0(F0));
}

min16float DielectricSpecularToF0(min16float Specular)
{
	return 0.08f * Specular;
}


float DielectricF0ToIor(float F0)
{
	return 2.0f / (1.0f - sqrt(min(F0,0.99))) - 1.0f;
}

float DielectricF0RGBToIor(float3 F0)
{
	return DielectricF0ToIor(F0RGBToF0(F0));
}

float DielectricIorToF0(float Ior)
{
	const float F0Sqrt = (Ior-1)/(Ior+1);
	const float F0 = F0Sqrt*F0Sqrt;
	return F0;
}


float  GetF0MicroOcclusionThreshold() { return 0.02f; }
float  F0ToMicroOcclusion(float F0)   { return saturate(50.0 * F0); }
float3 F0ToMicroOcclusion(float3 F0)  { return saturate(50.0 * F0); }

float F0RGBToMicroOcclusion(float3 F0)
{
	return F0ToMicroOcclusion(max(F0.r, max(F0.g, F0.b)));
}

min16float3 ComputeF0(min16float Specular, min16float3 BaseColor, min16float Metallic)
{
	return lerp(DielectricSpecularToF0(Specular).xxx, BaseColor, Metallic.xxx);
}

float3 ComputeF90(float3 F0, float3 EdgeColor, float Metallic)
{
	return lerp(1.0, EdgeColor, Metallic.xxx);
}

float3 ComputeDiffuseAlbedo(float3 BaseColor, float Metallic)
{
	return BaseColor - BaseColor * Metallic;
}

float MakeRoughnessSafe(float Roughness, float MinRoughness=0.001f)
{
	return clamp(Roughness, MinRoughness, 1.0f);
}

float F0ToMetallic(float F0)
{
	
	const float DiamondF0 = 0.24f;
	const float CondutorMinF0 = 0.4f;	
	

	return saturate((F0 - DiamondF0) / (CondutorMinF0 - DiamondF0));
}

float F0RGBToMetallic(float3 F0)
{
	return F0ToMetallic(max(F0.r, max(F0.g, F0.b)));
}





struct FVerticalLayeringInfo
{
	float TransmittanceTopAndBottom;	
	float TransmittanceOnlyBottom;		
	float TransmittanceOnlyTop;			

	float SurfaceBottom;				
	float SurfaceTop;					

	float Coverage;						
	float NoSurface;					
};



FVerticalLayeringInfo GetVerticalLayeringInfo(const float TopCoverage, const float BottomCoverage)
{
	FVerticalLayeringInfo Info;

	Info.TransmittanceTopAndBottom	= TopCoverage * BottomCoverage;
	Info.TransmittanceOnlyBottom	= (1.0f - TopCoverage) * BottomCoverage;
	Info.TransmittanceOnlyTop		= (1.0f - BottomCoverage) * TopCoverage;

	Info.SurfaceBottom				= Info.TransmittanceOnlyBottom;
	Info.SurfaceTop					= TopCoverage;								

	Info.Coverage					= Info.SurfaceTop + Info.SurfaceBottom;		
	Info.NoSurface					= 1.0f - Info.Coverage;

	return Info;
}


#line   9 "/Engine/Private/DeferredShadingCommon.ush"

#line   7 "/Engine/Private/LightAccumulator.ush"







	

 







struct FLightAccumulator
{
	float3 TotalLight;

	
	
	
	float ScatterableLightLuma;

	
	
	
	float3 ScatterableLight;

	
	
	float EstimatedCost;

	
	
	float3 TotalLightDiffuse;
	float3 TotalLightSpecular;

};

struct FDeferredLightingSplit
{
	float4 DiffuseLighting;
	float4 SpecularLighting;
};


void LightAccumulator_AddSplit(inout FLightAccumulator In, float3 DiffuseTotalLight, float3 SpecularTotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{
	
	In.TotalLight += (DiffuseTotalLight + SpecularTotalLight) * CommonMultiplier;

	
	if (bNeedsSeparateSubsurfaceLightAccumulation)
	{
		if (1 == 1)
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0)
			{
				In.ScatterableLightLuma += Luminance(ScatterableLight * CommonMultiplier);
			}
		}
		else if (1 == 2)
		{
			
			In.ScatterableLight += ScatterableLight * CommonMultiplier;
		}
	}

	In.TotalLightDiffuse += DiffuseTotalLight * CommonMultiplier;
	In.TotalLightSpecular += SpecularTotalLight * CommonMultiplier;
}

void LightAccumulator_Add(inout FLightAccumulator In, float3 TotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{
	LightAccumulator_AddSplit(In, TotalLight, 0.0f, ScatterableLight, CommonMultiplier, bNeedsSeparateSubsurfaceLightAccumulation);
}




float4 LightAccumulator_GetResult(FLightAccumulator In)
{
	float4 Ret;

	if (0 == 1)
	{
		
		Ret = 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * In.EstimatedCost;
	}
	else
	{
		Ret = float4(In.TotalLight, 0);

		if (1 == 1 )
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0)
			{
				
				Ret.a = In.ScatterableLightLuma;
			}
		}
		else if (1 == 2)
		{
			
			
			Ret.a = Luminance(In.ScatterableLight);
			
		}
	}

	return Ret;
}


FDeferredLightingSplit LightAccumulator_GetResultSplit(FLightAccumulator In)
{
	float4 RetDiffuse;
	float4 RetSpecular;

	if (0 == 1)
	{
		
		RetDiffuse = 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * In.EstimatedCost;
		RetSpecular = 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * In.EstimatedCost;
	}
	else
	{
		RetDiffuse = float4(In.TotalLightDiffuse, 0);
		RetSpecular = float4(In.TotalLightSpecular, 0);

		if (1 == 1 )
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0)
			{
				
				RetDiffuse.a = In.ScatterableLightLuma;
			}
		}
		else if (1 == 2)
		{
			
			
			RetDiffuse.a = Luminance(In.ScatterableLight);
			
		}
	}

	FDeferredLightingSplit Ret;
	Ret.DiffuseLighting = RetDiffuse;
	Ret.SpecularLighting = RetSpecular;

	return Ret;
}

struct FStrataDeferredLighting
{
	float4 SceneColor;						




};

FStrataDeferredLighting GetInitialisedStrataDeferredLighting()
{
	FStrataDeferredLighting Result = (FStrataDeferredLighting)0;
	return Result;
}

void AccumulateStrataDeferredLighting(inout FStrataDeferredLighting StrataLighting, FLightAccumulator In, bool bDiffuseIsSubsurface, bool bIsToplayer)
{
	FDeferredLightingSplit DiffSpec = LightAccumulator_GetResultSplit(In);

#line 196 "/Engine/Private/LightAccumulator.ush"

	StrataLighting.SceneColor += DiffSpec.DiffuseLighting + DiffSpec.SpecularLighting;

}
#line  10 "/Engine/Private/DeferredShadingCommon.ush"










#line  54 "/Engine/Private/DeferredShadingCommon.ush"





	


float3 RGBToYCoCg( float3 RGB )
{
	float Y  = dot( RGB, float3(  1, 2,  1 ) ) * 0.25;
	float Co = dot( RGB, float3(  2, 0, -2 ) ) * 0.25 + ( 0.5 * 256.0 / 255.0 );
	float Cg = dot( RGB, float3( -1, 2, -1 ) ) * 0.25 + ( 0.5 * 256.0 / 255.0 );
	
	float3 YCoCg = float3( Y, Co, Cg );
	return YCoCg;
}

float3 YCoCgToRGB( float3 YCoCg )
{
	float Y  = YCoCg.x;
	float Co = YCoCg.y - ( 0.5 * 256.0 / 255.0 );
	float Cg = YCoCg.z - ( 0.5 * 256.0 / 255.0 );

	float R = Y + Co - Cg;
	float G = Y + Cg;
	float B = Y - Co - Cg;

	float3 RGB = float3( R, G, B );
	return RGB;
}

float3 Pack1212To888( float2 x )
{
	







	float2 x1212 = floor( x * 4095 );
	float2 High = floor( x1212 / 256 );	
	float2 Low = x1212 - High * 256;	
	float3 x888 = float3( Low, High.x + High.y * 16 );
	return saturate( x888 / 255 );

}

float2 Pack888To1212( float3 x )
{
	







	float3 x888 = floor( x * 255 );
	float High = floor( x888.z / 16 );	
	float Low = x888.z - High * 16;		
	float2 x1212 = x888.xy + float2( Low, High ) * 256;
	return saturate( x1212 / 4095 );

}

float3 EncodeNormal( float3 N )
{
	return N * 0.5 + 0.5;
	
}

float3 DecodeNormal( float3 N )
{
	return N * 2 - 1;
	
}

void EncodeNormal( inout float3 N, out uint Face )
{

	uint Axis = 2;
	if( abs(N.x) >= abs(N.y) && abs(N.x) >= abs(N.z) )
	{
		Axis = 0;
	}
	else if( abs(N.y) > abs(N.z) )
	{
		Axis = 1;
	}
	Face = Axis * 2;






	N = Axis == 0 ? N.yzx : N;
	N = Axis == 1 ? N.xzy : N;
	
	float MaxAbs = 1.0 / sqrt(2.0);

	Face += N.z > 0 ? 0 : 1;
	N.xy *= N.z > 0 ? 1 : -1;
	N.xy = N.xy * (0.5 / MaxAbs) + 0.5;
}

void DecodeNormal( inout float3 N, in uint Face )
{
	uint Axis = Face >> 1;
	
	float MaxAbs = 1.0 / sqrt(2.0);

	N.xy = N.xy * (2 * MaxAbs) - (1 * MaxAbs);
	N.z = sqrt( 1 - dot( N.xy, N.xy ) );

	N = Axis == 0 ? N.zxy : N;
	N = Axis == 1 ? N.xzy : N;
	N *= (Face & 1) ? -1 : 1;
}

float3 EncodeBaseColor(float3 BaseColor)
{
	
	return BaseColor;
}

float3 DecodeBaseColor(float3 BaseColor)
{
	
	return BaseColor;
}

float3 EncodeSubsurfaceColor(float3 SubsurfaceColor)
{
	return sqrt(saturate(SubsurfaceColor));
}


float3 EncodeSubsurfaceProfile(float SubsurfaceProfile)
{
	return float3(SubsurfaceProfile, 0, 0);
}


float SubsurfaceDensityFromOpacity(float Opacity)
{
	return (-0.05f * log(1.0f - min(Opacity, 0.99f)));
}

float EncodeIndirectIrradiance(float IndirectIrradiance)
{
	float L = IndirectIrradiance;
	L *= View_PreExposure; 
	const float LogBlackPoint = 0.00390625;	
	return log2( L + LogBlackPoint ) / 16 + 0.5;
}

float DecodeIndirectIrradiance(float IndirectIrradiance)
{
	
	float LogL = IndirectIrradiance;
	const float LogBlackPoint = 0.00390625;	
	return View_OneOverPreExposure * (exp2( LogL * 16 - 8 ) - LogBlackPoint);	
}

float4 EncodeWorldTangentAndAnisotropy(float3 WorldTangent, float Anisotropy)
{
	return float4(
		EncodeNormal(WorldTangent),
		Anisotropy * 0.5f + 0.5f
		);
}

float ComputeAngleFromRoughness( float Roughness, const float Threshold = 0.04f )
{

	float Angle = 3 * Square( Roughness );





	return Angle;
}

float ComputeRoughnessFromAngle( float Angle, const float Threshold = 0.04f )
{

	float Roughness = sqrt( 0.33333 * Angle );





	return Roughness;
}

float AddAngleToRoughness( float Angle, float Roughness )
{
	return saturate( sqrt( Square( Roughness ) + 0.33333 * Angle ) );
}




float Encode71(float Scalar, uint Mask)
{
	return
		127.0f / 255.0f * saturate(Scalar) +
		128.0f / 255.0f * Mask;
}





float Decode71(float Scalar, out uint Mask)
{
	Mask = (uint)(Scalar > 0.5f);

	return (Scalar - 0.5f * Mask) * 2.0f;
}

float EncodeShadingModelIdAndSelectiveOutputMask(uint ShadingModelId, uint SelectiveOutputMask)
{
	uint Value = (ShadingModelId & 0xF) | SelectiveOutputMask;
	return (float)Value / (float)0xFF;
}

uint DecodeShadingModelId(float InPackedChannel)
{
	return ((uint)round(InPackedChannel * (float)0xFF)) & 0xF;
}

uint DecodeSelectiveOutputMask(float InPackedChannel)
{
	return ((uint)round(InPackedChannel * (float)0xFF)) & ~0xF;
}

bool IsSubsurfaceModel(int ShadingModel)
{
	return ShadingModel == 2 
		|| ShadingModel == 3 
		|| ShadingModel == 5
		|| ShadingModel == 6
		|| ShadingModel == 7
		|| ShadingModel == 9;
}

bool UseSubsurfaceProfile(int ShadingModel)
{
	return ShadingModel == 5 || ShadingModel == 9;
}

bool HasCustomGBufferData(int ShadingModelID)
{
	return ShadingModelID == 2
		|| ShadingModelID == 3
		|| ShadingModelID == 4
		|| ShadingModelID == 5
		|| ShadingModelID == 6
		|| ShadingModelID == 7
		|| ShadingModelID == 8
		|| ShadingModelID == 9;
}

bool HasAnisotropy(int SelectiveOutputMask)
{
	return (SelectiveOutputMask & (1 << 4)) != 0;
}


struct FGBufferData
{
	
	min16float3 WorldNormal;
	
	min16float3 WorldTangent;
	
	min16float3 DiffuseColor;
	
	min16float3 SpecularColor;
	
	min16float3 BaseColor;
	
	min16float Metallic;
	
	min16float Specular;
	
	min16float4 CustomData;
	
	min16float GenericAO;
	
	min16float IndirectIrradiance;
	
	
	min16float4 PrecomputedShadowFactors;
	
	min16float Roughness;
	
	min16float Anisotropy;
	
	min16float GBufferAO;
	
	uint DiffuseIndirectSampleOcclusion;
	
	uint ShadingModelID;
	
	uint SelectiveOutputMask;
	
	min16float PerObjectGBufferData;
	
	min16float CustomDepth;
	
	uint CustomStencil;
	
	
	min16float Depth;
	
	min16float4 Velocity;

	
	min16float3 StoredBaseColor;
	
	min16float StoredSpecular;
	
	min16float StoredMetallic;

	
	min16float Curvature;
};

bool CastContactShadow(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	bool bCastContactShadowBit = PackedAlpha & 1;
	
	bool bShadingModelCastContactShadows = (GBufferData.ShadingModelID != 9);
	return bCastContactShadowBit && bShadingModelCastContactShadows;
}

bool HasDynamicIndirectShadowCasterRepresentation(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	return (PackedAlpha & 2) != 0;
}




bool CheckerFromPixelPos(uint2 PixelPos)
{
	
	
	uint TemporalAASampleIndex = uint(View_TemporalAAParams.x);




	return (uint)(fmod(PixelPos.x + PixelPos.y + TemporalAASampleIndex, 2)) != 0;

}




bool CheckerFromSceneColorUV(float2 UVSceneColor)
{
	
	uint2 PixelPos = uint2(UVSceneColor * View_BufferSizeAndInvSize.xy);

	return CheckerFromPixelPos(PixelPos);
}


#line   3 "/Engine/Private/GBufferHelpers.ush"




#line   3 "/Engine/Private/SceneTextureParameters.ush"





#line   7 "/Engine/Private/GBufferHelpers.ush"



float SquareInline(float X)
{
	return X * X;
}

float3 EncodeNormalHelper(float3 SrcNormal, float QuantizationBias)
{
	return SrcNormal * .5f + .5f;
}

float3 DecodeNormalHelper(float3 SrcNormal)
{
	return SrcNormal * 2.0f - 1.0f;
}


uint EncodeQuantize6(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 63.0f + .5f + QuantizationBias),63u);
}

float DecodeQuantize6(uint Value)
{
	return float(Value) / 63.0f;
}

uint EncodeQuantize6Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 63.0f + .5f + QuantizationBias),63u);
}

float DecodeQuantize6Sqrt(uint Value)
{
	return SquareInline(float(Value) / 63.0f);
}

uint EncodeQuantize5(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 31.0f + .5f + QuantizationBias),31u);
}

float DecodeQuantize5(uint Value)
{
	return float(Value) / 31.0f;
}

uint EncodeQuantize5Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 31.0f + .5f + QuantizationBias),31u);
}

float DecodeQuantize5Sqrt(uint Value)
{
	return SquareInline(float(Value) / 31.0f);
}

uint EncodeQuantize4(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 15.0f + .5f + QuantizationBias),15u);
}

float DecodeQuantize4(uint Value)
{
	return float(Value) / 15.0f;
}

uint EncodeQuantize4Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 15.0f + .5f + QuantizationBias),15u);
}

float DecodeQuantize4Sqrt(uint Value)
{
	return SquareInline(float(Value) / 15.0f);
}


uint EncodeQuantize3(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 7.0f + .5f + QuantizationBias),7u);
}

float DecodeQuantize3(uint Value)
{
	return float(Value) / 7.0f;
}

uint EncodeQuantize3Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 7.0f + .5f + QuantizationBias),7u);
}

float DecodeQuantize3Sqrt(uint Value)
{
	return SquareInline(float(Value) / 7.0f);
}

uint EncodeQuantize2(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 3.0f + .5f + QuantizationBias),3u);
}

float DecodeQuantize2(uint Value)
{
	return float(Value) / 3.0f;
}

uint EncodeQuantize2Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 3.0f + .5f + QuantizationBias),3u);
}

float DecodeQuantize2Sqrt(uint Value)
{
	return SquareInline(float(Value) / 3.0f);
}

uint EncodeQuantize1(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 1.0f + .5f + QuantizationBias),1u);
}

float DecodeQuantize1(uint Value)
{
	return float(Value) / 1.0f;
}

uint EncodeQuantize1Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 1.0f + .5f + QuantizationBias),1u);
}

float DecodeQuantize1Sqrt(uint Value)
{
	return SquareInline(float(Value) / 1.0f);
}


uint3 EncodeQuantize565(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize5(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize6(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize5(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize565(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize5(Value.x);
	Ret.y = DecodeQuantize6(Value.y);
	Ret.z = DecodeQuantize5(Value.z);
	return Ret;
}

uint3 EncodeQuantize565Sqrt(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize5Sqrt(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize6Sqrt(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize5Sqrt(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize565Sqrt(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize5Sqrt(Value.x);
	Ret.y = DecodeQuantize6Sqrt(Value.y);
	Ret.z = DecodeQuantize5Sqrt(Value.z);
	return Ret;
}


uint3 EncodeQuantize444(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize4(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize4(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize4(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize444(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize4(Value.x);
	Ret.y = DecodeQuantize4(Value.y);
	Ret.z = DecodeQuantize4(Value.z);
	return Ret;
}

uint3 EncodeQuantize444Sqrt(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize4Sqrt(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize4Sqrt(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize4Sqrt(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize444Sqrt(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize4Sqrt(Value.x);
	Ret.y = DecodeQuantize4Sqrt(Value.y);
	Ret.z = DecodeQuantize4Sqrt(Value.z);
	return Ret;
}


uint3 EncodeQuantize332(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize3(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize3(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize2(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize332(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize3(Value.x);
	Ret.y = DecodeQuantize3(Value.y);
	Ret.z = DecodeQuantize2(Value.z);
	return Ret;
}

uint3 EncodeQuantize332Sqrt(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize3Sqrt(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize3Sqrt(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize2Sqrt(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize332Sqrt(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize3Sqrt(Value.x);
	Ret.y = DecodeQuantize3Sqrt(Value.y);
	Ret.z = DecodeQuantize2Sqrt(Value.z);
	return Ret;
}


void EnvBRDFApproxFullyRoughHelper(inout float3 DiffuseColor, inout float3 SpecularColor)
{
	
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
	
}

void EnvBRDFApproxFullyRoughHelper(inout float3 DiffuseColor, inout float SpecularColor)
{
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
}








void GBufferPreEncode(inout FGBufferData GBuffer, bool bChecker, float GeometricAARoughness, inout min16float3 OriginalBaseColor, inout min16float OriginalSpecular, inout min16float OriginalMetallic, float QuantizationBias)
{











#line 312 "/Engine/Private/GBufferHelpers.ush"


	GBuffer.DiffuseColor = OriginalBaseColor - OriginalBaseColor * OriginalMetallic;









    
	if (View_RenderingReflectionCaptureMask) 
	
	{
		EnvBRDFApproxFullyRoughHelper(GBuffer.DiffuseColor, GBuffer.SpecularColor);
		
	}






		
		GBuffer.GenericAO = EncodeIndirectIrradiance(GBuffer.IndirectIrradiance * GBuffer.GBufferAO) + QuantizationBias * (1.0 / 255.0);






}



void AdjustBaseColorAndSpecularColorForSubsurfaceProfileLightingCopyHack(inout float3 BaseColor, inout float3 SpecularColor, inout float Specular, bool bChecker)
{





	const bool bCheckerboardRequired = View_bSubsurfacePostprocessEnabled > 0 && View_bCheckerboardSubsurfaceProfileRendering > 0;
	BaseColor = View_bSubsurfacePostprocessEnabled ? float3(1, 1, 1) : BaseColor;

	if (bCheckerboardRequired)
	{
		

		
		BaseColor = bChecker;
		
		SpecularColor *= !bChecker;
		Specular *= !bChecker;
	}
}


	


void GBufferPostDecode(inout FGBufferData Ret, bool bChecker, bool bGetNormalizedNormal)
{
	Ret.CustomData = HasCustomGBufferData(Ret.ShadingModelID) ? Ret.CustomData : 0.0f;

	Ret.PrecomputedShadowFactors = !(Ret.SelectiveOutputMask & 0x2) ? Ret.PrecomputedShadowFactors : ((Ret.SelectiveOutputMask & 0x4) ? 0.0f : 1.0f);
	Ret.Velocity = !(Ret.SelectiveOutputMask & 0x8) ? Ret.Velocity : 0.0f;
	bool bHasAnisotropy = (Ret.SelectiveOutputMask & 0x1);

	Ret.StoredBaseColor = Ret.BaseColor;
	Ret.StoredMetallic = Ret.Metallic;
	Ret.StoredSpecular = Ret.Specular;






	Ret.GBufferAO = 1;
	Ret.DiffuseIndirectSampleOcclusion = 0x0;
	Ret.IndirectIrradiance = DecodeIndirectIrradiance(Ret.GenericAO.x);






	if(bGetNormalizedNormal)
	{
		Ret.WorldNormal = normalize(Ret.WorldNormal);
	}

	[flatten]
	if( Ret.ShadingModelID == 9 )
	{
		Ret.Metallic = 0.0;
	


	}
	
	
	{
		Ret.SpecularColor = ComputeF0(Ret.Specular, Ret.BaseColor, Ret.Metallic);
	
		if (UseSubsurfaceProfile(Ret.ShadingModelID))
		{
			AdjustBaseColorAndSpecularColorForSubsurfaceProfileLightingCopyHack(Ret.BaseColor, Ret.SpecularColor, Ret.Specular, bChecker);
		}
	
		Ret.DiffuseColor = Ret.BaseColor - Ret.BaseColor * Ret.Metallic;
	
		






	}
	
	if (bHasAnisotropy)
	{
		Ret.WorldTangent = DecodeNormal(Ret.WorldTangent);
		Ret.Anisotropy = Ret.Anisotropy * 2.0f - 1.0f;
	
		if(bGetNormalizedNormal)
		{
			Ret.WorldTangent = normalize(Ret.WorldTangent);
		}
	}
	else
	{
		Ret.WorldTangent = 0;
		Ret.Anisotropy = 0;
	}

	
	
	Ret.SelectiveOutputMask = Ret.SelectiveOutputMask << 4;
}
#line 432 "/Engine/Private/DeferredShadingCommon.ush"


#line   3 "/ShaderAutogen/OPENGL_ES3_1_ANDROID/AutogenShaderHeaders.ush"















void EncodeGBufferToMRT(inout FPixelShaderOut Out, FGBufferData GBuffer, float QuantizationBias)
{
	float4 MrtFloat1 = 0.0f;
	float4 MrtFloat2 = 0.0f;
	uint4 MrtUint2 = 0;
	float4 MrtFloat3 = 0.0f;
	float4 MrtFloat4 = 0.0f;
	float4 MrtFloat5 = 0.0f;

	float3 WorldNormal_Compressed = EncodeNormalHelper(GBuffer.WorldNormal, 0.0f);

	MrtFloat1.x = WorldNormal_Compressed.x;
	MrtFloat1.y = WorldNormal_Compressed.y;
	MrtFloat1.z = WorldNormal_Compressed.z;
	MrtFloat1.w = GBuffer.PerObjectGBufferData.x;
	MrtFloat2.x = GBuffer.Metallic.x;
	MrtFloat2.y = GBuffer.Specular.x;
	MrtFloat2.z = GBuffer.Roughness.x;
	MrtUint2.w |= ((((GBuffer.ShadingModelID.x) >> 0) & 0x0f) << 0);
	MrtUint2.w |= ((((GBuffer.SelectiveOutputMask.x) >> 0) & 0x0f) << 4);
	MrtFloat3.x = GBuffer.BaseColor.x;
	MrtFloat3.y = GBuffer.BaseColor.y;
	MrtFloat3.z = GBuffer.BaseColor.z;
	MrtFloat3.w = GBuffer.GenericAO.x;
	MrtFloat5.x = GBuffer.PrecomputedShadowFactors.x;
	MrtFloat5.y = GBuffer.PrecomputedShadowFactors.y;
	MrtFloat5.z = GBuffer.PrecomputedShadowFactors.z;
	MrtFloat5.w = GBuffer.PrecomputedShadowFactors.w;
	MrtFloat4.x = GBuffer.CustomData.x;
	MrtFloat4.y = GBuffer.CustomData.y;
	MrtFloat4.z = GBuffer.CustomData.z;
	MrtFloat4.w = GBuffer.CustomData.w;

	Out.MRT[1] = MrtFloat1;
	Out.MRT[2] = float4(MrtFloat2.x, MrtFloat2.y, MrtFloat2.z, float(MrtUint2.w) / 255.0f);
	Out.MRT[3] = MrtFloat3;
	Out.MRT[4] = MrtFloat4;
	Out.MRT[5] = MrtFloat5;
	Out.MRT[6] = float4(0.0f, 0.0f, 0.0f, 0.0f);
	Out.MRT[7] = float4(0.0f, 0.0f, 0.0f, 0.0f);
}


FGBufferData  DecodeGBufferDataDirect(float4 InMRT1,
	float4 InMRT2,
	float4 InMRT3,
	float4 InMRT4,
	float4 InMRT5,
		 
	float CustomNativeDepth,
	float4 AnisotropicData,
	uint CustomStencil,
	float SceneDepth,
	bool bGetNormalizedNormal,
	bool bChecker)
{
	FGBufferData Ret = (FGBufferData)0;
	float3 WorldNormal_Compressed = 0.0f;
	WorldNormal_Compressed.x = InMRT1.x;
	WorldNormal_Compressed.y = InMRT1.y;
	WorldNormal_Compressed.z = InMRT1.z;
	Ret.PerObjectGBufferData.x = InMRT1.w;
	Ret.Metallic.x = InMRT2.x;
	Ret.Specular.x = InMRT2.y;
	Ret.Roughness.x = InMRT2.z;
	Ret.ShadingModelID.x = (((uint((float(InMRT2.w) * 255.0f) + .5f) >> 0) & 0x0f) << 0);
	Ret.SelectiveOutputMask.x = (((uint((float(InMRT2.w) * 255.0f) + .5f) >> 4) & 0x0f) << 0);
	Ret.BaseColor.x = InMRT3.x;
	Ret.BaseColor.y = InMRT3.y;
	Ret.BaseColor.z = InMRT3.z;
	Ret.GenericAO.x = InMRT3.w;
	Ret.PrecomputedShadowFactors.x = InMRT5.x;
	Ret.PrecomputedShadowFactors.y = InMRT5.y;
	Ret.PrecomputedShadowFactors.z = InMRT5.z;
	Ret.PrecomputedShadowFactors.w = InMRT5.w;
	Ret.CustomData.x = InMRT4.x;
	Ret.CustomData.y = InMRT4.y;
	Ret.CustomData.z = InMRT4.z;
	Ret.CustomData.w = InMRT4.w;
	
	Ret.WorldNormal = DecodeNormalHelper(WorldNormal_Compressed);
	Ret.WorldTangent = AnisotropicData.xyz;
	Ret.Anisotropy = AnisotropicData.w;

	GBufferPostDecode(Ret,bChecker,bGetNormalizedNormal);

	Ret.CustomDepth = ConvertFromDeviceZ(CustomNativeDepth);
	Ret.CustomStencil = CustomStencil;
	Ret.Depth = SceneDepth;
	

	return Ret;
}


#line 242 "/ShaderAutogen/OPENGL_ES3_1_ANDROID/AutogenShaderHeaders.ush"




#line 488 "/ShaderAutogen/OPENGL_ES3_1_ANDROID/AutogenShaderHeaders.ush"


#line 434 "/Engine/Private/DeferredShadingCommon.ush"



struct FScreenSpaceData
{
	
	FGBufferData GBuffer;
	
	float AmbientOcclusion;
};


void SetGBufferForUnlit(out float4 OutGBufferB)
{
	OutGBufferB = 0;
	OutGBufferB.a = EncodeShadingModelIdAndSelectiveOutputMask(0, 0);
}



float4 ComputeIndirectLightingSampleE(uint2 TracingPixelCoord, uint TracingRayIndex, uint TracingRayCount)
{
	
	uint2 Seed0 = Rand3DPCG16(int3(TracingPixelCoord, View_StateFrameIndexMod8)).xy;
	uint2 Seed1 = Rand3DPCG16(int3(TracingPixelCoord + 17, View_StateFrameIndexMod8)).xy;

	return float4(
		Hammersley16(TracingRayIndex, TracingRayCount, Seed0),
		Hammersley16(TracingRayIndex, TracingRayCount, Seed1));
}













float MobileEncodeIdAndColorChannel(uint Id, float Color, bool b10Bits)
{
	if (b10Bits)
	{
		uint ColorValue = (uint)round(clamp(Color, 0.0, 1.0) * 63.0) << 4; 
		return (float)(ColorValue | (Id & 0x0F)) / 1023.0;
	}
	else 
	{
		uint ColorValue = (uint)round(clamp(Color, 0.0, 1.0) * 31.0) << 3; 
		return (float)(ColorValue | (Id & 0x07)) / 255.0;
	}
}

uint MobileDecodeId(float InPackedChannel, bool b10Bits)
{
	if (b10Bits)
	{
		return ((uint)round(InPackedChannel * 1023.0)) & 0x0F;
	}
	else 
	{
		return ((uint)round(InPackedChannel * 255.0)) & 0x07;
	}
}

float MobileDecodeColorChannel(float InPackedChannel, bool b10Bits)
{
	if (b10Bits)
	{
		return ((uint)(InPackedChannel * 1023.0) >> 4) / 63.0;
	}
	else 
	{
		return ((uint)(InPackedChannel * 255.0) >> 3) / 31.0;
	}
}


void MobileEncodeGBuffer(
	FGBufferData GBuffer,
	out min16float4 OutGBufferA,
	out min16float4 OutGBufferB,
	out min16float4 OutGBufferC,
	out min16float4 OutGBufferD
)
{
	if (GBuffer.ShadingModelID == 0)
	{
		OutGBufferA = 0;
		OutGBufferB = 0;
		OutGBufferC = 0;
		OutGBufferD = 0;
	}
	else
	{
		OutGBufferA.rg = UnitVectorToOctahedron( normalize(GBuffer.WorldNormal) ) * 0.5f + 0.5f;

		OutGBufferA.b = EncodeIndirectIrradiance(GBuffer.IndirectIrradiance * GBuffer.GBufferAO);



		OutGBufferA.a = GBuffer.PerObjectGBufferData;		

		OutGBufferB.r = GBuffer.Metallic;
		OutGBufferB.g = GBuffer.Specular;
		OutGBufferB.b = GBuffer.Roughness;
		OutGBufferB.a = GBuffer.ShadingModelID / 255.0;

		OutGBufferC.rgb = EncodeBaseColor( GBuffer.BaseColor );

		OutGBufferC.a = GBuffer.PrecomputedShadowFactors.x;



		OutGBufferD = GBuffer.CustomData;


	






		if (GBuffer.ShadingModelID == 2 || 
			GBuffer.ShadingModelID == 3)
		{
			
			OutGBufferA.b = MobileEncodeIdAndColorChannel(GBuffer.ShadingModelID, GBuffer.CustomData.a, true);
			OutGBufferB.a = GBuffer.CustomData.r; 
			OutGBufferC.a = GBuffer.CustomData.g; 
			OutGBufferB.r = GBuffer.CustomData.b; 
		}
		else if (GBuffer.ShadingModelID == 4)
		{
			
			OutGBufferA.b = MobileEncodeIdAndColorChannel(GBuffer.ShadingModelID, 0, true);
			OutGBufferB.a = GBuffer.CustomData.x; 
			OutGBufferC.a = GBuffer.CustomData.y; 
		}
		else if (GBuffer.ShadingModelID == 5)
		{
			
			OutGBufferA.b = MobileEncodeIdAndColorChannel(GBuffer.ShadingModelID, GBuffer.CustomData.a, true);
			OutGBufferB.a = GBuffer.CustomData.r; 
			OutGBufferC.a = GBuffer.Curvature; 
		}
		else if (GBuffer.ShadingModelID == 7)
		{
			
			OutGBufferA.b = MobileEncodeIdAndColorChannel(GBuffer.ShadingModelID, GBuffer.CustomData.z, true);
			OutGBufferB.a = GBuffer.CustomData.x; 
			OutGBufferC.a = GBuffer.CustomData.y; 
		}
		else if (GBuffer.ShadingModelID == 6)
		{
			
			OutGBufferA.b = MobileEncodeIdAndColorChannel(GBuffer.ShadingModelID, 0, true);
			OutGBufferB.a = GBuffer.CustomData.r; 
			OutGBufferC.a = GBuffer.CustomData.g; 
			OutGBufferB.r = GBuffer.CustomData.b; 
		}
		else if (GBuffer.ShadingModelID == 8)
		{
			
			OutGBufferA.b = MobileEncodeIdAndColorChannel(GBuffer.ShadingModelID, GBuffer.CustomData.a, true);
			OutGBufferB.a = GBuffer.CustomData.r; 
			OutGBufferC.a = GBuffer.CustomData.g; 
			OutGBufferB.r = GBuffer.CustomData.b; 
		}
		else if (GBuffer.ShadingModelID == 9)
		{
			
			OutGBufferA.b = MobileEncodeIdAndColorChannel(GBuffer.ShadingModelID, GBuffer.CustomData.w, true);
			
			OutGBufferB.a = MobileEncodeIdAndColorChannel(GBuffer.CustomData.x, GBuffer.Curvature, false);
			OutGBufferC.a = GBuffer.CustomData.y; 
			OutGBufferB.g = GBuffer.CustomData.z; 
		}
		else
		{
			
			OutGBufferA.b = MobileEncodeIdAndColorChannel(GBuffer.ShadingModelID, 0, true);
		}
	

	}
}

FGBufferData MobileDecodeGBuffer(min16float4 InGBufferA, min16float4 InGBufferB, min16float4 InGBufferC, min16float4 InGBufferD)
{
	FGBufferData GBuffer = (FGBufferData)0;
	GBuffer.WorldNormal = OctahedronToUnitVector(InGBufferA.xy * 2.0f - 1.0f);

	GBuffer.IndirectIrradiance = DecodeIndirectIrradiance(InGBufferA.z);



	GBuffer.PerObjectGBufferData = InGBufferA.a;

	GBuffer.Metallic	= InGBufferB.r;
	GBuffer.Specular	= InGBufferB.g;
	GBuffer.Roughness	= InGBufferB.b;
	
	
	
	GBuffer.ShadingModelID = (!0 || 0) ? (uint)round(InGBufferB.a * 255.0f) : 1;
	GBuffer.SelectiveOutputMask = 0;
	GBuffer.BaseColor = DecodeBaseColor(InGBufferC.rgb);

	GBuffer.GBufferAO = 1;
	GBuffer.PrecomputedShadowFactors = min16float4(InGBufferC.a, 1, 1, 1);





	GBuffer.StoredBaseColor = GBuffer.BaseColor;
	GBuffer.StoredMetallic = GBuffer.Metallic;
	GBuffer.StoredSpecular = GBuffer.Specular;


	






		GBuffer.ShadingModelID = MobileDecodeId(InGBufferA.b, true);

		if (GBuffer.ShadingModelID == 2 ||
			GBuffer.ShadingModelID == 3)
		{
			GBuffer.CustomData.a = MobileDecodeColorChannel(InGBufferA.b, true); 
			GBuffer.CustomData.r = InGBufferB.a; 
			GBuffer.CustomData.g = InGBufferC.a; 
			GBuffer.CustomData.b = InGBufferB.r; 
			GBuffer.GBufferAO = 1;	
			GBuffer.Metallic = 0;	
		}
		else if (GBuffer.ShadingModelID == 4)
		{
			GBuffer.CustomData.x = InGBufferB.a; 
			GBuffer.CustomData.y = InGBufferC.a; 
			GBuffer.GBufferAO = 1;	
		}
		else if (GBuffer.ShadingModelID == 5)
		{
			GBuffer.CustomData.a = MobileDecodeColorChannel(InGBufferA.b, true); 
			GBuffer.CustomData.r = InGBufferB.a; 
			GBuffer.Curvature = InGBufferC.a; 
			GBuffer.GBufferAO = 1;	
		}
		else if (GBuffer.ShadingModelID == 7)
		{
			GBuffer.CustomData.z = MobileDecodeColorChannel(InGBufferA.b, true); 
			GBuffer.CustomData.x = InGBufferB.a; 
			GBuffer.CustomData.y = InGBufferC.a; 
			GBuffer.GBufferAO = 1;	
		}
		else if (GBuffer.ShadingModelID == 6)
		{
			GBuffer.CustomData.r = InGBufferB.a; 
			GBuffer.CustomData.g = InGBufferC.a; 
			GBuffer.CustomData.b = InGBufferB.r; 
			GBuffer.GBufferAO = 1;	
			GBuffer.Metallic = 0;	
		}
		else if (GBuffer.ShadingModelID == 8)
		{
			GBuffer.CustomData.a = MobileDecodeColorChannel(InGBufferA.b, true); 
			GBuffer.CustomData.r = InGBufferB.a; 
			GBuffer.CustomData.g = InGBufferC.a; 
			GBuffer.CustomData.b = InGBufferB.r; 
			GBuffer.GBufferAO = 1;	
			GBuffer.Metallic = 0;	
		}
		else if (GBuffer.ShadingModelID == 9)
		{
			GBuffer.CustomData.w = MobileDecodeColorChannel(InGBufferA.b, true); 
			GBuffer.CustomData.x = MobileDecodeId(InGBufferB.a, false); 
			GBuffer.CustomData.y = InGBufferC.a; 
			GBuffer.CustomData.z = InGBufferB.g; 
			GBuffer.Curvature = MobileDecodeColorChannel(InGBufferB.a, false); 
			
			GBuffer.GBufferAO = 1;	
			GBuffer.Specular = 0.5f;	
		}
	

	if (GBuffer.ShadingModelID == 9)
	{
		GBuffer.Metallic = 0.0;
	


	}


	
	{
		GBuffer.SpecularColor = ComputeF0(GBuffer.Specular, GBuffer.BaseColor, GBuffer.Metallic);
		GBuffer.DiffuseColor = GBuffer.BaseColor - GBuffer.BaseColor * GBuffer.Metallic;
	}
	return GBuffer;
}

#line 792 "/Engine/Private/DeferredShadingCommon.ush"


FGBufferData MobileFetchAndDecodeGBuffer(in float2 UV, in float2 PixelPos)
{
	FGBufferData GBuffer = (FGBufferData)0;










	GBuffer.Depth = CalcSceneDepth(UV);


	GBuffer.CustomDepth = ConvertFromDeviceZ(Texture2DSample(MobileBasePass_SceneTextures_CustomDepthTexture, MobileBasePass_SceneTextures_CustomDepthTextureSampler, UV).r);
	GBuffer.CustomStencil = MobileBasePass_SceneTextures_CustomStencilTexture.Load(int3(PixelPos.xy, 0)) .g;

	return GBuffer;
}



void EncodeGBuffer(
	FGBufferData GBuffer,
	out float4 OutGBufferA,
	out float4 OutGBufferB,
	out float4 OutGBufferC,
	out float4 OutGBufferD,
	out float4 OutGBufferE,
	out float4 OutGBufferVelocity,
	float QuantizationBias = 0		
	)
{

	MobileEncodeGBuffer(GBuffer, OutGBufferA, OutGBufferB, OutGBufferC, OutGBufferD);
	OutGBufferE = 0;
	OutGBufferVelocity = 0;
#line 882 "/Engine/Private/DeferredShadingCommon.ush"

}




bool AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(inout float3 BaseColor, inout float Specular, bool bChecker)
{





	const bool bCheckerboardRequired = View_bSubsurfacePostprocessEnabled > 0 && View_bCheckerboardSubsurfaceProfileRendering > 0;
	BaseColor = View_bSubsurfacePostprocessEnabled ? float3(1, 1, 1) : BaseColor;

	if (bCheckerboardRequired)
	{
		
		
		BaseColor = bChecker;
		Specular *= !bChecker;
	}
	return bCheckerboardRequired;
}
void AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(inout float3 BaseColor, inout float3 SpecularColor, inout float Specular, bool bChecker)
{
	const bool bCheckerboardRequired = AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(BaseColor, Specular, bChecker);
	if (bCheckerboardRequired)
	{
		
		SpecularColor *= !bChecker;
	}
}



FGBufferData DecodeGBufferData(
	float4 InGBufferA,
	float4 InGBufferB,
	float4 InGBufferC,
	float4 InGBufferD,
	float4 InGBufferE,
	float4 InGBufferF,
	float4 InGBufferVelocity,
	float CustomNativeDepth,
	uint CustomStencil,
	float SceneDepth,
	bool bGetNormalizedNormal,
	bool bChecker)
{
	FGBufferData GBuffer;

	GBuffer.WorldNormal = DecodeNormal( InGBufferA.xyz );
	if(bGetNormalizedNormal)
	{
		GBuffer.WorldNormal = normalize(GBuffer.WorldNormal);
	}

	GBuffer.PerObjectGBufferData = InGBufferA.a;  
	GBuffer.Metallic	= InGBufferB.r;
	GBuffer.Specular	= InGBufferB.g;
	GBuffer.Roughness	= InGBufferB.b;
	
	
	
	GBuffer.ShadingModelID = DecodeShadingModelId(InGBufferB.a);
	GBuffer.SelectiveOutputMask = DecodeSelectiveOutputMask(InGBufferB.a);

	GBuffer.BaseColor = DecodeBaseColor(InGBufferC.rgb);






	GBuffer.GBufferAO = 1;
	GBuffer.DiffuseIndirectSampleOcclusion = 0x0;
	GBuffer.IndirectIrradiance = DecodeIndirectIrradiance(InGBufferC.a);






	GBuffer.CustomData = HasCustomGBufferData(GBuffer.ShadingModelID) ? InGBufferD : 0;

	GBuffer.PrecomputedShadowFactors = !(GBuffer.SelectiveOutputMask & (1 << 5)) ? InGBufferE :  ((GBuffer.SelectiveOutputMask & (1 << 6)) ? 0 :  1);
	GBuffer.CustomDepth = ConvertFromDeviceZ(CustomNativeDepth);
	GBuffer.CustomStencil = CustomStencil;
	GBuffer.Depth = SceneDepth;

	GBuffer.StoredBaseColor = GBuffer.BaseColor;
	GBuffer.StoredMetallic = GBuffer.Metallic;
	GBuffer.StoredSpecular = GBuffer.Specular;

	[flatten]
	if( GBuffer.ShadingModelID == 9 )
	{
		GBuffer.Metallic = 0.0;



	}

	
	{
		GBuffer.SpecularColor = ComputeF0(GBuffer.Specular, GBuffer.BaseColor, GBuffer.Metallic);

		if (UseSubsurfaceProfile(GBuffer.ShadingModelID))
		{
			AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(GBuffer.BaseColor, GBuffer.SpecularColor, GBuffer.Specular, bChecker);
		}

		GBuffer.DiffuseColor = GBuffer.BaseColor - GBuffer.BaseColor * GBuffer.Metallic;

		






	}

	{
		bool bHasAnisoProp = HasAnisotropy(GBuffer.SelectiveOutputMask);

		GBuffer.WorldTangent = bHasAnisoProp ? DecodeNormal(InGBufferF.rgb) : 0;
		GBuffer.Anisotropy   = bHasAnisoProp ? InGBufferF.a * 2.0f - 1.0f   : 0;

		if (bGetNormalizedNormal && bHasAnisoProp)
		{
			GBuffer.WorldTangent = normalize(GBuffer.WorldTangent);
		}
	}

	GBuffer.Velocity = !(GBuffer.SelectiveOutputMask & (1 << 7)) ? InGBufferVelocity : 0;

	return GBuffer;
}

float3 ExtractSubsurfaceColor(FGBufferData BufferData)
{
	return Square(BufferData.CustomData.rgb);
}

uint ExtractSubsurfaceProfileInt(float ProfileNormFloat)
{
	return uint(ProfileNormFloat * 255.0f + 0.5f);
}

uint ExtractSubsurfaceProfileInt(FGBufferData BufferData)
{
	return ExtractSubsurfaceProfileInt(BufferData.CustomData.r);
}

#line 1182 "/Engine/Private/DeferredShadingCommon.ush"


min16float3 AOMultiBounce(min16float3 BaseColor, min16float AO)
{
	if (1 && !0)
	{
		return AO;
	}
	else
	{
		min16float3 a = 2.0404 * BaseColor - 0.3324;
		min16float3 b = -4.7951 * BaseColor + 0.6417;
		min16float3 c = 2.7552 * BaseColor + 0.6903;
		return max(AO, ((AO * a + b) * AO + c) * AO);
	}
}

#line  25 "/Engine/Generated/Material.ush"
































































#line   3 "/Engine/Private/MaterialTexture.ush"




























#line 142 "/Engine/Private/MaterialTexture.ush"


min16float4 ProcessMaterialColorTextureLookup(min16float4 TextureValue)
{
	return TextureValue;
}

min16float4 ProcessMaterialVirtualColorTextureLookup(min16float4 TextureValue)
{
	return ProcessMaterialColorTextureLookup(TextureValue);
}

min16float4 ProcessMaterialExternalTextureLookup(min16float4 TextureValue)
{

	return min16float4(pow(TextureValue.rgb, 2.2f), TextureValue.a);



}

min16float4 ProcessMaterialLinearColorTextureLookup(min16float4 TextureValue)
{
	return TextureValue;
}

min16float4 ProcessMaterialGreyscaleTextureLookup(min16float4 TextureValue)
{
	
	
	
	min16float GrayValue = TextureValue.r;

	






	
	float LinValue = GrayValue;
	LinValue *= LinValue;
	return min16float4(LinValue.rrrr);

	return GrayValue.rrrr;
}

min16float4 ProcessMaterialLinearGreyscaleTextureLookup(min16float4 TextureValue)
{
	
	
	
	return TextureValue.rrrr;
}

min16float4 ProcessMaterialAlphaTextureLookup(min16float4 TextureValue)
{
	
	
	
	return TextureValue.rrrr;
}

float4 ApplyMaterialSamplerType(float4 Value, int SamplerType)
{
	switch(SamplerType)
	{
	case 9: return ProcessMaterialExternalTextureLookup(Value);
	case 0: return ProcessMaterialColorTextureLookup(Value);
	case 10: return ProcessMaterialVirtualColorTextureLookup(Value);

	case 6:
	case 15: return ProcessMaterialLinearColorTextureLookup(Value);

	case 2:
	case 12:
	case 5: return ProcessMaterialAlphaTextureLookup(Value);

	case 1:
	case 11: return ProcessMaterialGreyscaleTextureLookup(Value);

	case 7:
	case 16: return ProcessMaterialLinearGreyscaleTextureLookup(Value);

	case 3:
	case 13: return UnpackNormalMap(Value);

	case 4:
	case 14:
	case 8:
	default: return Value;
	}
}
#line  89 "/Engine/Generated/Material.ush"
















#line   8 "/Engine/Private/PaniniProjection.ush"



































float2 PaniniProjection(float2 OM, float d, float s)
{
	float PaniniDirectionXZInvLength = rsqrt(1.0f + OM.x * OM.x);
	float SinPhi = OM.x * PaniniDirectionXZInvLength;
	float TanTheta = OM.y * PaniniDirectionXZInvLength;
	float CosPhi = sqrt(1.0f - SinPhi * SinPhi);
	float S = (d + 1.0f) / (d + CosPhi);

	return S * float2(SinPhi, lerp(TanTheta, TanTheta / CosPhi, s));
}
#line 105 "/Engine/Generated/Material.ush"

#line   7 "/Engine/Private/DBufferNormalReprojection.ush"


#line 118 "/Engine/Private/DBufferNormalReprojection.ush"


float4 GetDBufferReprojectedWorldNormal(float2 UV)
{
	
	return float4(0, 0, 1, 1);
}

#line 106 "/Engine/Generated/Material.ush"



	



	






 


















	






















struct FStrataData
{
	uint Dummy;
};
FStrataData GetInitialisedStrataData() { return (FStrataData)0; }







#line   7 "/Engine/Private/DBufferDecalShared.ush"



















uint GetDBufferTargetMask(uint2 PixelPos)
{












	return 0;

}


#line 266 "/Engine/Private/DBufferDecalShared.ush"

struct FDBufferData
{
	
	float3 PreMulColor;
	
	float ColorOpacity;

	
	float3 PreMulWorldNormal;
	
	float NormalOpacity;

	
	float PreMulRoughness;
	
	float PreMulMetallic;
	
	float PreMulSpecular;
	
	float RoughnessOpacity;
};



void EncodeDBufferData(FGBufferData GBufferData, float3 MultiOpacity,
	out float4 DBufferA,
	out float4 DBufferB,
	out float4 DBufferC)
{
	
	DBufferA = float4(GBufferData.BaseColor, MultiOpacity.x);

	
	DBufferB = float4(GBufferData.WorldNormal * 0.5f + 128.0f/255.0f, MultiOpacity.y);

	
	DBufferC = float4(GBufferData.Metallic, GBufferData.Specular, GBufferData.Roughness, MultiOpacity.z);
}


FDBufferData DecodeDBufferData(
	float4 DBufferA,
	float4 DBufferB,
	float4 DBufferC)
{
	FDBufferData ret;

	
	ret.PreMulColor = DBufferA.rgb;
	ret.ColorOpacity = DBufferA.a;

	
	ret.PreMulWorldNormal = DBufferB.rgb * 2 - (256.0 / 255.0);
	ret.NormalOpacity = DBufferB.a;

	
	ret.PreMulMetallic = DBufferC.r;
	ret.PreMulSpecular = DBufferC.g;
	ret.PreMulRoughness = DBufferC.b;
	ret.RoughnessOpacity = DBufferC.a;

	return ret;
}


FDBufferData GetDBufferData(float2 BufferUV, uint RTMaskBit)
{
	
	float4 DBufferA = float4(0.0, 0.0, 0.0, 1.0);
	float4 DBufferB = float4(128.0f / 255.0f, 128.f / 255.5f, 128.f / 255.5f, 1.0);
	float4 DBufferC = float4(0.0, 0.0, 0.0, 1.0);

#line 357 "/Engine/Private/DBufferDecalShared.ush"


	return DecodeDBufferData(DBufferA, DBufferB, DBufferC);
}


void ApplyDBufferData(
	FDBufferData DBufferData, inout float3 WorldNormal, inout float3 SubsurfaceColor, inout float Roughness, 
	inout float3 BaseColor, inout float Metallic, inout float Specular )
{

	BaseColor = BaseColor * DBufferData.ColorOpacity + DBufferData.PreMulColor;
	SubsurfaceColor *= DBufferData.ColorOpacity;



	
	WorldNormal = normalize(WorldNormal * DBufferData.NormalOpacity + DBufferData.PreMulWorldNormal);



	Roughness = Roughness * DBufferData.RoughnessOpacity + DBufferData.PreMulRoughness;
	Metallic = Metallic * DBufferData.RoughnessOpacity + DBufferData.PreMulMetallic;
	Specular = Specular * DBufferData.RoughnessOpacity + DBufferData.PreMulSpecular;

}
#line 174 "/Engine/Generated/Material.ush"





struct FMaterialParticleParameters
{
	
	min16float RelativeTime;
	
	min16float MotionBlurFade;
	
	min16float Random;
	
	min16float4 Velocity;
	
	min16float4 Color;
	
	float4 TranslatedWorldPositionAndSize;
	
	min16float4 MacroUV;

	



	min16float4 DynamicParameter;













	
	FLWCMatrix ParticleToWorld;

	
	FLWCInverseMatrix WorldToParticle;








	
	float2 Size;
};

float4 GetDynamicParameter(FMaterialParticleParameters Parameters, float4 Default, int ParameterIndex=0)
{
#line 255 "/Engine/Generated/Material.ush"

	return Default;

}


struct FMaterialAttributes
{
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 Normal;
	float3 Tangent;
	float3 WorldPositionOffset;
	float3 SubsurfaceColor;
	float ClearCoat;
	float ClearCoatRoughness;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	float SurfaceThickness;
	FStrataData FrontMaterial;
	float2 CustomizedUV0;
	float2 CustomizedUV1;
	float2 CustomizedUV2;
	float2 CustomizedUV3;
	float2 CustomizedUV4;
	float2 CustomizedUV5;
	float2 CustomizedUV6;
	float2 CustomizedUV7;
	float3 BentNormal;
	float3 ClearCoatBottomNormal;
	float3 CustomEyeTangent;
	float3 TransmittanceColor;
};



FMaterialAttributes FMaterialAttributes_SetBaseColor(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.BaseColor = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetMetallic(FMaterialAttributes InAttributes, float InValue) { InAttributes.Metallic = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetSpecular(FMaterialAttributes InAttributes, float InValue) { InAttributes.Specular = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetRoughness(FMaterialAttributes InAttributes, float InValue) { InAttributes.Roughness = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetAnisotropy(FMaterialAttributes InAttributes, float InValue) { InAttributes.Anisotropy = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetEmissiveColor(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.EmissiveColor = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetOpacity(FMaterialAttributes InAttributes, float InValue) { InAttributes.Opacity = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetOpacityMask(FMaterialAttributes InAttributes, float InValue) { InAttributes.OpacityMask = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetNormal(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.Normal = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetTangent(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.Tangent = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetWorldPositionOffset(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.WorldPositionOffset = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetSubsurfaceColor(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.SubsurfaceColor = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetClearCoat(FMaterialAttributes InAttributes, float InValue) { InAttributes.ClearCoat = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetClearCoatRoughness(FMaterialAttributes InAttributes, float InValue) { InAttributes.ClearCoatRoughness = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetAmbientOcclusion(FMaterialAttributes InAttributes, float InValue) { InAttributes.AmbientOcclusion = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetRefraction(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.Refraction = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetPixelDepthOffset(FMaterialAttributes InAttributes, float InValue) { InAttributes.PixelDepthOffset = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetShadingModel(FMaterialAttributes InAttributes, uint InValue) { InAttributes.ShadingModel = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetSurfaceThickness(FMaterialAttributes InAttributes, float InValue) { InAttributes.SurfaceThickness = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetFrontMaterial(FMaterialAttributes InAttributes, FStrataData InValue) { InAttributes.FrontMaterial = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV0(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV0 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV1(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV1 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV2(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV2 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV3(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV3 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV4(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV4 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV5(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV5 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV6(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV6 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV7(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV7 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetBentNormal(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.BentNormal = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetClearCoatBottomNormal(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.ClearCoatBottomNormal = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomEyeTangent(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.CustomEyeTangent = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetTransmittanceColor(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.TransmittanceColor = InValue; return InAttributes; }





struct FPixelMaterialInputs
{
	min16float3 EmissiveColor;
	min16float Opacity;
	min16float OpacityMask;
	min16float3 BaseColor;
	min16float Metallic;
	min16float Specular;
	min16float Roughness;
	min16float Anisotropy;
	min16float3 Normal;
	min16float3 Tangent;
	min16float4 Subsurface;
	min16float AmbientOcclusion;
	min16float3 Refraction;
	min16float PixelDepthOffset;
	uint ShadingModel;
	FStrataData FrontMaterial;
	min16float SurfaceThickness;

};





struct FMaterialPixelParameters
{

	float2 TexCoords[1];


	
	min16float4 VertexColor;

	
	min16float3 WorldNormal;
	
	
	min16float3 WorldTangent;

	
	min16float3 ReflectionVector;

	
	float3 CameraVector;

	
	min16float3 LightVector;

	




	float4 SvPosition;
		
	
	float4 ScreenPosition;

	



	float2 ViewBufferUV;





	min16float UnMirrored;

	min16float TwoSidedSign;

	



	min16float3x3 TangentToWorld;






	



	FLWCVector3 AbsoluteWorldPosition;

	


	float3 WorldPosition_CamRelative;

	



	FLWCVector3 WorldPosition_NoOffsets;

	



	float3 WorldPosition_NoOffsets_CamRelative;

	
	min16float3 LightingPositionOffset;

	
	float3 WorldPosition_DDX;
	float3 WorldPosition_DDY;
	float4 VertexColor_DDX;
	float4 VertexColor_DDY;
	float4 ScreenPosition_DDX;
	float4 ScreenPosition_DDY;
	

	float2 TexCoords_DDX[1];
	float2 TexCoords_DDY[1];


	float AOMaterialMask;















	
	uint PrimitiveId;










	


















	
	FMaterialParticleParameters Particle;


	float4 LayerWeights;







































	FMaterialAttributes MaterialAttributes;
};















FMaterialPixelParameters MakeInitializedMaterialPixelParameters()
{
	FMaterialPixelParameters MPP;
	MPP = (FMaterialPixelParameters)0;
	MPP.TangentToWorld = float3x3(1,0,0,0,1,0,0,0,1);
	return MPP;
}





struct FMaterialVertexParameters
{
	
	
	
	float3 WorldPosition;
	
	min16float3x3 TangentToWorld;










	













	
	
	FLWCMatrix PrevFrameLocalToWorld;

	float3 PreSkinnedPosition;
	float3 PreSkinnedNormal;

	min16float4 VertexColor;

	float2 TexCoords[1];
	
	float2 TexCoordOffset; 
	







	
	FMaterialParticleParameters Particle;





	FMaterialAttributes MaterialAttributes;

	
	FSceneDataIntermediates SceneData;

	
	
	uint PrimitiveId;




};

float MaterialReadInterpolatorComponent(FMaterialPixelParameters Parameters, int InterpolatorIndex)
{

	return Parameters.TexCoords[1 + InterpolatorIndex / 2][InterpolatorIndex & 1];



}

void MaterialPackInterpolatorComponent(in out FMaterialVertexParameters Parameters, int InterpolatorIndex, float Value)
{



}





FPrimitiveSceneData GetPrimitiveData(FMaterialVertexParameters Parameters)
{
	return Parameters.SceneData.Primitive;
}

FPrimitiveSceneData GetPrimitiveData(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters.PrimitiveId);
}


bool UnpackUniform_bool(uint Packed, uint BitOffset)
{
	return (bool)((Packed >> BitOffset) & 0x1);
}

bool2 UnpackUniform_bool2(uint Packed, uint BitOffset)
{
	return bool2(UnpackUniform_bool(Packed, BitOffset), UnpackUniform_bool(Packed, BitOffset + 1));
}

bool3 UnpackUniform_bool3(uint Packed, uint BitOffset)
{
	return bool3(UnpackUniform_bool(Packed, BitOffset), UnpackUniform_bool(Packed, BitOffset + 1), UnpackUniform_bool(Packed, BitOffset + 2));
}

bool4 UnpackUniform_bool4(uint Packed, uint BitOffset)
{
	return bool4(UnpackUniform_bool(Packed, BitOffset), UnpackUniform_bool(Packed, BitOffset + 1), UnpackUniform_bool(Packed, BitOffset + 2), UnpackUniform_bool(Packed, BitOffset + 3));
}




min16float3x3 GetLocalToWorld3x3(FMaterialVertexParameters Parameters)
{



	return LWCToFloat3x3(GetPrimitiveData(Parameters).LocalToWorld);

}

min16float3x3 GetPreviousLocalToWorld3x3(FMaterialVertexParameters Parameters)
{



	return LWCToFloat3x3(GetPrimitiveData(Parameters).PreviousLocalToWorld);

}

min16float3x3 GetLocalToWorld3x3(FMaterialPixelParameters Parameters)
{



	return LWCToFloat3x3(GetPrimitiveData(Parameters).LocalToWorld);

}

min16float3x3 GetLocalToWorld3x3()
{
	return LWCToFloat3x3(GetPrimitiveDataFromUniformBuffer().LocalToWorld);
}

FLWCInverseMatrix GetWorldToInstance(FMaterialVertexParameters Parameters)
{
	


		return GetPrimitiveData(Parameters).WorldToLocal;
	
}

FLWCInverseMatrix GetWorldToInstance(FMaterialPixelParameters Parameters)
{
	


		return GetPrimitiveData(Parameters).WorldToLocal;
	
}

FLWCMatrix GetInstanceToWorld(FMaterialVertexParameters Parameters)
{
	


		return GetPrimitiveData(Parameters).LocalToWorld;
	
}

FLWCMatrix GetPrevInstanceToWorld(FMaterialVertexParameters Parameters)
{



	return GetPrimitiveData(Parameters).PreviousLocalToWorld;

}

FLWCMatrix GetInstanceToWorld(FMaterialPixelParameters Parameters)
{
	


		return GetPrimitiveData(Parameters).LocalToWorld;
	
}

float3 GetTranslatedWorldPosition(FMaterialVertexParameters Parameters)
{
	return Parameters.WorldPosition;
}

float3 GetPrevTranslatedWorldPosition(FMaterialVertexParameters Parameters)
{
	
	
	
	
	
	return GetTranslatedWorldPosition(Parameters);
}

FLWCVector3 GetWorldPosition(FMaterialVertexParameters Parameters)
{
	return LWCSubtract(GetTranslatedWorldPosition(Parameters), ResolvedView.PreViewTranslation);
}

FLWCVector3 GetPrevWorldPosition(FMaterialVertexParameters Parameters)
{
	return LWCSubtract(GetPrevTranslatedWorldPosition(Parameters), ResolvedView.PrevPreViewTranslation);
}

FLWCVector3 GetWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.AbsoluteWorldPosition;
}

FLWCVector3 GetWorldPosition_NoMaterialOffsets(FMaterialPixelParameters Parameters)
{
	return Parameters.WorldPosition_NoOffsets;
}

float3 GetTranslatedWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.WorldPosition_CamRelative;
}

float3 GetTranslatedWorldPosition_NoMaterialOffsets(FMaterialPixelParameters Parameters)
{
	return Parameters.WorldPosition_NoOffsets_CamRelative;
}

float4 GetScreenPosition(FMaterialVertexParameters Parameters)
{
	return mul(float4(Parameters.WorldPosition, 1.0f), ResolvedView.TranslatedWorldToClip);
}

float4 GetScreenPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.ScreenPosition;
}


float GetPixelDepth(FMaterialVertexParameters Parameters)
{
	[flatten]
	if (View_ViewToClip[3][3] < 1.0f)
	{
		
		return GetScreenPosition(Parameters).w;
	}
	else
	{
		
		return ConvertFromDeviceZ(GetScreenPosition(Parameters).z);
	}
}

float GetPixelDepth(FMaterialPixelParameters Parameters)
{
	[flatten]
	if (View_ViewToClip[3][3] < 1.0f)
	{
		
		return GetScreenPosition(Parameters).w;
	}
	else
	{
		
		return ConvertFromDeviceZ(GetScreenPosition(Parameters).z);
	}
}

float2 GetSceneTextureUV(FMaterialVertexParameters Parameters)
{
	return ScreenAlignedPosition(GetScreenPosition(Parameters));
}

float2 GetSceneTextureUV(FMaterialPixelParameters Parameters)
{
	return SvPositionToBufferUV(Parameters.SvPosition);
}

float2 GetViewportUV(FMaterialVertexParameters Parameters)
{



	return BufferUVToViewportUV(GetSceneTextureUV(Parameters));

}

float2 GetPixelPosition(FMaterialVertexParameters Parameters)
{
	return GetViewportUV(Parameters) * View_ViewSizeAndInvSize.xy;
}

uint3 SparseVolumeTextureGetVoxelCoord(uint PackedPhysicalTileCoord, uint PhysicalTileSize, uint3 PageTableCoord, uint3 VolumeCoord)
{
	const int3 PhysicalTileCoord = int3(
		PackedPhysicalTileCoord & 0x7FF,
		(PackedPhysicalTileCoord >> 11) & 0x7FF,
		(PackedPhysicalTileCoord >> 22) & 0x3FF);

	int3 VoxelCoord = PhysicalTileCoord * PhysicalTileSize + int3(VolumeCoord - PageTableCoord * PhysicalTileSize);
	return VoxelCoord;
}

#line 917 "/Engine/Generated/Material.ush"


float2 GetPixelPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.SvPosition.xy - float2(View_ViewRectMin.xy);
}

float2 GetViewportUV(FMaterialPixelParameters Parameters)
{
	return SvPositionToViewportUV(Parameters.SvPosition);
}



float GetWaterWaveParamIndex(FMaterialPixelParameters Parameters)
{



	return 0.0f;

}

float GetWaterWaveParamIndex(FMaterialVertexParameters Parameters)
{



	return 0.0f;

}


bool IsPostProcessInputSceneTexture(const uint SceneTextureId)
{
	return (SceneTextureId >= 14 && SceneTextureId <= 20);
}


float4 GetSceneTextureViewSize(const uint SceneTextureId)
{
	
#line 977 "/Engine/Generated/Material.ush"

	return ResolvedView.ViewSizeAndInvSize;
}


float4 GetSceneTextureUVMinMax(const uint SceneTextureId)
{
	
#line 1003 "/Engine/Generated/Material.ush"


	return View_BufferBilinearUVMinMax;
}


min16float2 ViewportUVToSceneTextureUV(min16float2 ViewportUV, const uint SceneTextureId)
{
	
#line 1030 "/Engine/Generated/Material.ush"


	return ViewportUVToBufferUV(ViewportUV);
}


min16float2 ClampSceneTextureUV(min16float2 BufferUV, const uint SceneTextureId)
{
	float4 MinMax = GetSceneTextureUVMinMax(SceneTextureId);

	return clamp(BufferUV, MinMax.xy, MinMax.zw);
}


min16float2 GetDefaultSceneTextureUV(FMaterialVertexParameters Parameters, const uint SceneTextureId)
{
	return GetSceneTextureUV(Parameters);
}


min16float2 GetDefaultSceneTextureUV(FMaterialPixelParameters Parameters, const uint SceneTextureId)
{
	


		return GetSceneTextureUV(Parameters);
	
}


#line 1120 "/Engine/Generated/Material.ush"

	float2 ComputeDecalDDX(FMaterialPixelParameters Parameters)
	{
		return 0.0f;
	}
	
	float2 ComputeDecalDDY(FMaterialPixelParameters Parameters)
	{
		return 0.0f;
	}

	float ComputeDecalMipmapLevel(FMaterialPixelParameters Parameters, float2 TextureSize)
	{
		return 0.0f;
	}


	





	FLWCVector3 GetActorWorldPosition(FMaterialVertexParameters Parameters)
	{
	


		return GetPrimitiveData(Parameters).ActorWorldPosition;
	
	}

	FLWCVector3 GetActorWorldPosition(FMaterialPixelParameters Parameters)
	{
	


		return GetPrimitiveData(Parameters).ActorWorldPosition;
	
	}
	
	float3 GetObjectOrientation(FMaterialVertexParameters Parameters)
	{
	


		return GetPrimitiveData(Parameters).ObjectOrientation;
	
	}

	float3 GetObjectOrientation(FMaterialPixelParameters Parameters)
	{
	


		return GetPrimitiveData(Parameters).ObjectOrientation;
	
	}

	float4 DecalColor()
	{
	


		return float4(1.0f, 1.0f, 1.0f, 1.0f);
	
	}

	float DecalLifetimeOpacity()
	{
	


		return 0.0f;
	
	}


float GetPerInstanceCustomData(FMaterialPixelParameters Parameters, int Index, float DefaultValue)
{
#line 1218 "/Engine/Generated/Material.ush"

	return DefaultValue;
}



float GetPerInstanceCustomData(FMaterialVertexParameters Parameters, int Index, float DefaultValue)
{
#line 1244 "/Engine/Generated/Material.ush"


	return DefaultValue;
}



min16float3 GetPerInstanceCustomData3Vector(FMaterialPixelParameters Parameters, int Index, min16float3 DefaultValue)
{
#line 1269 "/Engine/Generated/Material.ush"

	return DefaultValue;
}



min16float3 GetPerInstanceCustomData3Vector(FMaterialVertexParameters Parameters, int Index, min16float3 DefaultValue)
{
#line 1293 "/Engine/Generated/Material.ush"


	return DefaultValue;
}


min16float3 TransformTangentVectorToView(FMaterialPixelParameters Parameters, min16float3 InTangentVector)
{
	
	return mul(mul(InTangentVector, Parameters.TangentToWorld), (min16float3x3)ResolvedView.TranslatedWorldToView);
}

FLWCMatrix GetLocalToWorld(FMaterialVertexParameters Parameters)
{





	return GetPrimitiveData(Parameters).LocalToWorld;

}

FLWCMatrix GetLocalToWorld(FMaterialPixelParameters Parameters)
{



	return GetPrimitiveData(Parameters).LocalToWorld;

}

FLWCMatrix GetPrevLocalToWorld(FMaterialVertexParameters Parameters)
{
	return Parameters.PrevFrameLocalToWorld;
}


min16float3 TransformLocalVectorToWorld(FMaterialPixelParameters Parameters, min16float3 InLocalVector)
{
	return mul(InLocalVector, GetLocalToWorld3x3(Parameters));
}


min16float3 TransformLocalVectorToWorld(FMaterialVertexParameters Parameters,min16float3 InLocalVector)
{
	


		return mul(InLocalVector, GetLocalToWorld3x3(Parameters));
	
}


min16float3 TransformLocalVectorToPrevWorld(FMaterialVertexParameters Parameters, min16float3 InLocalVector)
{



	return mul(InLocalVector, GetPreviousLocalToWorld3x3(Parameters));

}


FLWCVector3 TransformLocalPositionToWorld(FMaterialPixelParameters Parameters,float3 InLocalPosition)
{
	return LWCMultiply(InLocalPosition, GetLocalToWorld(Parameters));
}


FLWCVector3 TransformLocalPositionToWorld(FMaterialVertexParameters Parameters,float3 InLocalPosition)
{
	return LWCMultiply(InLocalPosition, GetLocalToWorld(Parameters));
}


FLWCVector3 TransformLocalPositionToPrevWorld(FMaterialVertexParameters Parameters,float3 InLocalPosition)
{
	return LWCMultiply(InLocalPosition, GetPrevLocalToWorld(Parameters));
}


FLWCVector3 GetObjectWorldPosition(FMaterialPixelParameters Parameters)
{



	return GetPrimitiveData(Parameters).ObjectWorldPosition;

}


FLWCVector3 GetObjectWorldPosition(FMaterialVertexParameters Parameters)
{





	return GetPrimitiveData(Parameters).ObjectWorldPosition;

}


float GetPerInstanceRandom(FMaterialVertexParameters Parameters)
{



	return 0.0;

}


float GetPerInstanceRandom(FMaterialPixelParameters Parameters)
{



	return 0.0;

}


float GetPerInstanceFadeAmount(FMaterialPixelParameters Parameters)
{



	return float(1.0);

}


float GetPerInstanceFadeAmount(FMaterialVertexParameters Parameters)
{



	return float(1.0);

}
 
min16float GetDistanceCullFade()
{

	return saturate(ResolvedView.RealTime * PrimitiveFade_FadeTimeScaleBias.x + PrimitiveFade_FadeTimeScaleBias.y);



}


float3 RotateAboutAxis(float4 NormalizedRotationAxisAndAngle, float3 PositionOnAxis, float3 Position)
{
	
	float3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
	
	float3 UAxis = Position - ClosestPointOnAxis;
	float3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle);
	
	float3 R = UAxis * CosAngle + VAxis * SinAngle;
	
	float3 RotatedPosition = ClosestPointOnAxis + R;
	
	return RotatedPosition - Position;
}





float3 RotateAboutAxis(float4 NormalizedRotationAxisAndAngle, FLWCVector3 PositionOnAxis, FLWCVector3 Position)
{
	
	FLWCVector3 ClosestPointOnAxis = LWCAdd(PositionOnAxis, NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, LWCToFloat(LWCSubtract(Position, PositionOnAxis))));
	
	float3 UAxis = LWCToFloat(LWCSubtract(Position, ClosestPointOnAxis));
	float3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle);
	
	float3 R = UAxis * CosAngle + VAxis * SinAngle;

	
	
	
	
	
	
	
	return R - UAxis;
}


float MaterialExpressionDepthOfFieldFunction(float SceneDepth, int FunctionValueIndex)
{
	

	if(FunctionValueIndex == 0) 
	{
		return CalcUnfocusedPercentCustomBound(SceneDepth, 1, 1);
	}
	else if(FunctionValueIndex == 1) 
	{
		return CalcUnfocusedPercentCustomBound(SceneDepth, 1, 0);
	}
	else if(FunctionValueIndex == 2) 
	{
		return CalcUnfocusedPercentCustomBound(SceneDepth, 0, 1);
	}
	else if(FunctionValueIndex == 3) 
	{
		
		return DepthToCoc(SceneDepth) * 2.0f;
	}
	return 0;
}


float3 MaterialExpressionBlackBody( float Temp )
{
	float u = ( 0.860117757f + 1.54118254e-4f * Temp + 1.28641212e-7f * Temp*Temp ) / ( 1.0f + 8.42420235e-4f * Temp + 7.08145163e-7f * Temp*Temp );
	float v = ( 0.317398726f + 4.22806245e-5f * Temp + 4.20481691e-8f * Temp*Temp ) / ( 1.0f - 2.89741816e-5f * Temp + 1.61456053e-7f * Temp*Temp );

	float x = 3*u / ( 2*u - 8*v + 4 );
	float y = 2*v / ( 2*u - 8*v + 4 );
	float z = 1 - x - y;

	float Y = 1;
	float X = Y/y * x;
	float Z = Y/y * z;

	float3x3 XYZtoRGB =
	{
		 3.2404542, -1.5371385, -0.4985314,
		-0.9692660,  1.8760108,  0.0415560,
		 0.0556434, -0.2040259,  1.0572252,
	};

	return mul( XYZtoRGB, float3( X, Y, Z ) ) * pow( 0.0004 * Temp, 4 );
}

float2 MaterialExpressionGetHairRootUV(FMaterialPixelParameters Parameters)
{





	return float2(0, 0);

}

float2 MaterialExpressionGetHairUV(FMaterialPixelParameters Parameters)
{	





	return float2(0,0);

}

float2 MaterialExpressionGetHairDimensions(FMaterialPixelParameters Parameters)
{





	return float2(0, 0);

}

float MaterialExpressionGetHairSeed(FMaterialPixelParameters Parameters)
{





	return 0;

}

float MaterialExpressionGetHairClumpID(FMaterialPixelParameters Parameters)
{





	return 0;

}

float3 MaterialExpressionGetHairBaseColor(FMaterialPixelParameters Parameters)
{





	return float3(0,0,0);

}

float MaterialExpressionGetHairRoughness(FMaterialPixelParameters Parameters)
{





	return 0;

}

float MaterialExpressionGetHairAO(FMaterialPixelParameters Parameters)
{





	return 0;

}

float MaterialExpressionGetHairDepth(FMaterialVertexParameters Parameters)
{
	return 0;
}

float MaterialExpressionGetHairDepth(FMaterialPixelParameters Parameters)
{





	return 0; 

}

float MaterialExpressionGetHairCoverage(FMaterialPixelParameters Parameters)
{





	return 0;

}

float3 MaterialExpressionGetHairTangent(FMaterialPixelParameters Parameters, bool bUseTangentSpace)
{





	return 0;

}

float2 MaterialExpressionGetAtlasUVs(FMaterialPixelParameters Parameters)
{





	return 0;


}

float4 MaterialExpressionGetHairAuxilaryData(FMaterialPixelParameters Parameters)
{



	return 0;

}

float MaterialExpressionGetHairGroupIndex(FMaterialPixelParameters Parameters)
{





	return 0;


}
float3 MaterialExpressionGetHairColorFromMelanin(float Melanin, float Redness, float3 DyeColor)
{
	return GetHairColorFromMelanin(Melanin, Redness, DyeColor);
}


 float3 MaterialExpressionAtmosphericLightVector( FMaterialPixelParameters Parameters) {return ResolvedView.AtmosphereLightDirection[0].xyz;}
 float3 MaterialExpressionAtmosphericLightVector( FMaterialVertexParameters Parameters) {return ResolvedView.AtmosphereLightDirection[0].xyz;}

float3 MaterialExpressionAtmosphericLightColor(FMaterialPixelParameters Parameters)
{
	return ResolvedView.AtmosphereLightIlluminanceOnGroundPostTransmittance[0].rgb;
}

float3 MaterialExpressionSkyAtmosphereLightIlluminance(FMaterialPixelParameters Parameters, FLWCVector3 WorldPosition, uint LightIndex)
{










	return float3(0.0f, 0.0f, 0.0f);

}




	

 float3 MaterialExpressionSkyAtmosphereLightDirection( FMaterialPixelParameters Parameters, uint LightIndex) {return float3(0.0f, 0.0f, 0.0f);}
 float3 MaterialExpressionSkyAtmosphereLightDirection( FMaterialVertexParameters Parameters, uint LightIndex) {return float3(0.0f, 0.0f, 0.0f);}

float3 MaterialExpressionSkyAtmosphereLightDiskLuminance(FMaterialPixelParameters Parameters, uint LightIndex, float OverrideAtmosphereLightDiscCosHalfApexAngle)
{
	float3 LightDiskLuminance = float3(0.0f, 0.0f, 0.0f);
#line 1752 "/Engine/Generated/Material.ush"

	return LightDiskLuminance;
}

float3 MaterialExpressionSkyAtmosphereViewLuminance(FMaterialPixelParameters Parameters)
{
#line 1779 "/Engine/Generated/Material.ush"

	return float3(0.0f, 0.0f, 0.0f);

}

float4 MaterialExpressionSkyAtmosphereAerialPerspective(FMaterialPixelParameters Parameters, FLWCVector3 WorldPosition)
{
#line 1807 "/Engine/Generated/Material.ush"

	return float4(0.0f, 0.0f, 0.0f, 1.0f); 

}

float3 MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance(FMaterialPixelParameters Parameters)
{




	return float3(0.0f, 0.0f, 0.0f);

}














float MaterialExpressionSceneDepthWithoutWater(float2 ViewportUV, float FallbackDepth)
{
#line 1860 "/Engine/Generated/Material.ush"

	return FallbackDepth;

}

float MaterialExpressionCloudSampleAltitude(FMaterialPixelParameters Parameters)
{



	return 0.0f;

}

float MaterialExpressionCloudSampleAltitudeInLayer(FMaterialPixelParameters Parameters)
{



	return 0.0f;

}

float MaterialExpressionCloudSampleNormAltitudeInLayer(FMaterialPixelParameters Parameters)
{



	return 0.0f;

}

float4 MaterialExpressionVolumeSampleConservativeDensity(FMaterialPixelParameters Parameters)
{



	return float4(0.0f, 0.0f, 0.0f, 0.0f);

}

float MaterialExpressionVolumeSampleShadowSampleDistance(FMaterialPixelParameters Parameters)
{



	return 0.0f;

}

float3 MaterialExpressionCloudEmptySpaceSkippingSphereCenterWorldPosition(FMaterialPixelParameters Parameters)
{



	return 0.0f;

}

float MaterialExpressionCloudEmptySpaceSkippingSphereRadius(FMaterialPixelParameters Parameters)
{



	return 0.0f;

}





min16float3 GetMobileSkyLightReflection(min16float3 ReflectionVector, min16float Roughness, min16float CubemapMaxMip);


float3 MaterialExpressionSkyLightEnvMapSample(float3 Direction, float Roughness)
{




	return GetMobileSkyLightReflection(Direction, Roughness, MobileReflectionCapture_Params.y);



}








min16float UnMirror( min16float Coordinate, FMaterialPixelParameters Parameters )
{
	return ((Coordinate)*(Parameters.UnMirrored)*0.5+0.5);
}




min16float2 UnMirrorU( min16float2 UV, FMaterialPixelParameters Parameters )
{
	return min16float2(UnMirror(UV.x, Parameters), UV.y);
}




min16float2 UnMirrorV( min16float2 UV, FMaterialPixelParameters Parameters )
{
	return min16float2(UV.x, UnMirror(UV.y, Parameters));
}




min16float2 UnMirrorUV( min16float2 UV, FMaterialPixelParameters Parameters )
{
	return min16float2(UnMirror(UV.x, Parameters), UnMirror(UV.y, Parameters));
}





min16float2 GetParticleMacroUV(FMaterialPixelParameters Parameters)
{
	return (Parameters.ScreenPosition.xy / Parameters.ScreenPosition.w - Parameters.Particle.MacroUV.xy) * Parameters.Particle.MacroUV.zw + min16float2(.5, .5);
}


SamplerState GetMaterialSharedSampler(SamplerState TextureSampler, SamplerState SharedSampler)
{



	
	
	return TextureSampler;

}


min16float3 ReflectionAboutCustomWorldNormal(FMaterialPixelParameters Parameters, min16float3 WorldNormal, bool bNormalizeInputNormal)
{
	if (bNormalizeInputNormal)
	{
		WorldNormal = normalize(WorldNormal);
	}

	return -Parameters.CameraVector + WorldNormal * dot(WorldNormal, Parameters.CameraVector) * 2.0;
}









float GetSphericalParticleOpacity(FMaterialPixelParameters Parameters, float Density)
{
	float Opacity = 0;










	
	
	float3 ParticleTranslatedWorldPosition = LWCToFloat(LWCAdd(GetPrimitiveData(Parameters).ObjectWorldPosition, ResolvedView.PreViewTranslation));
	float ParticleRadius = max(0.000001f, GetPrimitiveData(Parameters).ObjectRadius);



	
	float RescaledDensity = Density / ParticleRadius;

	
	float DistanceToParticle = length(Parameters.WorldPosition_NoOffsets_CamRelative - ParticleTranslatedWorldPosition);

	[flatten]
	if (DistanceToParticle < ParticleRadius) 
	{
		
		float HemisphericalDistance = sqrt(ParticleRadius * ParticleRadius - DistanceToParticle * DistanceToParticle);





		
		float NearDistance = Parameters.ScreenPosition.w - HemisphericalDistance;
		float FarDistance = Parameters.ScreenPosition.w + HemisphericalDistance;

		float SceneDepth = CalcSceneDepth(SvPositionToBufferUV(Parameters.SvPosition));
		FarDistance = min(SceneDepth, FarDistance);

		
		float DistanceThroughSphere = FarDistance - NearDistance;


		
		Opacity = saturate(1 - exp2(-RescaledDensity * (1 - DistanceToParticle / ParticleRadius) * DistanceThroughSphere));


		
		Opacity = lerp(0, Opacity, saturate((Parameters.ScreenPosition.w - ParticleRadius - ResolvedView.NearPlane) / ParticleRadius));

	}



	return Opacity;
}





float LWCApplyAddressModeWrap(FLWCScalar V)
{
	
	
	const float FracTile = frac( (( V ).Tile) * 2097152.00f);
	return FracTile + V.Offset;
}

float LWCApplyAddressModeMirror(FLWCScalar v)
{
	
	
	
	
	

	
	
	return LWCToFloat(v);
}

float LWCApplyAddressModeClamp(FLWCScalar v)
{
	
	
	return LWCToFloat(v);
}

float LWCApplyAddressMode(FLWCScalar v, uint AddressMode)
{
	if(AddressMode == 1u) return LWCApplyAddressModeWrap(v);
	else if(AddressMode == 2u) return LWCApplyAddressModeMirror(v);
	else return LWCApplyAddressModeClamp(v);
}
float2 LWCApplyAddressMode(FLWCVector2 UV, uint AddressX, uint AddressY)
{
	return float2(LWCApplyAddressMode( LWCGetComponent( UV , 0), AddressX), LWCApplyAddressMode( LWCGetComponent( UV , 1), AddressY));
}
float3 LWCApplyAddressMode(FLWCVector3 UV, uint AddressX, uint AddressY, uint AddressZ)
{
	return float3(LWCApplyAddressMode( LWCGetComponent( UV , 0), AddressX), LWCApplyAddressMode( LWCGetComponent( UV , 1), AddressY), LWCApplyAddressMode( LWCGetComponent( UV , 2), AddressZ));
}

float2 RotateScaleOffsetTexCoords(float2 InTexCoords, float4 InRotationScale, float2 InOffset)
{
	return float2(dot(InTexCoords, InRotationScale.xy), dot(InTexCoords, InRotationScale.zw)) + InOffset;
}

FLWCVector2 RotateScaleOffsetTexCoords(FLWCVector2 InTexCoords, float4 InRotationScale, float2 InOffset)
{
	return LWCAdd(MakeLWCVector(LWCDot(InTexCoords, InRotationScale.xy), LWCDot(InTexCoords, InRotationScale.zw)), InOffset);
}

#line 2321 "/Engine/Generated/Material.ush"


min16float2 GetLightmapUVs(FMaterialPixelParameters Parameters)
{



	return min16float2(0,0);

}

min16float2 GetLightmapUVs_DDX(FMaterialPixelParameters Parameters)
{



	return min16float2(0, 0);

}

min16float2 GetLightmapUVs_DDY(FMaterialPixelParameters Parameters)
{



	return min16float2(0, 0);

}







#line 2602 "/Engine/Generated/Material.ush"


#line 2624 "/Engine/Generated/Material.ush"


float4 MaterialExpressionDBufferTextureLookup(FMaterialPixelParameters Parameters, float2 BufferUV, int DBufferTextureIndex)
{
	if ((GetPrimitiveData(Parameters).Flags & 0x8) != 0 && View_ShowDecalsMask > 0)
	{










		uint2 PixelPos = uint2(BufferUV * View_BufferSizeAndInvSize.xy);
		uint ValidDBufferTargetMask = GetDBufferTargetMask(PixelPos) & (1u << DBufferTextureIndex);
		FDBufferData DBufferData = GetDBufferData(BufferUV, ValidDBufferTargetMask);
		switch (DBufferTextureIndex)
		{
		case 0:	return float4(DBufferData.PreMulColor, DBufferData.ColorOpacity);
		case 1:	return float4(DBufferData.PreMulWorldNormal, DBufferData.NormalOpacity);
		case 2:	return float4(DBufferData.PreMulRoughness, DBufferData.PreMulMetallic, DBufferData.PreMulSpecular, DBufferData.RoughnessOpacity);
		}

	}

	return float4(0, 0, 0, 1);
}

























FloatDeriv4 ConstructConstantFloatDeriv4(float4 Value)
{
	FloatDeriv4 Ret;
	Ret.Value = Value;
	Ret.Ddx = 0;
	Ret.Ddy = 0;
	return Ret;
}

FloatDeriv2 Convert_FloatDeriv2_FloatDeriv(FloatDeriv Src)
{
	FloatDeriv2 Ret;
	Ret.Value = ((min16float2)Src.Value);
	Ret.Ddx = ((min16float2)Src.Ddx);
	Ret.Ddy = ((min16float2)Src.Ddy);
	return Ret;
}

FloatDeriv4 Convert_FloatDeriv4_FloatDeriv(FloatDeriv Src)
{
	FloatDeriv4 Ret;
	Ret.Value = ((min16float4)Src.Value);
	Ret.Ddx = ((min16float4)Src.Ddx);
	Ret.Ddy = ((min16float4)Src.Ddy);
	return Ret;
}

FloatDeriv2 LerpDeriv(FloatDeriv2 A, FloatDeriv2 B, FloatDeriv2 S)
{
	FloatDeriv2 Ret;
	Ret.Value = lerp(A.Value, B.Value, S.Value);
	Ret.Ddx = lerp(A.Ddx, B.Ddx, S.Value) + S.Ddx * (B.Value - A.Value);
	Ret.Ddy = lerp(A.Ddy, B.Ddy, S.Value) + S.Ddy * (B.Value - A.Value);
	return Ret;
}

FloatDeriv4 LerpDeriv(FloatDeriv4 A, FloatDeriv4 B, FloatDeriv4 S)
{
	FloatDeriv4 Ret;
	Ret.Value = lerp(A.Value, B.Value, S.Value);
	Ret.Ddx = lerp(A.Ddx, B.Ddx, S.Value) + S.Ddx * (B.Value - A.Value);
	Ret.Ddy = lerp(A.Ddy, B.Ddy, S.Value) + S.Ddy * (B.Value - A.Value);
	return Ret;
}









#line 2797 "/Engine/Generated/Material.ush"



min16float3 GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

min16float3 GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	min16float3 RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);
		
	












	return RetNormal;
}

min16float3 GetMaterialTangentRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Tangent;
}

min16float3 GetMaterialTangent(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialTangentRaw(PixelMaterialInputs);
}

min16float3 GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

min16float3 GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	min16float3 EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

min16float3 GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

min16float3 GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

min16float3 GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

min16float GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

min16float GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

min16float GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

min16float GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

min16float GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

min16float GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{



	min16float Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));
	
	





	
	return Roughness;
}

min16float GetMaterialAnisotropyRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Anisotropy;
}

min16float GetMaterialAnisotropy(FPixelMaterialInputs PixelMaterialInputs)
{
	return clamp(GetMaterialAnisotropyRaw(PixelMaterialInputs), -1.0f, 1.0f);
}

min16float GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

min16float GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

min16float GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

min16float GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

min16float GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

min16float GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

min16float3 GetMaterialTranslucentMultipleScatteringExtinction()
{
return min16float3(1.00000, 0.83300, 0.58800);
}



min16float GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



min16float GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}

#line 2987 "/Engine/Generated/Material.ush"



min16float GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{
	
	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}








bool ShouldEnableWorldPositionOffset(FMaterialVertexParameters Parameters)
{








	return false;










	if ((GetPrimitiveData(Parameters).Flags & 0x8000) == 0)
	{
		return false;
	}

	return true;
}

float3 ClampWorldPositionOffset(FMaterialVertexParameters Parameters, float3 InOffset)
{




	const float MaxWPODim = GetPrimitiveData(Parameters).MaxWPODisplacement;
	return MaxWPODim <= 0.0f ? InOffset : clamp(InOffset, -MaxWPODim.xxx, MaxWPODim.xxx);

}

float3 GetMaterialWorldPositionOffsetRaw(FMaterialVertexParameters Parameters)
{
	return min16float3(0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
	[branch]
	if (ShouldEnableWorldPositionOffset(Parameters))
	{
		return ClampWorldPositionOffset(Parameters, GetMaterialWorldPositionOffsetRaw(Parameters));
	}
	return float3(0, 0, 0);
}

float3 GetMaterialPreviousWorldPositionOffsetRaw(FMaterialVertexParameters Parameters)
{
	return min16float3(0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
	[branch]
	if (ShouldEnableWorldPositionOffset(Parameters))
	{
		return ClampWorldPositionOffset(Parameters, GetMaterialPreviousWorldPositionOffsetRaw(Parameters));
	}
	return float3(0, 0, 0);
}


min16float4 GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

min16float4 GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	min16float4 OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

min16float GetMaterialCustomData0(in out FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

min16float GetMaterialCustomData1(in out FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

min16float GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

min16float GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

struct FMaterialRefractionData
{
	float2 Data;
	float  RefractionDepthBias;
};

float GetMaterialRefractionIOR(in FMaterialRefractionData RefractionData)
{



	return 1.0f;

}

float GetMaterialRefractionPixelNormalStrength(in FMaterialRefractionData RefractionData)
{



	return 1.0f;

}

float2 GetMaterialRefraction2DOffset(in FMaterialRefractionData RefractionData)
{



	return float2(0.0f, 0.0f);

}

FMaterialRefractionData GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	FMaterialRefractionData Data;
	Data.Data					= PixelMaterialInputs.Refraction.xy;
	Data.RefractionDepthBias	= PixelMaterialInputs.Refraction.z;
	return Data;
}


void GetMaterialCustomizedUVs(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[1])
{
	min16float2 Local18 = Parameters.TexCoords[0].xy;
	OutTexCoords[0] = Local18;

}

void GetCustomInterpolators(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[1])
{

}


float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}

#line 3181 "/Engine/Generated/Material.ush"


float3 TransformTangentNormalToWorld(min16float3x3 TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



float3 CalculateAnisotropyTangent(in out FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3 Normal = Parameters.WorldNormal;








	float3 Tangent = GetMaterialTangent(PixelMaterialInputs);


	Tangent = TransformTangentNormalToWorld(Parameters.TangentToWorld, Tangent);


	float3 BiTangent = cross(Normal, Tangent);
	Tangent = normalize(cross(BiTangent, Normal));

	return Tangent;
}

float NormalCurvatureToRoughness(float3 WorldNormal)
{
	float3 dNdx = ddx(WorldNormal);
	float3 dNdy = ddy(WorldNormal);
	float x = dot(dNdx, dNdx);
	float y = dot(dNdy, dNdy);
	float CurvatureApprox = pow(max(x, y), View_NormalCurvatureToRoughnessScaleBias.z);
	return saturate(CurvatureApprox * View_NormalCurvatureToRoughnessScaleBias.x + View_NormalCurvatureToRoughnessScaleBias.y);
}

float GetRoughnessFromNormalCurvature(FMaterialPixelParameters InMaterialParameters)
{









	return 0.f;

}







void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{
	

	
	PixelMaterialInputs.Normal = min16float3(0.00000000,0.00000000,1.00000000);








	
	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);








	
	
	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);








	
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;


	
	min16float2 Local0 = Parameters.TexCoords[0].xy;
	min16float Local1 =   Local0 .r;
	min16float4 Local2 = lerp(ResolvedView.XRPassthroughCameraUVs[0],ResolvedView.XRPassthroughCameraUVs[1],  Local1 );
	min16float Local3 =   Local0 .g;
	min16float2 Local4 =   Local2 .ba;
	min16float2 Local5 =   Local2 .rg;
	min16float2 Local6 = lerp(  Local5 ,  Local4 ,  Local3 );
	min16float Local7 =  1.0f;
	min16float4 Local8 = ProcessMaterialColorTextureLookup(Texture2DSample(Material_Texture2D_0,Material_Texture2D_0Sampler,  Local6 ));
	min16float Local9 =  1.0f;
	min16float2 Local10 = min16float2(ViewportUVToBufferUV(  Local0 ));
	min16float2 Local11 = max(Local10,View_BufferBilinearUVMinMax.xy);
	min16float2 Local12 = min(Local11,View_BufferBilinearUVMinMax.zw);
	min16float Local13 = CalcSceneDepth(Local12);
	min16float Local14 = (Local13.r * Material_PreshaderBuffer[0].y);
	min16float4 Local15 = ProcessMaterialColorTextureLookup(Texture2DSample(Material_Texture2D_1,Material_Texture2D_1Sampler,  Local6 ));
	min16float Local16 =  1.0f;
	min16float Local17 =  select_internal( (abs(Local14 - Local15.r) > 0.00001000) ,  select_internal( (Local14 >= Local15.r) , 0.80000001 , 0.00000000 ) , 0.80000001 );

	PixelMaterialInputs.EmissiveColor = Local8.rgb;
	PixelMaterialInputs.Opacity = Local17;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor = min16float3(0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Anisotropy = 0.00000000;
	PixelMaterialInputs.Normal = min16float3(0.00000000,0.00000000,1.00000000);
	PixelMaterialInputs.Tangent = min16float3(1.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction = min16float3(min16float3(1.00000000,0.00000000,0.00000000).xy,Material_PreshaderBuffer[0].z);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;
	PixelMaterialInputs.FrontMaterial = GetInitialisedStrataData();
	PixelMaterialInputs.SurfaceThickness = 0.01000000;





	Parameters.WorldTangent = 0;

}


#line 3430 "/Engine/Generated/Material.ush"




#line  3225

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float ArgCos = dot(floor(SvPosition.xy), float2(347.83451793, 3343.28371963));

		
		ArgCos = fmod(ArgCos, 10000);

		float RandCos = cos(ArgCos);
		float RandomVal = frac(RandCos * 1000.0);
		min16float RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}




#line 3482 "/Engine/Generated/Material.ush"

void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
	




		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);
	
}

#line 3515 "/Engine/Generated/Material.ush"


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);

#line 3545 "/Engine/Generated/Material.ush"

}



void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs, bool bIsThinTranslucent, float MaterialOpacity)
{

	ClipLODTransition(Parameters);
	clip(bIsThinTranslucent ? 1.0f : MaterialOpacity - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());



}


#line 3592 "/Engine/Generated/Material.ush"



	
	
	min16float GetFloatFacingSign(bool bIsFrontFace)
	{

		
		
		return bIsFrontFace ? -1 : +1;



}





	



bool IsOrthoProjection(ViewState InView)
{
	return InView.ViewToClip[3][3] >= 1.0f;
}


void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{
	
	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = LWCSubtract(TranslatedWorldPosition.xyz, ResolvedView.PreViewTranslation);

	
	





	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;
	Parameters.ViewBufferUV = ScreenPositionToBufferUV(ScreenPosition);

	
	


		if (IsOrthoProjection(ResolvedView))
		{
			
			Parameters.CameraVector = -ResolvedView.ViewForward;
		}
		else
		{
			
			Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
		}
	

	Parameters.LightVector = 0;







	Parameters.TwoSidedSign = 1.0f;



























	{
		CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
	}
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


min16float3x3 AssembleTangentToWorld( min16float3 TangentToWorld0, min16float4 TangentToWorld2 )
{
	
	

	
	
	min16float3 TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;
	
	return min16float3x3(TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}









#line 3770 "/Engine/Generated/Material.ush"

	
	






	
	


float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);

	
	
	
	
	
	
	
	
	
	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);

	
	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;

	
	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition = LWCAdd(MaterialParameters.AbsoluteWorldPosition, -MaterialParameters.CameraVector * PixelDepthOffset);

	OutDepth =  ( DeviceDepth );

	return PixelDepthOffset;
}

float3 GetWorldBentNormalZero(in FMaterialPixelParameters MaterialParameters)
{







	return MaterialParameters.WorldNormal;

}


void GetEyeNormals(
	float IrisMask,
	float IrisDistance,
	in float3 InNormal,
	in float3 InClearCoatNormal,
	in float3 InCustomTangent,
	inout float3 OutIrisNormal,
	inout float3 OutIrisPlaneNormal)
{
#line 3846 "/Engine/Generated/Material.ush"

  



	OutIrisNormal = InNormal;
	OutIrisPlaneNormal = InNormal;
  

}
#line 105 "/Engine/Private/MobileBasePassPixelShader.usf"

#line   7 "/Engine/Private/MobileBasePassCommon.ush"
#line   7 "/Engine/Private/BasePassCommon.ush"
#line 148 "/Engine/Private/BasePassCommon.ush"


#line   3 "/Engine/Private/SphericalGaussian.ush"




struct FSphericalGaussian
{
	float3	Axis;		
	float	Sharpness;	
	float	Amplitude;	
};

float Evaluate( FSphericalGaussian G, float3 Direction )
{
	

	return G.Amplitude * exp( G.Sharpness * (dot( G.Axis, Direction ) - 1) );
}


float Integral( FSphericalGaussian G )
{
	
	

	return (2*PI) * G.Amplitude / G.Sharpness * ( 1 - exp( -2 * G.Sharpness ) );
}


FSphericalGaussian Normalize( FSphericalGaussian G )
{
	
	

	G.Amplitude = G.Sharpness / ( (2*PI) - (2*PI) * exp( -2 * G.Sharpness ) );
	return G;
}


FSphericalGaussian Mul( FSphericalGaussian G0, FSphericalGaussian G1 )
{
	
	

	float  Lm = G0.Sharpness + G1.Sharpness;
	float3 um = G0.Sharpness * G0.Axis + G1.Sharpness * G1.Axis;
	float  umLength = length(um);

	FSphericalGaussian G =
	{
		um / umLength,
		umLength,
		G0.Amplitude * G1.Amplitude * exp( umLength - Lm )
	};

	return G;
}


float Dot( FSphericalGaussian G0, FSphericalGaussian G1 )
{
	
	
	
	
	float  Lm = G0.Sharpness + G1.Sharpness;
	float3 um = G0.Sharpness * G0.Axis + G1.Sharpness * G1.Axis;
	float  umLength = length(um);

	
	
	return (2*PI) * G0.Amplitude * G1.Amplitude * exp( umLength - Lm ) * ( 1 - exp( -2 * umLength ) ) / umLength;
}


FSphericalGaussian Convolve( FSphericalGaussian G0, FSphericalGaussian G1 )
{
	FSphericalGaussian G =
	{
		G0.Axis,
		( G0.Sharpness * G1.Sharpness ) / ( G0.Sharpness + G1.Sharpness ),
		(2*PI) * ( G0.Amplitude * G1.Amplitude ) / ( G0.Sharpness + G1.Sharpness )
	};

	return G;
}


FSphericalGaussian ToSphericalGaussian( float3 r, float Value )
{
	

	FSphericalGaussian G;

	float LengthR2 = dot( r, r );
	float InvLengthR = rsqrt( LengthR2 );
	float LengthR = LengthR2 * InvLengthR;

	G.Axis = r * InvLengthR;
	G.Sharpness = LengthR * ( 3 - LengthR2 ) / ( 1 - min( LengthR2, 0.9999 ) );
	G.Amplitude = Value * G.Sharpness / ( (2*PI) - (2*PI) * exp( -2 * G.Sharpness ) );
	

	return G;
}

FSphericalGaussian Add( FSphericalGaussian G0, FSphericalGaussian G1 )
{
	
	
	

	float exp2L0 = exp( -2 * G0.Sharpness );
	float exp2L1 = exp( -2 * G1.Sharpness );

	float3 r0 = ( (1 + exp2L0) / (1 - exp2L0) - rcp( G0.Sharpness ) ) * G0.Axis;
	float3 r1 = ( (1 + exp2L1) / (1 - exp2L1) - rcp( G1.Sharpness ) ) * G1.Axis;
	float w0 = Integral( G0 );
	float w1 = Integral( G1 );

	float3 r = ( r0*w0 + r1*w1 ) / (w0 + w1);
	float w = w0 + w1;

	return ToSphericalGaussian( r, w );
}


float GetConeAngle( FSphericalGaussian G )
{
	
	
	

	return sqrt( 2 / G.Sharpness );
}



float DotCosineLobe( FSphericalGaussian G, float3 N )
{
	const float muDotN = dot( G.Axis, N );

	const float c0 = 0.36;
	const float c1 = 0.25 / c0;

	float eml  = exp( -G.Sharpness );
	float em2l = eml * eml;
	float rl   = rcp( G.Sharpness );
 
	float scale = 1.0f + 2.0f * em2l - rl;
	float bias  = (eml - em2l) * rl - em2l;

	float x = sqrt( 1.0 - scale );
	float x0 = c0 * muDotN;
	float x1 = c1 * x;

	float n = x0 + x1;
	float y = ( abs( x0 ) <= x1 ) ? n*n / x : saturate( muDotN );

	return scale * y + bias;
}


FSphericalGaussian ClampedCosine_ToSphericalGaussian( float3 Normal )
{
	FSphericalGaussian G;
	
	G.Axis = Normal;
	G.Sharpness = 2.133;
	G.Amplitude = 1.17;

	
	
	

	return G;
}

FSphericalGaussian Hemisphere_ToSphericalGaussian( float3 Normal )
{
	FSphericalGaussian G;
	
	G.Axis = Normal;
	G.Sharpness = 0.81;
	G.Amplitude = 0.81 / ( 1 - exp( -2 * 0.81 ) );

	return G;
}


FSphericalGaussian BentNormalAO_ToSphericalGaussian( float3 BentNormal, float AO )
{
	
	

	FSphericalGaussian G;
	
	G.Axis = BentNormal;


	
	
	

	
	G.Sharpness = ( 0.75 + 1.25 * sqrt( 1 - AO ) ) / AO;









	
	
	const float HemisphereSharpness = 0.81;
	G.Amplitude = HemisphereSharpness / ( 1 - exp( -2 * HemisphereSharpness ) );

	return G;
}

















struct FAnisoSphericalGaussian
{
	float3	AxisX;
	float3	AxisY;
	float3	AxisZ;
	float	SharpnessX;
	float	SharpnessY;
	float	Amplitude;
};

float Evaluate( FAnisoSphericalGaussian ASG, float3 Direction )
{
	float L = ASG.SharpnessX * Pow2( dot( Direction, ASG.AxisX ) );
	float u = ASG.SharpnessY * Pow2( dot( Direction, ASG.AxisY ) );
	return ASG.Amplitude * saturate( dot( Direction, ASG.AxisZ ) ) * exp( -L - u );
}

float Dot( FAnisoSphericalGaussian ASG, FSphericalGaussian SG )
{
	

	float nu = SG.Sharpness * 0.5;

	ASG.Amplitude *= SG.Amplitude;
	ASG.Amplitude *= PI * rsqrt( (nu + ASG.SharpnessX) * (nu + ASG.SharpnessY) );
	ASG.SharpnessX = (nu * ASG.SharpnessX) / (nu + ASG.SharpnessX);
	ASG.SharpnessY = (nu * ASG.SharpnessY) / (nu + ASG.SharpnessY);

	return Evaluate( ASG, SG.Axis );
}
#line 150 "/Engine/Private/BasePassCommon.ush"


struct FShadingOcclusion
{
	min16float  DiffOcclusion;
	min16float  SpecOcclusion;
	min16float3 BentNormal;
};

float DotSpecularSG( float Roughness, float3 N, float3 V, FSphericalGaussian LightSG )
{
	float a = Pow2( max( 0.02, Roughness ) );
	float a2 = a*a;
	
	float3 L = LightSG.Axis;
	float3 H = normalize(V + L);

	float NoV = saturate( abs( dot(N, V) ) + 1e-5 );

	FSphericalGaussian NDF;
	NDF.Axis = N;
	NDF.Sharpness = 2 / a2;
	NDF.Amplitude = rcp( PI * a2 );

#line 227 "/Engine/Private/BasePassCommon.ush"

	{
		
		float SharpnessX = LightSG.Sharpness * 2 * Pow2( NoV );
		float SharpnessY = LightSG.Sharpness * 2;

		float nu = NDF.Sharpness * 0.5;

		FSphericalGaussian ConvolvedNDF;
		ConvolvedNDF.Axis = NDF.Axis;
		ConvolvedNDF.Sharpness = 2 * (nu * SharpnessY) / (nu + SharpnessY);
		ConvolvedNDF.Amplitude = NDF.Amplitude * LightSG.Amplitude;
		ConvolvedNDF.Amplitude *= PI * rsqrt( (nu + SharpnessX) * (nu + SharpnessY) );

		
		

		return Evaluate( ConvolvedNDF, H );
	}

}

FShadingOcclusion ApplyBentNormal(
	in min16float3 CameraVector, 
	in min16float3 WorldNormal, 
	in float3 WorldBentNormal0, 
	in min16float Roughness,
	in min16float MaterialAO)
{
	FShadingOcclusion Out;
	Out.DiffOcclusion = MaterialAO;
	Out.SpecOcclusion = MaterialAO;
	Out.BentNormal    = WorldNormal;

#line 284 "/Engine/Private/BasePassCommon.ush"

	return Out;
}



void GetVolumeLightingNonDirectional(float4 AmbientLightingVector, float3 DiffuseColor, inout float3 InterpolatedLighting, out float4 VolumeLighting)
{
	
	FOneBandSHVectorRGB TranslucentLighting;
	TranslucentLighting.R.V.x = AmbientLightingVector.r;
	TranslucentLighting.G.V.x = AmbientLightingVector.g;
	TranslucentLighting.B.V.x = AmbientLightingVector.b;

	FOneBandSHVector DiffuseTransferSH = CalcDiffuseTransferSH1(1);
	VolumeLighting = float4(DotSH1(TranslucentLighting, DiffuseTransferSH), AmbientLightingVector.a);
	InterpolatedLighting = DiffuseColor * VolumeLighting.rgb;
}

void GetVolumeLightingDirectional(float4 AmbientLightingVector, float3 DirectionalLightingVector, float3 WorldNormal, float3 DiffuseColor, inout float3 InterpolatedLighting, out float4 VolumeLighting)
{
	float DirectionalLightingIntensity = GetMaterialTranslucencyDirectionalLightingIntensity();

	AmbientLightingVector.rgb /= DirectionalLightingIntensity;
	DirectionalLightingVector.rgb *= DirectionalLightingIntensity;

	
	FTwoBandSHVectorRGB TranslucentLighting;
	TranslucentLighting.R.V.x = AmbientLightingVector.r;
	TranslucentLighting.G.V.x = AmbientLightingVector.g;
	TranslucentLighting.B.V.x = AmbientLightingVector.b;
	float3 NormalizedAmbientColor = AmbientLightingVector.rgb / (Luminance(AmbientLightingVector.rgb) + 0.00001f);

	
	TranslucentLighting.R.V.yzw = DirectionalLightingVector.rgb * NormalizedAmbientColor.r;
	TranslucentLighting.G.V.yzw = DirectionalLightingVector.rgb * NormalizedAmbientColor.g;
	TranslucentLighting.B.V.yzw = DirectionalLightingVector.rgb * NormalizedAmbientColor.b;

	
	FTwoBandSHVector DiffuseTransferSH = CalcDiffuseTransferSH(WorldNormal, 1);
	VolumeLighting = float4(max(min16float3(0, 0, 0), DotSH(TranslucentLighting, DiffuseTransferSH)), AmbientLightingVector.a);
	InterpolatedLighting += DiffuseColor * VolumeLighting.rgb;
}
#line   7 "/Engine/Private/MobileBasePassCommon.ush"




















struct FSharedMobileBasePassInterpolants
{

	min16float4 VertexFog			: TEXCOORD7;


	float4 PixelPosition	: TEXCOORD8; 



















};


#line 106 "/Engine/Private/MobileBasePassPixelShader.usf"

#line   1 "/Engine/Generated/VertexFactory.ush"
#line   7 "/Engine/Private/LocalVertexFactory.ush"
#line   3 "/Engine/Private/VertexFactoryCommon.ush"












	
	
	






#line  81 "/Engine/Private/VertexFactoryCommon.ush"

	
	
	
	
	

	



		
	





















FLWCVector3 TransformLocalToWorld(float3 LocalPosition, FLWCMatrix LocalToWorld)
{
	return LWCMultiply(LocalPosition, LocalToWorld);
}

FLWCVector3 TransformLocalToWorld(float3 LocalPosition)
{
	return TransformLocalToWorld(LocalPosition, GetPrimitiveDataFromUniformBuffer().LocalToWorld);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, FLWCMatrix LocalToWorld)
{
	
	float3 RotatedScaledPosition = (LocalPosition.xxx * LocalToWorld.M[0].xyz + LocalPosition.yyy * LocalToWorld.M[1].xyz + LocalPosition.zzz * LocalToWorld.M[2].xyz);
	FLWCVector3 TranslatedWorldPositionOrigin = LWCAdd(LWCGetOrigin(LocalToWorld), ResolvedView.PreViewTranslation);
	return float4(RotatedScaledPosition + LWCToFloat(TranslatedWorldPositionOrigin), 1.0f);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, float4x4 LocalToWorld)
{
	return TransformLocalToTranslatedWorld(LocalPosition, LWCPromote(LocalToWorld));
}

float4 TransformPreviousLocalPositionToTranslatedWorld(float3 PrevLocalPosition, FLWCMatrix PrevLocalToWorld)
{
	
	float3 RotatedScaledPosition = (PrevLocalPosition.xxx * PrevLocalToWorld.M[0].xyz + PrevLocalPosition.yyy * PrevLocalToWorld.M[1].xyz + PrevLocalPosition.zzz * PrevLocalToWorld.M[2].xyz);
	FLWCVector3 TranslatedPreviousWorldPositionOrigin = LWCAdd(LWCGetOrigin(PrevLocalToWorld), ResolvedView.PrevPreViewTranslation);
	return float4(RotatedScaledPosition + LWCToFloat(TranslatedPreviousWorldPositionOrigin), 1.0f);
}

float4 TransformPreviousLocalPositionToTranslatedWorld(float3 PrevLocalPosition, float4x4 PrevLocalToWorld)
{
	return TransformPreviousLocalPositionToTranslatedWorld(PrevLocalPosition, LWCPromote(PrevLocalToWorld));
}

float3 RotateLocalToWorld(float3 LocalDirection, float3x3 LocalToWorld, float3 InvScale)
{
	return
		InvScale.x * LocalToWorld[0] * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1] * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2] * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection, float4x4 LocalToWorld, float3 InvScale)
{
	return RotateLocalToWorld(LocalDirection, (float3x3)LocalToWorld, InvScale);
}

float3 RotateLocalToWorld(float3 LocalDirection, FLWCMatrix LocalToWorld, float3 InvScale)
{
	return RotateLocalToWorld(LocalDirection, LWCToFloat3x3(LocalToWorld), InvScale);
}



float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	return TransformLocalToTranslatedWorld(LocalPosition, GetPrimitiveDataFromUniformBuffer().LocalToWorld);
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	FPrimitiveSceneData PrimitiveData = GetPrimitiveDataFromUniformBuffer();
	return RotateLocalToWorld(LocalDirection, PrimitiveData.LocalToWorld, PrimitiveData.InvNonUniformScale);
}

float3 RotateWorldToLocal(float3 WorldDirection)
{
	FPrimitiveSceneData PrimitiveData = GetPrimitiveDataFromUniformBuffer();
	const float3 InvScale = PrimitiveData.InvNonUniformScale;
	const float3x3 LocalToWorld = LWCToFloat3x3(PrimitiveData.LocalToWorld);
	float3x3 InvRot = {
		InvScale.x * LocalToWorld[0],
		InvScale.y * LocalToWorld[1],
		InvScale.z * LocalToWorld[2]
	};
	InvRot = transpose(InvRot);
	return mul(WorldDirection, InvRot);
}












float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) *  select_internal( N.xy >= 0 , float2(1,1) , float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) *  select_internal( N.xy >= 0 , float2(1,1) , float2(-1,-1) );
	}
	return normalize(N);
}
#line   7 "/Engine/Private/LocalVertexFactory.ush"

#line   7 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	min16float4 TangentToWorld0 : TEXCOORD10; min16float4 TangentToWorld2 : TEXCOORD11;











	float4	TexCoords[(1+1)/2]	: TEXCOORD0;











#line  45 "/Engine/Private/LocalVertexFactoryCommon.ush"





















};


float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}

void SetUV(inout FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex, float2 InValue)
{
	[flatten]
	if (UVIndex % 2)
	{
		Interpolants.TexCoords[UVIndex / 2].zw = InValue;
	}
	else
	{
		Interpolants.TexCoords[UVIndex / 2].xy = InValue;
	}
}


float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{



}

#line 133 "/Engine/Private/LocalVertexFactoryCommon.ush"


float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);



}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{



}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{



}

#line 192 "/Engine/Private/LocalVertexFactoryCommon.ush"


#line 209 "/Engine/Private/LocalVertexFactoryCommon.ush"

#line   8 "/Engine/Private/LocalVertexFactory.ush"

#line   7 "/Engine/Private/LightmapData.ush"



	


#line  74 "/Engine/Private/LightmapData.ush"





#line   9 "/Engine/Private/LocalVertexFactory.ush"


#line   7 "/Engine/Private/GpuSkinCommon.ush"
















































uint4 UnpackU8x4(uint Packed)
{
	uint4 Unpacked;
	Unpacked.x = (Packed >> 0) & 0xff;
	Unpacked.y = (Packed >> 8) & 0xff;
	Unpacked.z = (Packed >> 16) & 0xff;
	Unpacked.w = (Packed >> 24) & 0xff;
	return Unpacked;
}


float4 UnpackU8x4N(uint Packed)
{
	return UnpackU8x4(Packed) / 255.0f;
}


float4 UnpackS8x4N(uint Packed)
{
	return UnpackU8x4(Packed) / 127.5f - 1;
}



uint PackS8x4N(float4 Unpacked)
{
	uint Packed = asuint(
		(uint((Unpacked.x + 1.0f) * 127.499f) << 0) |
		(uint((Unpacked.y + 1.0f) * 127.499f) << 8) |
		(uint((Unpacked.z + 1.0f) * 127.499f) << 16) |
		(uint((Unpacked.w + 1.0f) * 127.499f) << 24));
	return Packed;
}



uint PackS8x3N(float3 Unpacked)
{
	uint Packed = asuint(
		(uint((Unpacked.x + 1.0f) * 127.499f) << 0) |
		(uint((Unpacked.y + 1.0f) * 127.499f) << 8) |
		(uint((Unpacked.z + 1.0f) * 127.499f) << 16));
	return Packed;
}










#line  11 "/Engine/Private/LocalVertexFactory.ush"




















#line  50 "/Engine/Private/LocalVertexFactory.ush"










#line  75 "/Engine/Private/LocalVertexFactory.ush"







struct FVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;


	






		min16float3	TangentX	: ATTRIBUTE1;
		
		min16float4	TangentZ	: ATTRIBUTE2;

		min16float4	Color		: ATTRIBUTE3;
	



	
			
			


				float2	TexCoords0 : ATTRIBUTE4;
			

			





			





			




		



	
	 












	 










	uint VertexId : SV_VertexID;
};





bool IsGPUSkinPassThrough()
{
	


		return false;
	
}








#line 211 "/Engine/Private/LocalVertexFactory.ush"



#line 252 "/Engine/Private/LocalVertexFactory.ush"





struct FPositionOnlyVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;

	
	 











	 





};




struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;
	float4	Normal		: ATTRIBUTE2;

	
	 











	 





};




struct FVertexFactoryIntermediates
{
	
	FSceneDataIntermediates SceneData;




	min16float3x3 TangentToLocal;
	min16float3x3 TangentToWorld;
	min16float TangentToWorldSign;

	min16float4 Color;




















	float3 PreSkinPosition;
};

FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.Primitive;
}

FInstanceSceneData GetInstanceData(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.InstanceData;
}

#line 444 "/Engine/Private/LocalVertexFactory.ush"


#line 462 "/Engine/Private/LocalVertexFactory.ush"



FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();


	[unroll]
	for( int CoordinateIndex = 0; CoordinateIndex < 1; CoordinateIndex++ )
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}








	min16float3 TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	min16float4 TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);

	
	Result.Particle.Color = min16float4(1,1,1,1);




	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );















	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);





























	return Result;
}

min16float3x3 CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates, min16float3x3 TangentToLocal)
{
	min16float3x3 LocalToWorld = LWCToFloat3x3(GetInstanceData(Intermediates).LocalToWorld);
	min16float3 InvScale = GetInstanceData(Intermediates).InvNonUniformScale;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld); 
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, min16float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.SceneData = Intermediates.SceneData;
	
	Result.PrimitiveId = Intermediates.SceneData.PrimitiveId;

	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;

	
	Result.TangentToWorld = Intermediates.TangentToWorld;

	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(Intermediates);

#line 600 "/Engine/Private/LocalVertexFactory.ush"

	Result.PrevFrameLocalToWorld = GetInstanceData(Intermediates).PrevLocalToWorld;
	





	



	




	Result.PreSkinnedPosition = Intermediates.PreSkinPosition.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2]; 











			
				Result.TexCoords[0] = Input.TexCoords0.xy;
			
			


			


			


			


			


			


			




	Result.Particle.Color = min16float4(1,1,1,1);












	return Result;
}

#line 768 "/Engine/Private/LocalVertexFactory.ush"





float4 CalcWorldPosition(float4 Position, FLWCMatrix LocalToWorld)

{
#line 791 "/Engine/Private/LocalVertexFactory.ush"

	return TransformLocalToTranslatedWorld(Position.xyz, LocalToWorld);

}

min16float3x3 CalcTangentToLocal(FVertexFactoryInput Input, inout float TangentSign)
{




	min16float3 TangentInputX = Input.TangentX;
	min16float4 TangentInputZ = Input.TangentZ;


	min16float3 TangentX = TangentInputX;
	min16float4 TangentZ = TangentInputZ;
	if (!IsGPUSkinPassThrough())
	{
		TangentX =  ( TangentInputX );
		TangentZ =  ( TangentInputZ );
	}

	TangentSign = TangentZ.w;

#line 833 "/Engine/Private/LocalVertexFactory.ush"


	
	min16float3 TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;
	
	
	
	
	min16float3x3 Result;
	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

min16float3x3 CalcTangentToWorld(FVertexFactoryIntermediates Intermediates, min16float3x3 TangentToLocal)
{








	min16float3x3 TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0;
	Intermediates.SceneData =  GetSceneDataIntermediates();

	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(Intermediates);

#line 914 "/Engine/Private/LocalVertexFactory.ush"





	Intermediates.Color = Input.Color .bgra; 


#line 935 "/Engine/Private/LocalVertexFactory.ush"


	float TangentSign = 1.0;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates, Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetInstanceData(Intermediates).DeterminantSign;

#line 968 "/Engine/Private/LocalVertexFactory.ush"


	if (IsGPUSkinPassThrough())
	{
	









	}
	else
	{
	Intermediates.PreSkinPosition = Input.Position.xyz;
	}

	return Intermediates;
}








min16float3x3 VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	FLWCMatrix LocalToWorld = GetInstanceData(Intermediates).LocalToWorld;







	return CalcWorldPosition(Input.Position, LocalToWorld);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

	
	
	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;


	float2 CustomizedUVs[1];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);
	
	[unroll]
	for (int CoordinateIndex = 0; CoordinateIndex < 1; CoordinateIndex++)
	{
		SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
	}









#line 1087 "/Engine/Private/LocalVertexFactory.ush"


	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);


















	SetPrimitiveId(Interpolants, Intermediates.SceneData.PrimitiveId);








	return Interpolants;
}



float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	FSceneDataIntermediates SceneData =  GetSceneDataIntermediates();
	FLWCMatrix LocalToWorld = SceneData.InstanceData.LocalToWorld;
 



    return CalcWorldPosition(Input.Position, LocalToWorld);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	FSceneDataIntermediates SceneData =  GetSceneDataIntermediates();
	FLWCMatrix LocalToWorld = SceneData.InstanceData.LocalToWorld;




	return CalcWorldPosition(Input.Position, LocalToWorld);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	FSceneDataIntermediates SceneData =  GetSceneDataIntermediates();
	FLWCMatrix LocalToWorld = SceneData.InstanceData.LocalToWorld;
	float3 InvScale = SceneData.InstanceData.InvNonUniformScale;

	float3 Normal = Input.Normal.xyz;




	return RotateLocalToWorld(Normal, LocalToWorld, InvScale);

}

float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}


float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	FLWCMatrix PreviousLocalToWorld = GetInstanceData(Intermediates).PrevLocalToWorld;
	float4 PrevLocalPosition = Input.Position;

#line 1189 "/Engine/Private/LocalVertexFactory.ush"

	{









	}

	return TransformPreviousLocalPositionToTranslatedWorld(PrevLocalPosition.xyz, PreviousLocalToWorld);
}

#line 1283 "/Engine/Private/LocalVertexFactory.ush"




















float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(GetPrimitiveId(Interpolants));
	return float4(LWCToFloat(LWCAdd(PrimitiveData.ObjectWorldPosition, ResolvedView.PreViewTranslation)), PrimitiveData.ObjectRadius);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}

#line   6 "/Engine/Private/VertexFactoryDefaultInterface.ush"


uint VertexFactoryGetViewIndex(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.ViewIndex;
}

uint VertexFactoryGetInstanceIdLoadIndex(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.InstanceIdLoadIndex;
}

FLWCMatrix VertexFactoryGetLocalToWorld(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.InstanceData.LocalToWorld;
}

FLWCInverseMatrix VertexFactoryGetWorldToLocal(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.InstanceData.WorldToLocal;
}

#line  54 "/Engine/Private/VertexFactoryDefaultInterface.ush"



#line 1314 "/Engine/Private/LocalVertexFactory.ush"

#line   1 "/Engine/Generated/VertexFactory.ush"
#line 107 "/Engine/Private/MobileBasePassPixelShader.usf"

#line   3 "/Engine/Private/LightmapCommon.ush"


#line   3 "/Engine/Private/VolumetricLightmapShared.ush"











	
	
	
	
	
	
	
	
	


float3 ComputeVolumetricLightmapBrickTextureUVs(float3 WorldPosition) 
{
	
	float3 IndirectionVolumeUVs = clamp(WorldPosition * View_VolumetricLightmapWorldToUVScale + View_VolumetricLightmapWorldToUVAdd, 0.0f, .99f);
	float3 IndirectionTextureTexelCoordinate = IndirectionVolumeUVs * View_VolumetricLightmapIndirectionTextureSize;
	float4 BrickOffsetAndSize = View_VolumetricLightmapIndirectionTexture.Load(int4(IndirectionTextureTexelCoordinate, 0));

	float PaddedBrickSize = View_VolumetricLightmapBrickSize + 1;
	return (BrickOffsetAndSize.xyz * PaddedBrickSize + frac(IndirectionTextureTexelCoordinate / BrickOffsetAndSize.w) * View_VolumetricLightmapBrickSize + .5f) * View_VolumetricLightmapBrickTexelSize;
}

float3 GetVolumetricLightmapAmbient(float3 BrickTextureUVs)
{
	return Texture3DSampleLevel(View_VolumetricLightmapBrickAmbientVector, View_VolumetricLightmapBrickAmbientVectorSampler, BrickTextureUVs, 0).xyz;
}

FOneBandSHVectorRGB GetVolumetricLightmapSH1(float3 BrickTextureUVs)
{
	float3 AmbientVector = GetVolumetricLightmapAmbient(BrickTextureUVs);

	FOneBandSHVectorRGB IrradianceSH;
	IrradianceSH.R.V = AmbientVector.x;
	IrradianceSH.G.V = AmbientVector.y;
	IrradianceSH.B.V = AmbientVector.z;

	return IrradianceSH;
}

void GetVolumetricLightmapSHCoefficients0(float3 BrickTextureUVs, out float3 AmbientVector, out float4 SHCoefficients0Red, out float4 SHCoefficients0Green, out float4 SHCoefficients0Blue)
{
	AmbientVector = GetVolumetricLightmapAmbient(BrickTextureUVs);
	SHCoefficients0Red = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients0, View_VolumetricLightmapTextureSampler0, BrickTextureUVs, 0) * 2 - 1;
	SHCoefficients0Green = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients2, View_VolumetricLightmapTextureSampler2, BrickTextureUVs, 0) * 2 - 1;
	SHCoefficients0Blue = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients4, View_VolumetricLightmapTextureSampler4, BrickTextureUVs, 0) * 2 - 1;

	
	float4 SHDenormalizationScales0 = float4(
		0.488603f / 0.282095f, 
		0.488603f / 0.282095f, 
		0.488603f / 0.282095f, 
		1.092548f / 0.282095f);

	SHCoefficients0Red = SHCoefficients0Red * AmbientVector.x * SHDenormalizationScales0;
	SHCoefficients0Green = SHCoefficients0Green * AmbientVector.y * SHDenormalizationScales0;
	SHCoefficients0Blue = SHCoefficients0Blue * AmbientVector.z * SHDenormalizationScales0;
}

FTwoBandSHVectorRGB GetVolumetricLightmapSH2(float3 BrickTextureUVs)
{
	float3 AmbientVector;
	float4 SHCoefficients0Red;
	float4 SHCoefficients0Green;
	float4 SHCoefficients0Blue;
	GetVolumetricLightmapSHCoefficients0(BrickTextureUVs, AmbientVector, SHCoefficients0Red, SHCoefficients0Green, SHCoefficients0Blue);

	FTwoBandSHVectorRGB IrradianceSH;

	IrradianceSH.R.V = float4(AmbientVector.x, SHCoefficients0Red.xyz);
	IrradianceSH.G.V = float4(AmbientVector.y, SHCoefficients0Green.xyz);
	IrradianceSH.B.V = float4(AmbientVector.z, SHCoefficients0Blue.xyz);

	return IrradianceSH;
}

FThreeBandSHVectorRGB GetVolumetricLightmapSH3(float3 BrickTextureUVs)
{
	float3 AmbientVector;
	float4 SHCoefficients0Red;
	float4 SHCoefficients0Green;
	float4 SHCoefficients0Blue;
	GetVolumetricLightmapSHCoefficients0(BrickTextureUVs, AmbientVector, SHCoefficients0Red, SHCoefficients0Green, SHCoefficients0Blue);

	float4 SHCoefficients1Red = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients1, View_VolumetricLightmapTextureSampler1, BrickTextureUVs, 0) * 2 - 1;
	float4 SHCoefficients1Green = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients3, View_VolumetricLightmapTextureSampler3, BrickTextureUVs, 0) * 2 - 1;
	float4 SHCoefficients1Blue = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients5, View_VolumetricLightmapTextureSampler5, BrickTextureUVs, 0) * 2 - 1;

	float4 SHDenormalizationScales1 = float4(
		1.092548f / 0.282095f,
		4.0f * 0.315392f / 0.282095f,
		1.092548f / 0.282095f,
		2.0f * 0.546274f / 0.282095f);

	SHCoefficients1Red = SHCoefficients1Red * AmbientVector.x * SHDenormalizationScales1;
	SHCoefficients1Green = SHCoefficients1Green * AmbientVector.y * SHDenormalizationScales1;
	SHCoefficients1Blue = SHCoefficients1Blue * AmbientVector.z * SHDenormalizationScales1;

	FThreeBandSHVectorRGB IrradianceSH;
	
	IrradianceSH.R.V0 = float4(AmbientVector.x, SHCoefficients0Red.xyz);
	IrradianceSH.R.V1 = float4(SHCoefficients0Red.w, SHCoefficients1Red.xyz);
	IrradianceSH.R.V2 = SHCoefficients1Red.w;

	IrradianceSH.G.V0 = float4(AmbientVector.y, SHCoefficients0Green.xyz);
	IrradianceSH.G.V1 = float4(SHCoefficients0Green.w, SHCoefficients1Green.xyz);
	IrradianceSH.G.V2 = SHCoefficients1Green.w;

	IrradianceSH.B.V0 = float4(AmbientVector.z, SHCoefficients0Blue.xyz);
	IrradianceSH.B.V1 = float4(SHCoefficients0Blue.w, SHCoefficients1Blue.xyz);
	IrradianceSH.B.V2 = SHCoefficients1Blue.w;

	return IrradianceSH;
}

float3 GetVolumetricLightmapSkyBentNormal(float3 BrickTextureUVs)
{
	float3 SkyBentNormal = Texture3DSampleLevel(View_SkyBentNormalBrickTexture, View_SkyBentNormalTextureSampler, BrickTextureUVs, 0).xyz * 2 - 1;
	return SkyBentNormal;
}

float GetVolumetricLightmapDirectionalLightShadowing(float3 BrickTextureUVs)
{
	return Texture3DSampleLevel(View_DirectionalLightShadowingBrickTexture, View_DirectionalLightShadowingTextureSampler, BrickTextureUVs, 0).x;
}
#line   5 "/Engine/Private/LightmapCommon.ush"

















float2 ScaleLightmapUV(float2 UV, float2 Scale)
{
	return UV * Scale;
}

FloatDeriv2 ScaleLightmapUV(FloatDeriv2 UV, float2 Scale)
{
	UV.Value *= Scale;
	UV.Ddx *= Scale;
	UV.Ddy *= Scale;
	return UV;
}

#line 228 "/Engine/Private/LightmapCommon.ush"



min16float4 GetPrecomputedShadowMasks(float LightmapVTPageTableResult, FVertexFactoryInterpolantsVSToPS Interpolants, FMaterialPixelParameters MaterialParameters, float3 VolumetricLightmapBrickTextureUVs)
{
	
	
#line 262 "/Engine/Private/LightmapCommon.ush"


		float DirectionalLightShadowing = 1.0f;

	






		[branch]
		if ((GetPrimitiveData(MaterialParameters).Flags & 0x4) != 0)
		{
			
				
				VolumetricLightmapBrickTextureUVs = ComputeVolumetricLightmapBrickTextureUVs( LWCToFloat( MaterialParameters.AbsoluteWorldPosition ));
			

			DirectionalLightShadowing = GetVolumetricLightmapDirectionalLightShadowing(VolumetricLightmapBrickTextureUVs);
		}

		
		return min16float4(DirectionalLightShadowing, 1, 1, 1);

	




}


min16float4 GetPrimaryPrecomputedShadowMask(float LightmapVTPageTableResult, FVertexFactoryInterpolantsVSToPS Interpolants, FMaterialPixelParameters MaterialParameters)
{
	
#line 321 "/Engine/Private/LightmapCommon.ush"

		






	

	return 1.0f;
}
#line 108 "/Engine/Private/MobileBasePassPixelShader.usf"

#line   3 "/Engine/Private/MobileLightingCommon.ush"




#line   3 "/Engine/Private/ShadingModels.ush"



#line   7 "/Engine/Private/BRDF.ush"


struct BxDFContext
{
	min16float NoV;
	min16float NoL;
	min16float VoL;
	min16float NoH;
	min16float VoH;
	min16float XoV;
	min16float XoL;
	min16float XoH;
	min16float YoV;
	min16float YoL;
	min16float YoH;

};

void Init( inout BxDFContext Context, min16float3 N, min16float3 V, min16float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
	
	

	Context.XoV = 0.0f;
	Context.XoL = 0.0f;
	Context.XoH = 0.0f;
	Context.YoV = 0.0f;
	Context.YoL = 0.0f;
	Context.YoH = 0.0f;
}

void Init( inout BxDFContext Context, min16float3 N, min16float3 X, min16float3 Y, min16float3 V, min16float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
	
	

	Context.XoV = dot(X, V);
	Context.XoL = dot(X, L);
	Context.XoH = (Context.XoL + Context.XoV) * InvLenH;
	Context.YoV = dot(Y, V);
	Context.YoL = dot(Y, L);
	Context.YoH = (Context.YoL + Context.YoV) * InvLenH;
}

void InitMobile(inout BxDFContext Context, min16float3 N, min16float3 V, min16float3 L, min16float NoL)
{
	Context.NoL = NoL;
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float3 H = normalize(float3(V + L));
	Context.NoH = max(0, dot(N, H));
	Context.VoH = max(0, dot(V, H));

	
	

	Context.XoV = 0.0f;
	Context.XoL = 0.0f;
	Context.XoH = 0.0f;
	Context.YoV = 0.0f;
	Context.YoL = 0.0f;
	Context.YoH = 0.0f;
}


void SphereMaxNoH( inout BxDFContext Context, float SinAlpha, bool bNewtonIteration )
{
	if( SinAlpha > 0 )
	{
		float CosAlpha = sqrt( 1 - Pow2( SinAlpha ) );
	
		float RoL = 2 * Context.NoL * Context.NoV - Context.VoL;
		if( RoL >= CosAlpha )
		{
			Context.NoH = 1;
			Context.XoH = 0;
			Context.YoH = 0;
			Context.VoH = abs( Context.NoV );
		}
		else
		{
			float rInvLengthT = SinAlpha * rsqrt( 1 - RoL*RoL );
			float NoTr = rInvLengthT * ( Context.NoV - RoL * Context.NoL );





			float VoTr = rInvLengthT * ( 2 * Context.NoV*Context.NoV - 1 - RoL * Context.VoL );

			if (bNewtonIteration)
			{
				
				float NxLoV = sqrt( saturate( 1 - Pow2(Context.NoL) - Pow2(Context.NoV) - Pow2(Context.VoL) + 2 * Context.NoL * Context.NoV * Context.VoL ) );

				float NoBr = rInvLengthT * NxLoV;
				float VoBr = rInvLengthT * NxLoV * 2 * Context.NoV;

				float NoLVTr = Context.NoL * CosAlpha + Context.NoV + NoTr;
				float VoLVTr = Context.VoL * CosAlpha + 1   + VoTr;

				float p = NoBr   * VoLVTr;
				float q = NoLVTr * VoLVTr;
				float s = VoBr   * NoLVTr;

				float xNum = q * ( -0.5 * p + 0.25 * VoBr * NoLVTr );
				float xDenom = p*p + s * (s - 2*p) + NoLVTr * ( (Context.NoL * CosAlpha + Context.NoV) * Pow2(VoLVTr) + q * (-0.5 * (VoLVTr + Context.VoL * CosAlpha) - 0.5) );
				float TwoX1 = 2 * xNum / ( Pow2(xDenom) + Pow2(xNum) );
				float SinTheta = TwoX1 * xDenom;
				float CosTheta = 1.0 - TwoX1 * xNum;
				NoTr = CosTheta * NoTr + SinTheta * NoBr;
				VoTr = CosTheta * VoTr + SinTheta * VoBr;
			}

			Context.NoL = Context.NoL * CosAlpha + NoTr; 





			Context.VoL = Context.VoL * CosAlpha + VoTr;

			float InvLenH = rsqrt( 2 + 2 * Context.VoL );
			Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );





			Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
		}
	}
}
#line 258 "/Engine/Private/BRDF.ush"




















min16float3 Diffuse_Lambert( min16float3 DiffuseColor )
{
	return DiffuseColor * (1 / PI);
}


float3 Diffuse_Burley( float3 DiffuseColor, float Roughness, float NoV, float NoL, float VoH )
{
	float FD90 = 0.5 + 2 * VoH * VoH * Roughness;
	float FdV = 1 + (FD90 - 1) * Pow5( 1 - NoV );
	float FdL = 1 + (FD90 - 1) * Pow5( 1 - NoL );
	return DiffuseColor * ( (1 / PI) * FdV * FdL );
}


float3 Diffuse_OrenNayar( float3 DiffuseColor, float Roughness, float NoV, float NoL, float VoH )
{
	float a = Roughness * Roughness;
	float s = a;
	float s2 = s * s;
	float VoL = 2 * VoH * VoH - 1;		
	float Cosri = VoL - NoV * NoL;
	float C1 = 1 - 0.5 * s2 / (s2 + 0.33);
	float C2 = 0.45 * s2 / (s2 + 0.09) * Cosri * ( Cosri >= 0 ? rcp( max( NoL, NoV ) ) : 1 );
	return DiffuseColor / PI * ( C1 + C2 ) * ( 1 + Roughness * 0.5 );
}


float3 Diffuse_Gotanda( float3 DiffuseColor, float Roughness, float NoV, float NoL, float VoH )
{
	float a = Roughness * Roughness;
	float a2 = a * a;
	float F0 = 0.04;
	float VoL = 2 * VoH * VoH - 1;		
	float Cosri = VoL - NoV * NoL;

	float a2_13 = a2 + 1.36053;
	float Fr = ( 1 - ( 0.542026*a2 + 0.303573*a ) / a2_13 ) * ( 1 - pow( 1 - NoV, 5 - 4*a2 ) / a2_13 ) * ( ( -0.733996*a2*a + 1.50912*a2 - 1.16402*a ) * pow( 1 - NoV, 1 + rcp(39*a2*a2+1) ) + 1 );
	
	float Lm = ( max( 1 - 2*a, 0 ) * ( 1 - Pow5( 1 - NoL ) ) + min( 2*a, 1 ) ) * ( 1 - 0.5*a * (NoL - 1) ) * NoL;
	float Vd = ( a2 / ( (a2 + 0.09) * (1.31072 + 0.995584 * NoV) ) ) * ( 1 - pow( 1 - NoL, ( 1 - 0.3726732 * NoV * NoV ) / ( 0.188566 + 0.38841 * NoV ) ) );
	float Bp = Cosri < 0 ? 1.4 * NoV * NoL * Cosri : Cosri;
	float Lr = (21.0 / 20.0) * (1 - F0) * ( Fr * Lm + Vd + Bp );
	return DiffuseColor / PI * Lr;









}



float3 Diffuse_Chan( float3 DiffuseColor, float a2, float NoV, float NoL, float VoH, float NoH, float RetroReflectivityWeight)
{
	
	NoV = saturate(NoV);
	NoL = saturate(NoL);
	VoH = saturate(VoH);
	NoH = saturate(NoH);

	
	float g = saturate( (1.0 / 18.0) * log2( 2 * rcpFast(a2) - 1 ) );

	float F0 = VoH + Pow5( 1 - VoH );
	float FdV = 1 - 0.75 * Pow5( 1 - NoV );
	float FdL = 1 - 0.75 * Pow5( 1 - NoL );

	
	float Fd = lerp( F0, FdV * FdL, saturate( 2.2 * g - 0.5 ) );

	
	float Fb = ( (34.5 * g - 59 ) * g + 24.5 ) * VoH * exp2( -max( 73.2 * g - 21.2, 8.9 ) * sqrtFast( NoH ) );
	
	Fb *= RetroReflectivityWeight;
	
	return DiffuseColor * ( (1 / PI) * ( Fd + Fb ) );
}


float D_Blinn( float a2, float NoH )
{
	float n = 2 / a2 - 2;
	return (n+2) / (2*PI) * PhongShadingPow( NoH, n );		
}


float D_Beckmann( float a2, float NoH )
{
	float NoH2 = NoH * NoH;
	return exp( (NoH2 - 1) / (a2 * NoH2) ) / ( PI * a2 * NoH2 * NoH2 );
}



float D_GGX( float a2, float NoH )
{
	float d = ( NoH * a2 - NoH ) * NoH + 1;	
	return a2 / ( PI*d*d );					
}



float D_GGXaniso( float ax, float ay, float NoH, float XoH, float YoH )
{


	float a2 = ax * ay;
	float3 V = float3(ay * XoH, ax * YoH, a2 * NoH);
	float S = dot(V, V);

	return (1.0f / PI) * a2 * Square(a2 / S);




}

float Vis_Implicit()
{
	return 0.25;
}


float Vis_Neumann( float NoV, float NoL )
{
	return 1 / ( 4 * max( NoL, NoV ) );
}


float Vis_Kelemen( float VoH )
{
	
	return rcp( 4 * VoH * VoH + 1e-5);
}



float Vis_Schlick( float a2, float NoV, float NoL )
{
	float k = sqrt(a2) * 0.5;
	float Vis_SchlickV = NoV * (1 - k) + k;
	float Vis_SchlickL = NoL * (1 - k) + k;
	return 0.25 / ( Vis_SchlickV * Vis_SchlickL );
}



float Vis_Smith( float a2, float NoV, float NoL )
{
	float Vis_SmithV = NoV + sqrt( NoV * (NoV - NoV * a2) + a2 );
	float Vis_SmithL = NoL + sqrt( NoL * (NoL - NoL * a2) + a2 );
	return rcp( Vis_SmithV * Vis_SmithL );
}



float Vis_SmithJointApprox( float a2, float NoV, float NoL )
{
	float a = sqrt(a2);
	float Vis_SmithV = NoL * ( NoV * ( 1 - a ) + a );
	float Vis_SmithL = NoV * ( NoL * ( 1 - a ) + a );
	return 0.5 * rcp( Vis_SmithV + Vis_SmithL );
}


float Vis_SmithJoint(float a2, float NoV, float NoL) 
{
	float Vis_SmithV = NoL * sqrt(NoV * (NoV - NoV * a2) + a2);
	float Vis_SmithL = NoV * sqrt(NoL * (NoL - NoL * a2) + a2);
	return 0.5 * rcp(Vis_SmithV + Vis_SmithL);
}


float Vis_SmithJointAniso(float ax, float ay, float NoV, float NoL, float XoV, float XoL, float YoV, float YoL)
{
	float Vis_SmithV = NoL * length(float3(ax * XoV, ay * YoV, NoV));
	float Vis_SmithL = NoV * length(float3(ax * XoL, ay * YoL, NoL));
	return 0.5 * rcp(Vis_SmithV + Vis_SmithL);
}

float3 F_None( float3 SpecularColor )
{
	return SpecularColor;
}


float3 F_Schlick( float3 SpecularColor, float VoH )
{
	float Fc = Pow5( 1 - VoH );					
	
	
	
	return saturate( 50.0 * SpecularColor.g ) * Fc + (1 - Fc) * SpecularColor;
}

float3 F_Schlick(float3 F0, float3 F90, float VoH)
{
	float Fc = Pow5(1 - VoH);
	return F90 * Fc + (1 - Fc) * F0;
}

float3 F_AdobeF82(float3 F0, float3 F82, float VoH)
{
	
	
	
	const float Fc = Pow5(1 - VoH);
	const float K = 49.0 / 46656.0;
	float3 b = (K - K * F82) * (7776.0 + 9031.0 * F0);
	return saturate(F0 + Fc * ((1 - F0) - b * (VoH - VoH * VoH)));
}

float3 F_Fresnel( float3 SpecularColor, float VoH )
{
	float3 SpecularColorSqrt = sqrt( clamp(SpecularColor, float3(0, 0, 0), float3(0.99, 0.99, 0.99) ) );
	float3 n = ( 1 + SpecularColorSqrt ) / ( 1 - SpecularColorSqrt );
	float3 g = sqrt( n*n + VoH*VoH - 1 );
	return 0.5 * Square( (g - VoH) / (g + VoH) ) * ( 1 + Square( ((g+VoH)*VoH - 1) / ((g-VoH)*VoH + 1) ) );
}






void ModifyGGXAnisotropicNormalRoughness(float3 WorldTangent, float Anisotropy, inout float Roughness, inout float3 N, float3 V)
{
	if (abs(Anisotropy) > 0.0f)
	{
		float3 X = WorldTangent;
		float3 Y = normalize(cross(N, X));

		float3 AnisotropicDir = Anisotropy >= 0.0f ? Y : X;
		float3 AnisotropicT   = cross(AnisotropicDir, V); 
		float3 AnisotropicN   = cross(AnisotropicT, AnisotropicDir);

		float AnisotropicStretch = abs(Anisotropy) * saturate(5.0f * Roughness);
		N = normalize(lerp(N, AnisotropicN, AnisotropicStretch));



	}
}


void GetAnisotropicRoughness(float Alpha, float Anisotropy, out float ax, out float ay)
{

	
	
	ax = max(Alpha * (1.0 + Anisotropy), 0.001f);
	ay = max(Alpha * (1.0 - Anisotropy), 0.001f);





}


float2 GetAnisotropicRoughness(float Roughness, float Anisotropy)
{
	
	
	float2 Out = saturate(Roughness);
	Anisotropy = clamp(Anisotropy, -1.0, 1.0);
	Out.x = max(Roughness * sqrt(1.0 + Anisotropy), 0.001f);
	Out.y = max(Roughness * sqrt(1.0 - Anisotropy), 0.001f);
	return Out;
}


void GetAnisotropicFactor(float RoughnessX, float RoughnessY, inout float Anisotropy, inout float OriginalRoughness)
{
	const float MinRoughness = 0.001f;
	float r = Pow2(max(RoughnessX, MinRoughness) / max(RoughnessY, MinRoughness));
	Anisotropy = (r - 1.0) / (r + 1.0);
	OriginalRoughness = (RoughnessX + RoughnessY) / (sqrt(1.0 + Anisotropy) + sqrt(1.0 - Anisotropy));
}


Texture2D		PreIntegratedGF;
SamplerState	PreIntegratedGFSampler;



min16float3 EnvBRDF( min16float3 SpecularColor, min16float Roughness, min16float NoV )
{
	
	float2 AB = Texture2DSampleLevel( PreIntegratedGF, PreIntegratedGFSampler, float2( NoV, Roughness ), 0 ).rg;

	
	float3 GF = SpecularColor * AB.x + saturate( 50.0 * SpecularColor.g ) * AB.y;
	return GF;
}

min16float3 EnvBRDF(min16float3 F0, min16float3 F90, min16float Roughness, min16float NoV)
{
	
	float2 AB = Texture2DSampleLevel(PreIntegratedGF, PreIntegratedGFSampler, float2(NoV, Roughness), 0).rg;
	float3 GF = F0 * AB.x + F90 * AB.y;
	return GF;
}

min16float2 EnvBRDFApproxLazarov(min16float Roughness, min16float NoV)
{
	
	
	const min16float4 c0 = { -1, -0.0275, -0.572, 0.022 };
	const min16float4 c1 = { 1, 0.0425, 1.04, -0.04 };
	min16float4 r = Roughness * c0 + c1;
	min16float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;
	min16float2 AB = min16float2(-1.04, 1.04) * a004 + r.zw;
	return AB;
}

min16float3 EnvBRDFApprox( min16float3 SpecularColor, min16float Roughness, min16float NoV )
{
	min16float2 AB = EnvBRDFApproxLazarov(Roughness, NoV);

	
	
	float F90 = saturate( 50.0 * SpecularColor.g );

	return SpecularColor * AB.x + F90 * AB.y;
}

min16float3 EnvBRDFApprox(min16float3 F0, min16float3 F90, min16float Roughness, min16float NoV)
{
	min16float2 AB = EnvBRDFApproxLazarov(Roughness, NoV);
	return F0 * AB.x + F90 * AB.y;
}

min16float EnvBRDFApproxNonmetal( min16float Roughness, min16float NoV )
{
	
	const min16float2 c0 = { -1, -0.0275 };
	const min16float2 c1 = { 1, 0.0425 };
	min16float2 r = Roughness * c0 + c1;
	return min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;
}

void EnvBRDFApproxFullyRough(inout min16float3 DiffuseColor, inout min16float3 SpecularColor)
{
	
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
	
}
void EnvBRDFApproxFullyRough(inout min16float3 DiffuseColor, inout min16float SpecularColor)
{
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
}
void EnvBRDFApproxFullyRough(inout min16float3 DiffuseColor, inout min16float3 F0, inout min16float3 F90)
{
	DiffuseColor += F0 * 0.45;
	F0 = F90 = 0;
}


float D_InvBlinn( float a2, float NoH )
{
	float A = 4;
	float Cos2h = NoH * NoH;
	float Sin2h = 1 - Cos2h;
	
	return rcp( PI * (1 + A*a2) ) * ( 1 + A * exp( -Cos2h / a2 ) );
}

float D_InvBeckmann( float a2, float NoH )
{
	float A = 4;
	float Cos2h = NoH * NoH;
	float Sin2h = 1 - Cos2h;
	float Sin4h = Sin2h * Sin2h;
	return rcp( PI * (1 + A*a2) * Sin4h ) * ( Sin4h + A * exp( -Cos2h / (a2 * Sin2h) ) );
}

float D_InvGGX( float a2, float NoH )
{
	float A = 4;
	float d = ( NoH - a2 * NoH ) * NoH + a2;
	return rcp( PI * (1 + A*a2) ) * ( 1 + 4 * a2*a2 / ( d*d ) );
}

float Vis_Cloth( float NoV, float NoL )
{
	return rcp( 4 * ( NoL + NoV - NoL * NoV ) );
}

float D_Charlie(float Roughness, float NoH)
{
	float InvR = 1 / Roughness;
	float Cos2H = NoH * NoH;
	float Sin2H = 1 - Cos2H;
	return (2 + InvR) * pow(Sin2H, InvR * 0.5) / (2 * PI);
}


float Vis_Charlie_L(float x, float r)
{
	r = saturate(r);
	r = 1.0 - (1. - r) * (1. - r);

	float a = lerp(25.3245 , 21.5473 , r);
	float b = lerp( 3.32435,  3.82987, r);
	float c = lerp( 0.16801,  0.19823, r);
	float d = lerp(-1.27393, -1.97760, r);
	float e = lerp(-4.85967, -4.32054, r);

	return a * rcp( (1 + b * pow(x, c)) + d * x + e);
}
float Vis_Charlie(float Roughness, float NoV, float NoL)
{
	float VisV = NoV < 0.5 ? exp(Vis_Charlie_L(NoV, Roughness)) : exp(2 * Vis_Charlie_L(0.5, Roughness) - Vis_Charlie_L(1 - NoV, Roughness));
	float VisL = NoL < 0.5 ? exp(Vis_Charlie_L(NoL, Roughness)) : exp(2 * Vis_Charlie_L(0.5, Roughness) - Vis_Charlie_L(1 - NoL, Roughness));

	return rcp(((1 + VisV + VisL) * (4 * NoV * NoL)));
}

float Vis_Ashikhmin(float NoV, float NoL)
{
	return rcp(4 * (NoL + NoV - NoL * NoV));
}


float3 SimpleClearCoatTransmittance(float NoL, float NoV, float Metallic, float3 BaseColor)
{
	float3 Transmittance = 1.0;

	float ClearCoatCoverage = Metallic;
	if (ClearCoatCoverage > 0.0)
	{
		float LayerThickness = 1.0;	

		
		
		float ThinDistance = LayerThickness * (rcp(NoV) + rcp(NoL));

		
		float3 TransmittanceColor = Diffuse_Lambert(BaseColor);
		
		
		float3 ExtinctionCoefficient = -log(max(TransmittanceColor,0.0001)) / (2.0 * LayerThickness);

		
		
		float3 OpticalDepth = ExtinctionCoefficient * max(ThinDistance - 2.0 * LayerThickness, 0.0);

		
		Transmittance = exp(-OpticalDepth);
		
		Transmittance = lerp(1.0, Transmittance, ClearCoatCoverage);
	}

	
	
	
	

	return Transmittance;
}
#line   6 "/Engine/Private/ShadingModels.ush"


#line   3 "/Engine/Private/CapsuleLight.ush"


float SmoothMin( float a, float b, float k )
{
	float h = saturate( 0.5 + (0.5 / k) * (b - a) );
	return lerp( b, a, h ) - k * (h - h*h);
}

float SmoothMax( float a, float b, float k )
{
	return SmoothMin( a, b, -k );
}

float SmoothClamp( float x, float Min, float Max, float k )
{
	return SmoothMin( SmoothMax( x, Min, k ), Max, k );
	
}

struct FCapsuleLight
{
	float3	LightPos[2];
	float	Length;
	float	Radius;
	float	SoftRadius;
	float	DistBiasSqr;
};

void ClipToHorizon( inout float3 Line0, inout float3 Line1, float3 N )
{
	float NoP0 = dot( N, Line0 );
	float NoP1 = dot( N, Line1 );
	if( NoP0 < 0 ) Line0 = (  Line0 * NoP1 - Line1 * NoP0 ) / (  NoP1 - NoP0 );
	if( NoP1 < 0 ) Line1 = ( -Line0 * NoP1 + Line1 * NoP0 ) / ( -NoP1 + NoP0 );
}


float3 ClosestPointLineToPoint( float3 Line0, float3 Line1, float Length )
{
	float3 Line01 = Line1 - Line0;
	return Line0 + Line01 * saturate( -dot( Line01, Line0 ) / Pow2( Length ) );
	
}


float3 ClosestPointLineToRay( float3 Line0, float3 Line1, float Length, float3 R )
{
	float3 L0 = Line0;
	float3 L1 = Line1;
	float3 Line01 = Line1 - Line0;

	
	float A = Square( Length );
	float B = dot( R, Line01 );
	float t = saturate( dot( Line0, B*R - Line01 ) / (A - B*B) );

	return Line0 + t * Line01;
}

float3 SmallestAnglePointOnLineToRay( float3 Line0, float3 Line1, float Length, float3 R )
{
	float3 L0 = Line0;
	float3 L1 = Line1;
	float3 Line01 = Line1 - Line0;

	float A = Square( Length );
	float B = 2 * dot( Line0, Line01 );
	float C = dot( Line0, Line0 );
	float D = dot( R, Line0 );
	float E = dot( R, Line01 );
	float t = saturate( (B*D - 2*C*E) / (B*E - 2*A*D) );

	return Line0 + t * Line01;
}

float3 LineIrradiance( float3 N, float3 Line0, float3 Line1, float DistanceBiasSqr, out float CosSubtended, out float BaseIrradiance, out float NoL )
{
	float LengthSqr0 = dot( Line0, Line0 );
	float LengthSqr1 = dot( Line1, Line1 );
	float InvLength0 = rsqrt( LengthSqr0 );
	float InvLength1 = rsqrt( LengthSqr1 );
	float InvLength01 = InvLength0 * InvLength1;

	CosSubtended = dot( Line0, Line1 ) * InvLength01;
	BaseIrradiance = InvLength01 / ( CosSubtended * 0.5 + 0.5 + DistanceBiasSqr * InvLength01 );
	NoL = 0.5 * ( dot(N, Line0) * InvLength0 + dot(N, Line1) * InvLength1 );
	
	float3 VectorIrradiance = ( BaseIrradiance * 0.5 ) * ( Line0 * InvLength0 + Line1 * InvLength1 );
	return VectorIrradiance;
}


float SphereHorizonCosWrap( float NoL, float SinAlphaSqr )
{

	float SinAlpha = sqrt( SinAlphaSqr );

	if( NoL < SinAlpha )
	{
		NoL = max( NoL, -SinAlpha );
#line 115 "/Engine/Private/CapsuleLight.ush"

		
		
		
		
		NoL = Pow2( SinAlpha + NoL ) / ( 4 * SinAlpha );

	}




	return NoL;
}
#line   8 "/Engine/Private/ShadingModels.ush"

#line   4 "/Engine/Private/RectLight.ush"




#line   3 "/Engine/Private/LightData.ush"




















struct FRectTexture
{
	min16float2 AtlasUVOffset;
	min16float2 AtlasUVScale;
	min16float  AtlasMaxLevel;
};

FRectTexture InitRectTexture()
{
	FRectTexture Out;
	Out.AtlasUVOffset = 0;
	Out.AtlasUVScale  = 0;
	Out.AtlasMaxLevel = 32;
	return Out;
}

struct FRectLightData
{
	float		 BarnCosAngle;
	float		 BarnLength;
	FRectTexture AtlasData;
};

FRectLightData UnpackRectLightData(uint In0, uint In1, uint In2)
{
	FRectLightData Out;
	Out.AtlasData.AtlasUVOffset	= min16float2(f16tof32(In0 & 0xFFFF), f16tof32(In0 >> 16));
	Out.AtlasData.AtlasUVScale	= min16float2(f16tof32(In1 & 0xFFFF), f16tof32(In1 >> 16));
	Out.BarnLength				= f16tof32(In2 & 0xFFFF);			
	Out.BarnCosAngle			= ((In2 >> 16) & 0x3FF) / 1024.f;	
	Out.AtlasData.AtlasMaxLevel =  (In2 >> 26);						
	return Out;
}




struct FDirectionalLightData
{
	uint   HasDirectionalLight;
	uint   DirectionalLightShadowMapChannelMask;
	float2 DirectionalLightDistanceFadeMAD;
	float3 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float  DirectionalLightSourceRadius;
};



struct FLocalLightData
{
	
	float4 LightPositionAndInvRadius;
	float4 LightColorAndFalloffExponent;
	float4 SpotAnglesAndIdAndSourceRadiusPacked;
	float4 LightDirectionAndShadowMask;
	float4 LightTangentAndIESDataAndSpecularScale;
	float4 RectDataAndVirtualShadowMapId;

	
	
	bool bClusteredDeferredSupported;
	bool bLumenLightSupported;
	
	bool bIsSimpleLight;
	
	int  VirtualShadowMapId;
	
	int LightSceneId;
};





struct FSimpleDeferredLightData
{
	float3 TranslatedWorldPosition;
	float  InvRadius;
	float3 Color;
	float  FalloffExponent;
	
	bool bInverseSquared;
};


 
 

struct FLightShaderParameters
{
	float3 TranslatedWorldPosition;
	float  InvRadius;
	float3 Color;
	float  FalloffExponent;
	float3 Direction;
	float3 Tangent;
	float2 SpotAngles;
	float  SpecularScale;
	float  SourceRadius;
	float  SoftSourceRadius;
	float  SourceLength;
	float  RectLightBarnCosAngle;
	float  RectLightBarnLength;
	float2 RectLightAtlasUVOffset;
	float2 RectLightAtlasUVScale;
	float  RectLightAtlasMaxLevel;
	float  IESAtlasIndex;
};









 
struct FDeferredLightData
{
	float3 TranslatedWorldPosition;
	min16float   InvRadius;
	
	float3 Color;
	min16float   FalloffExponent;
	float3 Direction;
	float3 Tangent;
	float  SoftSourceRadius;
	min16float2  SpotAngles;
	float  SourceRadius;
	float  SourceLength;
	min16float   SpecularScale;
	float  ContactShadowLength;
	
	float ContactShadowCastingIntensity;
	
	float ContactShadowNonCastingIntensity;
	float2 DistanceFadeMAD;
	min16float4  ShadowMapChannelMask;
	
	bool   ContactShadowLengthInWS;
	
	bool   bInverseSquared;
	
	bool   bRadialLight;
	
	bool   bSpotLight;
	bool   bRectLight;
	
	uint   ShadowedBits;
	
	FRectLightData RectLightData;
	
	float  IESAtlasIndex;
	
	FHairTransmittanceData HairTransmittance;
};






float4 UnpackShadowMapChannelMask(uint In)
{
	
	return float4((In & 0x1), (In & 0x2) >> 1, (In & 0x4) >> 2, (In & 0x8) >> 3);
}

uint UnpackLightingChannelMask(uint In)
{
	return (In >> 8) & 0x7;
}

uint UnpackLightingChannelMask(FLocalLightData In)
{
	const uint LightTypeAndPackedShadowMapChannelMask = asuint(In.LightDirectionAndShadowMask.w);
	return UnpackLightingChannelMask(LightTypeAndPackedShadowMapChannelMask);
}

uint UnpackLightType(uint InShadowMapChannelMaskPacked)
{
	return (InShadowMapChannelMaskPacked >> 16) & 0x3;
}

bool UnpackCastShadow(uint InShadowMapChannelMaskPacked)
{
	return ((InShadowMapChannelMaskPacked >> 18) & 0x1) != 0;
}

float UnpackVolumetricScatteringIntensity(FLocalLightData In)
{
	return f16tof32(asuint(In.SpotAnglesAndIdAndSourceRadiusPacked.w) >> 16);
}

float UnpackLightSourceRadius(FLocalLightData In)
{
	return f16tof32(asuint(In.SpotAnglesAndIdAndSourceRadiusPacked.z) & 0xFFFF);
}

float UnpackLightSoftSourceRadius(FLocalLightData In)
{
	return f16tof32(asuint(In.SpotAnglesAndIdAndSourceRadiusPacked.z) >> 16);
}

float UnpackLightSourceLength(FLocalLightData In)
{
	return f16tof32(asuint(In.SpotAnglesAndIdAndSourceRadiusPacked.w));
}

float GetLightSourceRadius(FLocalLightData In)
{	
	return UnpackLightSourceRadius(In);
}

float2 GetLightSpotAngles(FLocalLightData In)
{
	uint SpotAnglesPacked = asuint(In.SpotAnglesAndIdAndSourceRadiusPacked.x);
	float2 SpotAngles = float2(f16tof32(SpotAnglesPacked & 0xFFFF), f16tof32(SpotAnglesPacked >> 16));
	return SpotAngles;
}

float UnpackLightSpecularScale(FLocalLightData In)
{
	return f16tof32(asuint(In.LightTangentAndIESDataAndSpecularScale.w) & 0xFFFF);
}

float UnpackLigthIESAtlasIndex(FLocalLightData In)
{
	return f16tof32(asuint(In.LightTangentAndIESDataAndSpecularScale.w) >> 16);
}



 
FRectTexture ConvertToRectTexture(FDeferredLightData In)
{
	FRectTexture Output;
	Output.AtlasUVOffset = In.RectLightData.AtlasData.AtlasUVOffset;
	Output.AtlasUVScale  = In.RectLightData.AtlasData.AtlasUVScale;
	Output.AtlasMaxLevel = In.RectLightData.AtlasData.AtlasMaxLevel;
	return Output;
}


FDeferredLightData ConvertToDeferredLight(
	const FLocalLightData In, 
	float InSpecularScale, 
	inout min16float4 OutPreviewShadowMapChannelMask,
	inout uint  OutLightingChannelMask)
{
	FDeferredLightData Out = (FDeferredLightData)0;

	const uint LightTypeAndPackedShadowMapChannelMask = asuint(In.LightDirectionAndShadowMask.w);
	const uint LightType = UnpackLightType(LightTypeAndPackedShadowMapChannelMask);

	Out.TranslatedWorldPosition = In.LightPositionAndInvRadius.xyz;
	Out.InvRadius				= In.LightPositionAndInvRadius.w;
	Out.Color					= In.LightColorAndFalloffExponent.xyz;
	Out.FalloffExponent			= In.LightColorAndFalloffExponent.w;
	Out.Direction				= In.LightDirectionAndShadowMask.xyz;
	Out.SpotAngles				= GetLightSpotAngles(In);
	Out.SourceRadius			= UnpackLightSourceRadius(In);
	Out.SourceLength			= UnpackLightSourceLength(In);
	Out.Tangent					= In.LightTangentAndIESDataAndSpecularScale.xyz;
	Out.SoftSourceRadius		= UnpackLightSoftSourceRadius(In);
	Out.bInverseSquared			= Out.FalloffExponent == 0;
	Out.SpecularScale			= UnpackLightSpecularScale(In) * InSpecularScale;
	Out.bRadialLight			= true;
	Out.bSpotLight				= LightType == 2;
	Out.bRectLight				= LightType == 3;
	Out.HairTransmittance		= InitHairTransmittanceData();
	Out.RectLightData			= UnpackRectLightData(
									asuint(In.RectDataAndVirtualShadowMapId.x),
									asuint(In.RectDataAndVirtualShadowMapId.y),
									asuint(In.RectDataAndVirtualShadowMapId.w));
	Out.IESAtlasIndex			= UnpackLigthIESAtlasIndex(In);

	
	
	
	
	
	
	
	Out.ShadowedBits				= (LightTypeAndPackedShadowMapChannelMask & 0xFF) != 0 ? 1 : 0;
	Out.ShadowMapChannelMask		= UnpackShadowMapChannelMask(LightTypeAndPackedShadowMapChannelMask);
	OutPreviewShadowMapChannelMask	= UnpackShadowMapChannelMask(LightTypeAndPackedShadowMapChannelMask >> 4);
	OutLightingChannelMask			= UnpackLightingChannelMask(LightTypeAndPackedShadowMapChannelMask);
	return Out;
}

FDeferredLightData ConvertToDeferredLight(const FLocalLightData In)
{
	min16float4 OutPreviewShadowMapChannelMask = 0;
	uint OutLightingChannelMask = 0x7;
	return ConvertToDeferredLight(In, 1.0f, OutPreviewShadowMapChannelMask, OutLightingChannelMask);
}

FDeferredLightData ConvertToDeferredLight_Mobile(const FLocalLightData In)
{
	min16float4 OutPreviewShadowMapChannelMask = 0;
	uint OutLightingChannelMask = 0x7;
	FDeferredLightData Out = ConvertToDeferredLight(In, 1.0f, OutPreviewShadowMapChannelMask, OutLightingChannelMask);	
	
	
	Out.SourceRadius	= 0;
	Out.SourceLength	= 0;
	Out.Tangent			= 0;
	Out.SoftSourceRadius= 0;
	Out.SpecularScale	= 1.0f;
	
	Out.bSpotLight		= Out.bSpotLight || Out.bRectLight;
	Out.bRectLight		= false;

	return Out;
}

FLightShaderParameters ConvertToLightShaderParameters(FDeferredLightData In)
{
	FLightShaderParameters Out;
	Out.TranslatedWorldPosition	= In.TranslatedWorldPosition;
	Out.InvRadius				= In.InvRadius;
	Out.Color					= In.Color;
	Out.FalloffExponent			= In.FalloffExponent;
	Out.Direction				= In.Direction;
	Out.Tangent					= In.Tangent;
	Out.SpotAngles				= In.SpotAngles;
	Out.SpecularScale			= 1;
	Out.SourceRadius			= In.SourceRadius;
	Out.SoftSourceRadius		= In.SoftSourceRadius;
	Out.SourceLength			= In.SourceLength;
	Out.RectLightBarnCosAngle	= In.RectLightData.BarnCosAngle;
	Out.RectLightBarnLength		= In.RectLightData.BarnLength;
	Out.RectLightAtlasUVOffset	= In.RectLightData.AtlasData.AtlasUVOffset;
	Out.RectLightAtlasUVScale	= In.RectLightData.AtlasData.AtlasUVScale;
	Out.RectLightAtlasMaxLevel	= In.RectLightData.AtlasData.AtlasMaxLevel;
	return Out;
}

FLightShaderParameters ConvertFromLocal(const FLocalLightData In)
{
	FLightShaderParameters Out	= (FLightShaderParameters)0;
	Out.TranslatedWorldPosition	= In.LightPositionAndInvRadius.xyz;
	Out.InvRadius				= In.LightPositionAndInvRadius.w;
	Out.Color					= In.LightColorAndFalloffExponent.xyz;
	Out.FalloffExponent			= In.LightColorAndFalloffExponent.w;
	Out.Direction				= In.LightDirectionAndShadowMask.xyz;
	Out.Tangent					= In.LightTangentAndIESDataAndSpecularScale.xyz;
	Out.SpotAngles				= GetLightSpotAngles(In);
	Out.SpecularScale			= UnpackLightSpecularScale(In);
	Out.IESAtlasIndex			= UnpackLigthIESAtlasIndex(In);
	Out.SourceRadius			= UnpackLightSourceRadius(In);
	Out.SoftSourceRadius		= UnpackLightSoftSourceRadius(In);
	Out.SourceLength			= UnpackLightSourceLength(In);

	const FRectLightData RectLightData = UnpackRectLightData(
									asuint(In.RectDataAndVirtualShadowMapId.x),
									asuint(In.RectDataAndVirtualShadowMapId.y),
									asuint(In.RectDataAndVirtualShadowMapId.w));
	Out.RectLightBarnCosAngle	= RectLightData.BarnCosAngle;
	Out.RectLightBarnLength		= RectLightData.BarnLength;
	Out.RectLightAtlasUVOffset	= RectLightData.AtlasData.AtlasUVOffset;
	Out.RectLightAtlasUVScale	= RectLightData.AtlasData.AtlasUVScale;
	Out.RectLightAtlasMaxLevel	= RectLightData.AtlasData.AtlasMaxLevel;

	return Out;
}


FDeferredLightData ConvertToDeferredLight(
	FDirectionalLightData In, 
	float InSpecularScale, 
	inout min16float4 OutPreviewShadowMapChannelMask,
	inout uint OutLightingChannelMask)
{
	FDeferredLightData Out	= (FDeferredLightData)0;
	Out.Color				= In.DirectionalLightColor;
	Out.FalloffExponent		= 0;
	Out.Direction			= In.DirectionalLightDirection;
	Out.DistanceFadeMAD		= In.DirectionalLightDistanceFadeMAD;
	Out.bRadialLight		= false;
	Out.SpecularScale		= InSpecularScale;
	Out.ShadowedBits		= (In.DirectionalLightShadowMapChannelMask & 0xFF) != 0 ? 1 : 0;
	Out.HairTransmittance	= InitHairTransmittanceData();
	Out.SourceRadius		= In.DirectionalLightSourceRadius;

	
	
	
	
	
	
	
	Out.ShadowMapChannelMask		= UnpackShadowMapChannelMask(In.DirectionalLightShadowMapChannelMask);
	OutPreviewShadowMapChannelMask	= UnpackShadowMapChannelMask(In.DirectionalLightShadowMapChannelMask >> 4);
	OutLightingChannelMask			= UnpackLightingChannelMask(In.DirectionalLightShadowMapChannelMask);

	return Out;
}


FSimpleDeferredLightData ConvertToSimpleLight(FLocalLightData In)
{
	FSimpleDeferredLightData Out = (FSimpleDeferredLightData)0;
	Out.TranslatedWorldPosition = In.LightPositionAndInvRadius.xyz;
	Out.InvRadius				= In.LightPositionAndInvRadius.w;
	Out.Color					= In.LightColorAndFalloffExponent.xyz;
	Out.FalloffExponent			= In.LightColorAndFalloffExponent.w;
	Out.bInverseSquared			= Out.FalloffExponent == 0;
	return Out;
}





bool IsLightVisible(FLocalLightData InLight, float3 TranslatedWorldPosition)
{
	float InvLightRadiusSq = InLight.LightPositionAndInvRadius.w * InLight.LightPositionAndInvRadius.w;
	return length2(TranslatedWorldPosition - InLight.LightPositionAndInvRadius.xyz) * InvLightRadiusSq <= 1.0f;
}
#line   8 "/Engine/Private/RectLight.ush"






struct FRect
{
	float3		Origin;
	float3x3	Axis;
	float2		Extent;
	float2		FullExtent;
	float2		Offset;
};

float3 SampleRectTexture(FRectTexture RectTexture, float2 RectUV, float Level, bool bIsReference = false)
{

	const bool bIsValid = RectTexture.AtlasMaxLevel < 32;
	const float2 RectTextureSize = RectTexture.AtlasUVScale * View_RectLightAtlasSizeAndInvSize.xy;
	Level += log2(min(RectTextureSize.x, RectTextureSize.y)) - 2.f;
	Level  = min(Level, RectTexture.AtlasMaxLevel);

	RectUV = saturate(RectUV) * RectTexture.AtlasUVScale + RectTexture.AtlasUVOffset;
	return bIsValid ? View_RectLightAtlasTexture.SampleLevel(View_SharedTrilinearClampedSampler, RectUV, bIsReference ? 0 : Level).rgb : 1.f;



}


float3 RectIrradianceLambert( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{







	float3 LocalPosition;
	LocalPosition.x = dot( Rect.Axis[0], Rect.Origin );		
	LocalPosition.y = dot( Rect.Axis[1], Rect.Origin );		
	LocalPosition.z = dot( Rect.Axis[2], Rect.Origin );		
	

	float x0 = LocalPosition.x - Rect.Extent.x;
	float x1 = LocalPosition.x + Rect.Extent.x;
	float y0 = LocalPosition.y - Rect.Extent.y;
	float y1 = LocalPosition.y + Rect.Extent.y;
	float z0 = LocalPosition.z;
	float z0Sqr = z0 * z0;
	

	float3 v0 = float3( x0, y0, z0 );
	float3 v1 = float3( x1, y0, z0 );
	float3 v2 = float3( x1, y1, z0 );
	float3 v3 = float3( x0, y1, z0 );

	float3 L0 = v0 * rsqrt( dot( v0.xy, v0.xy ) + z0Sqr );	
	float3 L1 = v1 * rsqrt( dot( v1.xy, v1.xy ) + z0Sqr );	
	float3 L2 = v2 * rsqrt( dot( v2.xy, v2.xy ) + z0Sqr );	
	float3 L3 = v3 * rsqrt( dot( v3.xy, v3.xy ) + z0Sqr );	
	

	









	float c01 = dot( L0, L1 );
	float c12 = dot( L1, L2 );
	float c23 = dot( L2, L3 );
	float c30 = dot( L3, L0 );
	












	
	

	float w01 = ( 1.5708 - 0.175 * c01 ) * rsqrt( c01 + 1 );	
	float w12 = ( 1.5708 - 0.175 * c12 ) * rsqrt( c12 + 1 );	
	float w23 = ( 1.5708 - 0.175 * c23 ) * rsqrt( c23 + 1 );	
	float w30 = ( 1.5708 - 0.175 * c30 ) * rsqrt( c30 + 1 );	
	









	float3 L;
	L  = cross( L1, -w01 * L0 +  w12 * L2 );	
	L += cross( L3,  w30 * L0 + -w23 * L2 );	



	
	L = L.x * Rect.Axis[0] + L.y * Rect.Axis[1] + L.z * Rect.Axis[2];	

	float LengthSqr = dot( L, L );
	float InvLength = rsqrt( LengthSqr );
	float Length = LengthSqr * InvLength;

	
	L *= InvLength;

	BaseIrradiance = 0.5 * Length;

	
	
	
	float SinAlphaSqr = BaseIrradiance * (1.0 / PI);

	NoL = SphereHorizonCosWrap( dot( N, L ), SinAlphaSqr );

	return L;
}

float3 RectIrradianceApproxKaris( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{
	float2 RectLocal;
	RectLocal.x = SmoothClamp( dot( Rect.Axis[0], -Rect.Origin ), -Rect.Extent.x, Rect.Extent.x, 16 );
	RectLocal.y = SmoothClamp( dot( Rect.Axis[1], -Rect.Origin ), -Rect.Extent.y, Rect.Extent.y, 16 );

	float3 ClosestPoint = Rect.Origin;
	ClosestPoint += Rect.Axis[0] * RectLocal.x;
	ClosestPoint += Rect.Axis[1] * RectLocal.y;

	float3 OppositePoint = 2 * Rect.Origin - ClosestPoint;
	
	float3 L0 = normalize( ClosestPoint );
	float3 L1 = normalize( OppositePoint );
	float3 L  = normalize( L0 + L1 );

	
	float Distance = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
	float DistanceSqr = Distance * Distance;

	
	
	BaseIrradiance = 4 * Rect.Extent.x * Rect.Extent.y * rsqrt( ( (4 / PI) * Square( Rect.Extent.x ) + DistanceSqr ) * ( (4 / PI) * Square( Rect.Extent.y ) + DistanceSqr ) );
	BaseIrradiance *= saturate( dot( Rect.Axis[2], L ) );

	
	
	
	float SinAlphaSqr = BaseIrradiance * (1.0 / PI);

	NoL = SphereHorizonCosWrap( dot( N, L ), SinAlphaSqr );

	return L;
}

float3 RectIrradianceApproxLagarde( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{
	float3 L = normalize( Rect.Origin );

	float3 v0 = Rect.Origin - Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y;
	float3 v1 = Rect.Origin + Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y;
	float3 v2 = Rect.Origin + Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y;
	float3 v3 = Rect.Origin - Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y;

	float3 n0 = normalize( cross( v0, v1 ) );
	float3 n1 = normalize( cross( v1, v2 ) );
	float3 n2 = normalize( cross( v2, v3 ) );
	float3 n3 = normalize( cross( v3, v0 ) );

	float g0 = acos( dot( n0, n1 ) );
	float g1 = acos( dot( n1, n2 ) );
	float g2 = acos( dot( n2, n3 ) );
	float g3 = acos( dot( n3, n0 ) );

	
	BaseIrradiance = g0 + g1 + g2 + g3 - 2*PI;

	NoL = 0.2 * ( saturate( dot( N, L ) ) +
		saturate( dot( N, normalize(v0) ) ) +
		saturate( dot( N, normalize(v1) ) ) +
		saturate( dot( N, normalize(v2) ) ) +
		saturate( dot( N, normalize(v3) ) ) );

	return L;
}

float3 RectIrradianceApproxDrobot( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{












	
	float clampCosAngle = 0.001 + saturate( dot( N, Rect.Axis[2] ) );
	
	float3 d0 = normalize( -Rect.Axis[2] + N * clampCosAngle );
	
	float3 d1 = normalize( N - Rect.Axis[2] * clampCosAngle );
	float3 dh = normalize( d0 + d1 );


	
	float3 PointOnPlane = dh * ( dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], dh ) );

	float3 ClosestPoint = Rect.Origin;
	ClosestPoint += Rect.Axis[0] * clamp( dot( Rect.Axis[0], PointOnPlane - Rect.Origin ), -Rect.Extent.x, Rect.Extent.x );
	ClosestPoint += Rect.Axis[1] * clamp( dot( Rect.Axis[1], PointOnPlane - Rect.Origin ), -Rect.Extent.y, Rect.Extent.y );

	float3 v0 = Rect.Origin - Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y;
	float3 v1 = Rect.Origin + Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y;
	float3 v2 = Rect.Origin + Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y;
	float3 v3 = Rect.Origin - Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y;

	float3 n0 = normalize( cross( v0, v1 ) );
	float3 n1 = normalize( cross( v1, v2 ) );
	float3 n2 = normalize( cross( v2, v3 ) );
	float3 n3 = normalize( cross( v3, v0 ) );

	float g0 = acos( dot( n0, n1 ) );
	float g1 = acos( dot( n1, n2 ) );
	float g2 = acos( dot( n2, n3 ) );
	float g3 = acos( dot( n3, n0 ) );

	float SolidAngle = g0 + g1 + g2 + g3 - 2*PI;

	float3 L = normalize( ClosestPoint );












	BaseIrradiance = SolidAngle;
	NoL = saturate( dot( N, L ) );

	return L;
}


float3 SampleSourceTexture( float3 L, FRect Rect, FRectTexture RectTexture)
{

	
	L += Rect.Axis[2] * saturate( 0.001 - dot( Rect.Axis[2], L ) );

	
	float DistToPlane = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
	float3 PointOnPlane = L * DistToPlane;

	float2 PointInRect;
	PointInRect.x = dot( Rect.Axis[0], PointOnPlane - Rect.Origin );
	PointInRect.y = dot( Rect.Axis[1], PointOnPlane - Rect.Origin );

	
    float2 RectUV = (PointInRect + Rect.Offset) / max(0.0001f, Rect.FullExtent) * float2(0.5, -0.5) + 0.5;
	
	float Level = log2( DistToPlane * rsqrt( max(0.0001f, Rect.FullExtent.x * Rect.FullExtent.y) ) );

    return SampleRectTexture(RectTexture, RectUV, Level);



}

float IntegrateEdge( float3 L0, float3 L1 )
{
	float c01 = dot( L0, L1 );
	
	

	








	float w01 = ( 0.8543985 + (0.4965155 + 0.0145206 * abs(c01)) * abs(c01) ) /
				( 3.4175940 + (4.1616724 + abs(c01)) * abs(c01) );
	
	w01 = c01 > 0 ? w01 : 0.5 * rsqrt( 1 - c01 * c01 ) - w01;


	return w01;
}


float3 PolygonIrradiance( float3 Poly[4] )
{
	float3 L0 = normalize( Poly[0] );	
	float3 L1 = normalize( Poly[1] );	
	float3 L2 = normalize( Poly[2] );	
	float3 L3 = normalize( Poly[3] );	
	








	float w01 = IntegrateEdge( L0, L1 );
	float w12 = IntegrateEdge( L1, L2 );
	float w23 = IntegrateEdge( L2, L3 );
	float w30 = IntegrateEdge( L3, L0 );








	float3 L;
	L  = cross( L1, -w01 * L0 +  w12 * L2 );	
	L += cross( L3,  w30 * L0 + -w23 * L2 );	



	
	return L;
}


float3 RectGGXApproxLTC( float Roughness, float3 SpecularColor, min16float3 N, float3 V, FRect Rect, FRectTexture RectTexture )
{
	
	const float3 F0  = SpecularColor;
	const float3 F90 = saturate(50.0 * SpecularColor);

	
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	float NoV = saturate( abs( dot(N, V) ) + 1e-5 );

	float2 UV = float2( Roughness, sqrt( 1 - NoV ) );
	UV = UV * (63.0 / 64.0) + (0.5 / 64.0);
   
	float4 LTCMat = View_LTCMatTexture.SampleLevel( View_LTCMatSampler, UV, 0 );
	float4 LTCAmp = View_LTCAmpTexture.SampleLevel( View_LTCAmpSampler, UV, 0 );

	float3x3 LTC = {
		float3( LTCMat.x, 0, LTCMat.z ),
		float3(        0, 1,        0 ),
		float3( LTCMat.y, 0, LTCMat.w )
	};

	float LTCDet = LTCMat.x * LTCMat.w - LTCMat.y * LTCMat.z;

	float4 InvLTCMat = LTCMat / LTCDet;
	float3x3 InvLTC = {
		float3( InvLTCMat.w, 0,-InvLTCMat.z ),
		float3(	          0, 1,           0 ),
		float3(-InvLTCMat.y, 0, InvLTCMat.x )
	};

	
	float3 T1 = normalize( V - N * dot( N, V ) );
	float3 T2 = cross( N, T1 );
	float3x3 TangentBasis = float3x3( T1, T2, N );

	LTC = mul( LTC, TangentBasis );
	InvLTC = mul( transpose( TangentBasis ), InvLTC );

	float3 Poly[4];
	Poly[0] = mul( LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[1] = mul( LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[2] = mul( LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );
	Poly[3] = mul( LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );

	
	float3 L = PolygonIrradiance( Poly );

	float LengthSqr = dot( L, L );
	float InvLength = rsqrt( LengthSqr );
	float Length = LengthSqr * InvLength;

	
	L *= InvLength;

	
	
	
	float SinAlphaSqr = Length;

	float NoL = SphereHorizonCosWrap( L.z, SinAlphaSqr );
	float Irradiance = SinAlphaSqr * NoL;

	
	Irradiance = -min(-Irradiance, 0.0);









	
	float3 IrradianceScale = F90 * LTCAmp.y + ( LTCAmp.x - LTCAmp.y ) * F0;
	
	
	L = mul( InvLTC, L );

	float3 LightColor = SampleSourceTexture( L, Rect, RectTexture );
	
	return LightColor * Irradiance * IrradianceScale;
}




struct FSphericalRect
{
	float3x3	Axis;

	float		x0;
	float		x1;
	float		y0;
	float		y1;
	float		z0;

	float		b0;
	float		b1;
	float		k;
	float		SolidAngle;
};


FSphericalRect BuildSphericalRect( FRect Rect )
{
	FSphericalRect SphericalRect;

	SphericalRect.Axis = Rect.Axis;

	float3 LocalPosition;
	LocalPosition.x = dot( Rect.Axis[0], Rect.Origin );
	LocalPosition.y = dot( Rect.Axis[1], Rect.Origin );
	LocalPosition.z = dot( Rect.Axis[2], Rect.Origin );

	SphericalRect.x0 = LocalPosition.x - Rect.Extent.x;
	SphericalRect.x1 = LocalPosition.x + Rect.Extent.x;
	SphericalRect.y0 = LocalPosition.y - Rect.Extent.y;
	SphericalRect.y1 = LocalPosition.y + Rect.Extent.y;
	SphericalRect.z0 = -abs( LocalPosition.z );

	SphericalRect.Axis[2] *= LocalPosition.z > 0 ? -1 : 1;

	float3 v0 = float3( SphericalRect.x0, SphericalRect.y0, SphericalRect.z0 );
	float3 v1 = float3( SphericalRect.x1, SphericalRect.y0, SphericalRect.z0 );
	float3 v2 = float3( SphericalRect.x1, SphericalRect.y1, SphericalRect.z0 );
	float3 v3 = float3( SphericalRect.x0, SphericalRect.y1, SphericalRect.z0 );

	float3 n0 = normalize( cross( v0, v1 ) );
	float3 n1 = normalize( cross( v1, v2 ) );
	float3 n2 = normalize( cross( v2, v3 ) );
	float3 n3 = normalize( cross( v3, v0 ) );

	float g0 = acos( -dot( n0, n1 ) );
	float g1 = acos( -dot( n1, n2 ) );
	float g2 = acos( -dot( n2, n3 ) );
	float g3 = acos( -dot( n3, n0 ) );

	SphericalRect.b0 = n0.z;
	SphericalRect.b1 = n2.z;

	SphericalRect.k = 2*PI - g2 - g3;
	SphericalRect.SolidAngle = g0 + g1 - SphericalRect.k;

	return SphericalRect;
}

struct FSphericalRectSample {
	float3 Direction;
	float2 UV;
};

FSphericalRectSample UniformSampleSphericalRectWithUV(float2 E, FSphericalRect Rect)
{
	float au = E.x * Rect.SolidAngle + Rect.k;
	float fu = (cos(au) * Rect.b0 - Rect.b1) / sin(au);
	float cu = rsqrt(fu * fu + Rect.b0 * Rect.b0) * (fu > 0 ? 1 : -1);
	cu = clamp(cu, -1, 1);				

	float xu = -(cu * Rect.z0) * rsqrt(1 - cu * cu);
	xu = clamp(xu, Rect.x0, Rect.x1);	

	float d = sqrt(xu * xu + Rect.z0 * Rect.z0);
	float h0 = Rect.y0 * rsqrt(d * d + Rect.y0 * Rect.y0);
	float h1 = Rect.y1 * rsqrt(d * d + Rect.y1 * Rect.y1);
	float hv = h0 + E.y * (h1 - h0);
	float yv = (hv * hv < 1 - 1e-6) ? (hv * d) * rsqrt(1 - hv * hv) : Rect.y1;

	FSphericalRectSample Result;
	Result.Direction = mul(float3(xu, yv, Rect.z0), Rect.Axis);
	Result.UV = float2(xu - Rect.x0, yv - Rect.y0) / float2(Rect.x1 - Rect.x0, Rect.y1 - Rect.y0);

	return Result;
}

float3 UniformSampleSphericalRect( float2 E, FSphericalRect Rect )
{
	return UniformSampleSphericalRectWithUV(E, Rect).Direction;
}

float3 RectIrradianceRef( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{
	FSphericalRect SphericalRect = BuildSphericalRect( Rect );

	const uint NumSamples = 32;

	float3 L = 0;
	NoL = 0;

	[loop]
	for( uint i = 0; i < NumSamples; i++ )
	{
		float2 E = Hammersley( i, NumSamples, 0 );
		float3 Ls = normalize( UniformSampleSphericalRect( E, SphericalRect ) );

		L   += Ls;
		NoL += saturate( dot(N, Ls) );
	}

	BaseIrradiance = SphericalRect.SolidAngle;
	NoL /= NumSamples;

	return normalize(L);
}

FRect GetRect(
	float3 ToLight, 
	float3 LightDataDirection, 
	float3 LightDataTangent, 
	float LightDataSourceRadius, 
	float LightDataSourceLength, 
	float LightDataRectLightBarnCosAngle, 
	float LightDataRectLightBarnLength,
	bool bComputeVisibleRect)
{
	
	FRect Rect;
	Rect.Origin = ToLight;
	Rect.Axis[1] = LightDataTangent;
	Rect.Axis[2] = LightDataDirection;
	Rect.Axis[0] = cross( Rect.Axis[1], Rect.Axis[2] );
	Rect.Extent = float2(LightDataSourceRadius, LightDataSourceLength);
	Rect.FullExtent = Rect.Extent;
	Rect.Offset = 0;

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	if (bComputeVisibleRect && LightDataRectLightBarnCosAngle > 0.035f)
	{
		const float3 LightdPdv = -Rect.Axis[1];
		const float3 LightdPdu = -Rect.Axis[0];
		const float2 LightExtent = float2(LightDataSourceRadius, LightDataSourceLength);
		const float BarnLength = LightDataRectLightBarnLength;
	
		
		float3 S_Light = mul(Rect.Axis, ToLight);

		
		
		
		const float CosTheta = LightDataRectLightBarnCosAngle;
		const float SinTheta = sqrt(1 - CosTheta * CosTheta);
		const float BarnDepth = min(S_Light.z, CosTheta * BarnLength);
		const float S_ratio = BarnDepth / max(0.0001f, CosTheta * BarnLength);
		const float D_B = SinTheta * BarnLength * S_ratio;
		
		
		const float2 SignS = sign(S_Light.xy);
		S_Light.xy = SignS * max(abs(S_Light.xy), LightExtent + D_B.xx);
		
		
		const float3 C = float3(SignS * (LightExtent + D_B.xx), BarnDepth);
			
		
		
		const float3 SProj = S_Light - C;
		const float CosEta = max(SProj.z, 0.001f);
		const float2 SinEta = abs(SProj.xy);
		const float2 TanEta = abs(SProj.xy) / CosEta;
		const float2 D_S = BarnDepth * TanEta;

		
		
		
		const float2 MinXY = clamp(-LightExtent + (D_S - D_B.xx) * max(0, -SignS), -LightExtent, LightExtent);
		const float2 MaxXY = clamp( LightExtent - (D_S - D_B.xx) * max(0,  SignS), -LightExtent, LightExtent);
		const float2 RectOffset = 0.5f * (MinXY + MaxXY);

		Rect.Extent = 0.5f * (MaxXY - MinXY);
		Rect.Origin = Rect.Origin + LightdPdu * RectOffset.x + LightdPdv * RectOffset.y;
		Rect.Offset = -RectOffset;
		Rect.FullExtent = LightExtent;
	}

	return Rect;
}


FRect GetRect(FLightShaderParameters In, float3 TranslatedWorldPosition)
{
	return GetRect(In.TranslatedWorldPosition - TranslatedWorldPosition,
		In.Direction,
		In.Tangent,
		In.SourceRadius,
		In.SourceLength,
		In.RectLightBarnCosAngle,
		In.RectLightBarnLength,
		true);
}

bool IsRectVisible(FRect Rect)
{
	
	return Rect.Extent.x != 0 && Rect.Extent.y != 0;
}
#line   9 "/Engine/Private/ShadingModels.ush"

#line   3 "/Engine/Private/AreaLightCommon.ush"




struct FAreaLight
{
	float		SphereSinAlpha;
	float		SphereSinAlphaSoft;
	float		LineCosSubtended;

	float3		FalloffColor;

	FRect		Rect;
	FRectTexture Texture;

	uint		IsRectAndDiffuseMicroReflWeight;
};

struct FAreaLightIntegrateContext
{
	FAreaLight AreaLight;
	float3 L;
	float NoL;
	float Falloff;
};

void SetIsRectLight(inout FAreaLight AreaLight, bool bIsRectLight)
{
	AreaLight.IsRectAndDiffuseMicroReflWeight = (AreaLight.IsRectAndDiffuseMicroReflWeight & 0xFFFFFFFE) | (bIsRectLight ? 0x1 : 0x0);
}

bool IsRectLight(FAreaLight AreaLight)
{
	return (AreaLight.IsRectAndDiffuseMicroReflWeight & 0x00000001) == 0x1;
}

void SetAreaLightDiffuseMicroReflWeight(inout FAreaLight AreaLight, float Weight)
{
	
	AreaLight.IsRectAndDiffuseMicroReflWeight = (AreaLight.IsRectAndDiffuseMicroReflWeight & 0x00000001) | (asuint(Weight) << 1);
}

float GetAreaLightDiffuseMicroReflWeight(FAreaLight AreaLight)
{
	return asfloat(AreaLight.IsRectAndDiffuseMicroReflWeight >> 1);
}

bool IsAreaLight(FAreaLight AreaLight)
{
	return IsRectLight(AreaLight) || GetAreaLightDiffuseMicroReflWeight(AreaLight) < 1.0f;
}

FAreaLightIntegrateContext InitAreaLightIntegrateContext()
{
	
	FAreaLightIntegrateContext Out;
	Out.AreaLight.SphereSinAlpha = 0;
	Out.AreaLight.SphereSinAlphaSoft = 0;
	Out.AreaLight.LineCosSubtended = 0;
	Out.AreaLight.FalloffColor = 0;
	Out.AreaLight.Rect = (FRect)0;
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	Out.AreaLight.Texture = InitRectTexture();
	Out.L = 0;
	Out.NoL = 0;
	Out.Falloff = 0;
	return Out;
}
#line  10 "/Engine/Private/ShadingModels.ush"

#line   3 "/Engine/Private/TransmissionCommon.ush"






#line   7 "/Engine/Private/SubsurfaceProfileCommon.ush"




















































min16float4 GetSubsurfaceProfileTexture(uint SampleIndex, uint SubsurfaceProfileInt)
{
	

	return View_SSProfilesTexture.SampleLevel(View_SSProfilesSampler, (uint2(SampleIndex, SubsurfaceProfileInt) + float2(0.5f, 0.5f)) * View_SSProfilesTextureSizeAndInvSize.zw, 0);



}

min16float4 GetSubsurfaceProfileTexture(Texture2D InSSProfilesTexture, SamplerState InSSProfilesSampler, float4 InSSProfilesTextureSizeAndInvSize, uint SampleIndex, uint SubsurfaceProfileInt)
{
	

	return InSSProfilesTexture.SampleLevel(InSSProfilesSampler, (uint2(SampleIndex, SubsurfaceProfileInt) + float2(0.5f, 0.5f)) * InSSProfilesTextureSizeAndInvSize.zw, 0);



}

void GetSubsurfaceProfileDualSpecular(uint SubsurfaceProfileInt, min16float Roughness, min16float Opacity, out min16float LobeRoughness0, out min16float LobeRoughness1, out min16float LobeMix)
{
	const min16float4 Data = GetSubsurfaceProfileTexture((((((0+1)+1)+1)+1)+1), SubsurfaceProfileInt);

	
	
	min16float MaterialRoughnessToLobeRoughness0 = lerp(1.0f, Data.x * 2.0f, saturate((Opacity - 0.10) * 10.0f));
	min16float MaterialRoughnessToLobeRoughness1 = lerp(1.0f, Data.y * 2.0f, saturate((Opacity - 0.10) * 10.0f));
	LobeMix = Data.z;

	
	LobeRoughness0 = max(saturate(Roughness * MaterialRoughnessToLobeRoughness0), 0.02f);
	LobeRoughness1 = saturate(Roughness * MaterialRoughnessToLobeRoughness1);
}


float4 GetSubsurfaceProfileSurfaceAlbedo(uint SubsurfaceProfileInt)
{
	return GetSubsurfaceProfileTexture((0+1), SubsurfaceProfileInt);
}

float4 GetSubsurfaceProfileDiffuseMeanFreePath(uint SubsurfaceProfileInt)
{
	return GetSubsurfaceProfileTexture(((0+1)+1), SubsurfaceProfileInt);
}

float GetSubsurfaceProfileWorldUnitScale(uint SubsurfaceProfileInt)
{
	return GetSubsurfaceProfileTexture(0, SubsurfaceProfileInt).a;
}

float DecodeWorldUnitScale(float EncodedWorldUnitScale)
{
	return EncodedWorldUnitScale * 1/0.02f;
}

float4 DecodeDiffuseMeanFreePath(float4 EncodedDiffuseMeanFreePath)
{
	return EncodedDiffuseMeanFreePath * 1/(0.01f*0.2f);
}

float EncodeScatteringDistribution(float ScatteringDistribution)
{
	return (ScatteringDistribution + 1.0f) * 0.5f;
}

float DecodeScatteringDistribution(float ScatteringDistribution)
{
	return ScatteringDistribution * 2.0f - 1.0f;
}

bool GetSubsurfaceTransmittanceProfileUseBurley(uint SubsurfaceProfileInt)
{
	min16float Type = GetSubsurfaceProfileTexture(((((0+1)+1)+1)+1), SubsurfaceProfileInt).a;
	return abs(Type - 0) < 0.01f;
}

bool GetSubsurfaceProfileUseBurley(uint SubsurfaceProfileInt)
{
	min16float Type = GetSubsurfaceProfileTexture(((((0+1)+1)+1)+1), SubsurfaceProfileInt).a;
	return abs(Type - 0) < 0.01f;
}

bool GetSubsurfaceProfileUseSeparable(uint SubsurfaceProfileInt)
{
	min16float Type = GetSubsurfaceProfileTexture(((((0+1)+1)+1)+1), SubsurfaceProfileInt).a;
	return abs(Type - 1) < 0.01f;
}

float4 GetSubsurfaceProfileDMFPInCm(int SubsurfaceProfileInt)
{
	const float4 DiffuseMeanFreePath = DecodeDiffuseMeanFreePath(GetSubsurfaceProfileDiffuseMeanFreePath(SubsurfaceProfileInt));
	const float WorldUnitScale = DecodeWorldUnitScale(GetSubsurfaceProfileWorldUnitScale(SubsurfaceProfileInt));
	return DiffuseMeanFreePath * WorldUnitScale; 
}


min16float CalculateCurvature(min16float3 WorldNormal, float3 WorldPosition)
{





	min16float3 dNdx = ddx((min16float3)WorldNormal);
	min16float3 dNdy = ddy((min16float3)WorldNormal);
	min16float x = dot(dNdx, dNdx);
	min16float y = dot(dNdy, dNdy);
	min16float CurvatureApprox = pow(max(x, y), ResolvedView.NormalCurvatureToRoughnessScaleBias.z);

	return CurvatureApprox;
}
#line   9 "/Engine/Private/TransmissionCommon.ush"

#line   6 "/Engine/Private/BurleyNormalizedSSSCommon.ush"




inline float3 Burley_Profile(float Radius, float3 Albedo, float3 S3D, float L)
{   
	float3 D = 1 / S3D;
	float R = Radius / L;
	const float Inv8Pi = 1.0 / (8 * PI);
	float3 NegRbyD = -R / D;
	return Albedo * max((exp(NegRbyD) + exp(NegRbyD / 3.0)) / (D*L)*Inv8Pi, 0);
}





float GetDiffuseReflectProfile(float D, float Radius)
{
	
	
	const float Inv8Pi = 1.0 / (8 * PI);
	float NegRbyD = -Radius / D;
	return (exp(NegRbyD) + exp(NegRbyD / 3.0)) / (D*Radius)*Inv8Pi;
}

float3 GetDiffuseReflectProfileWithDiffuseMeanFreePath(float3 L, float3 S3D, float Radius)
{
	
	float3 D = 1 / S3D;
	float3 R = Radius / L;
	const float Inv8Pi = 1.0 / (8 * PI);
	float3 NegRbyD = -R / D;
	return max((exp(NegRbyD) + exp(NegRbyD / 3.0)) / (D*L)*Inv8Pi, 0);
}

float GetComponentForScalingFactorEstimation(float4 SurfaceAlbedo)
{
	return SurfaceAlbedo.a;
}

float GetDiffuseMeanFreePathForSampling(float4 DiffuseMeanFreePath)
{
	return DiffuseMeanFreePath.a;
}





float GetPerpendicularScalingFactor(float SurfaceAlbedo)
{
	
	float Value = abs(SurfaceAlbedo - 0.8);
	return 1.85 - SurfaceAlbedo + 7 * Value * Value * Value;
}

float3 GetPerpendicularScalingFactor3D(float3 SurfaceAlbedo)
{
	float3 Value = abs(SurfaceAlbedo - 0.8);
	return 1.85 - SurfaceAlbedo + 7 * Value * Value * Value;
}



float GetDiffuseSurfaceScalingFactor(float SurfaceAlbedo)
{
	float Value = SurfaceAlbedo - 0.8;
	return 1.9 - SurfaceAlbedo + 3.5 * Value * Value;
}

float3 GetDiffuseSurfaceScalingFactor3D(float3 SurfaceAlbedo)
{
	float3 Value = SurfaceAlbedo - 0.8;
	return 1.9 - SurfaceAlbedo + 3.5 * Value * Value;
}



float GetSearchLightDiffuseScalingFactor(float SurfaceAlbedo)
{
	float Value = SurfaceAlbedo - 0.33;
	return 3.5 + 100 * Value * Value * Value * Value;
}

float3 GetSearchLightDiffuseScalingFactor3D(float3 SurfaceAlbedo)
{
	float3 Value = SurfaceAlbedo - 0.33;
	return 3.5 + 100 * Value * Value * Value * Value;
}









float3 GetMFPFromDMFPCoeff(float3 DMFPSurfaceAlbedo, float3 MFPSurfaceAlbedo, float Dmfp2MfpMagicNumber = 0.6f)
{
	return Dmfp2MfpMagicNumber * GetPerpendicularScalingFactor3D(MFPSurfaceAlbedo) / GetSearchLightDiffuseScalingFactor3D(DMFPSurfaceAlbedo);
}

float3 GetMFPFromDMFPApprox(float3 SurfaceAlbedo, float3 TargetSurfaceAlbedo, float3 DMFP)
{
	return GetMFPFromDMFPCoeff(SurfaceAlbedo, TargetSurfaceAlbedo) * DMFP;
}

float3 GetDMFPFromMFPApprox(float3 SurfaceAlbedo, float3 MFP)
{
	float3 MFPFromDMFPCoeff = GetMFPFromDMFPCoeff(SurfaceAlbedo, SurfaceAlbedo);
	return MFP / MFPFromDMFPCoeff;
}


float4 GetSubsurfaceProfileMFPInCm(int SubsurfaceProfileInt)
{
	float4 DMFP = GetSubsurfaceProfileDMFPInCm(SubsurfaceProfileInt);
	float4 SurfaceAlbedo = GetSubsurfaceProfileSurfaceAlbedo(SubsurfaceProfileInt);

	return float4(GetMFPFromDMFPApprox(SurfaceAlbedo.xyz, SurfaceAlbedo.xyz, DMFP.xyz),0.0f);
}

float GetScalingFactor(float A)
{





	float S = GetSearchLightDiffuseScalingFactor(A);

	return S;
}

float3 GetScalingFactor3D(float3 SurfaceAlbedo)
{





	float3 S3D = GetSearchLightDiffuseScalingFactor3D(SurfaceAlbedo);

	return S3D;
}

float3 GetCDF3D(float3 D, float X)
{
	return 1 - 0.25 * exp(-X / D) - 0.75 * exp(-X / (3 * D));
}





#line 179 "/Engine/Private/BurleyNormalizedSSSCommon.ush"


float3 InternalGetBurleyTransmissionProfile(
	float3 SubsurfaceAlebdo, 
	float3 MeanFreePathInCm,
	float ThicknessInCm)
{
	
	const float3 ScalingFactor = GetPerpendicularScalingFactor3D(SubsurfaceAlebdo);
	const float3 r = ThicknessInCm / MeanFreePathInCm.xyz;
	const float3 Output = 0.25 * SubsurfaceAlebdo * (exp(-ScalingFactor * r) + 3 * exp(-ScalingFactor * r / 3));

	return Output;
}

float3 GetBurleyTransmissionProfile(
	float3 SubsurfaceAlebdo,
	float3 MeanFreePathInCm,
	float ThicknessInCm)
{
	const float  TransmissionMFPScaleFactor = 100.f; 
	const float3 TransmissionThroughput = InternalGetBurleyTransmissionProfile(SubsurfaceAlebdo, MeanFreePathInCm * TransmissionMFPScaleFactor, ThicknessInCm).xyz;

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	const float FadeDistance = 1.0f - saturate(ThicknessInCm * 32 - 5.0f * (32 - 0.5f));

	return TransmissionThroughput * FadeDistance;
}

struct FBurleyParameter
{
	float4 SurfaceAlbedo;
	float4 DiffuseMeanFreePath;
	float  WorldUnitScale;
	float  SurfaceOpacity; 
};
#line  10 "/Engine/Private/TransmissionCommon.ush"


struct FTransmissionProfileParams
{
	float ExtinctionScale;
	float NormalScale;
	float ScatteringDistribution;
	float OneOverIOR;
};

FTransmissionProfileParams InitTransmissionProfileParams()
{
	FTransmissionProfileParams Out;
	Out.ExtinctionScale			= 1.0f;
	Out.NormalScale				= 0.08f;
	Out.ScatteringDistribution	= 0.0f;
	Out.OneOverIOR				= 1.0f;
	return Out;
}

FTransmissionProfileParams GetTransmissionProfileParams(uint SubsurfaceProfileInt)
{
	FTransmissionProfileParams Result;

	
	float4 Data = View_SSProfilesTexture.Load(int3((((0+1)+1)+1), SubsurfaceProfileInt, 0));

	Result.ExtinctionScale = Data.x;
	Result.NormalScale = Data.y;
	Result.ScatteringDistribution = DecodeScatteringDistribution(Data.z);
	Result.OneOverIOR = Data.w;

	return Result;
}

float4 GetTransmissionProfile(uint SubsurfaceProfileInt, float Thickness)
{
	
	const float2 TextureSize = View_SSProfilesTextureSizeAndInvSize.xy;
	float ProfileOffset = (((((((0+1)+1)+1)+1)+1)+1) + (13 + 9 + 6));
	float2 uv = float2((ProfileOffset + Thickness / 5.0f * (32 - 1) + 0.5f), SubsurfaceProfileInt + 0.5f) / (TextureSize.xy);
	return Texture2DSampleLevel(View_SSProfilesTexture, View_SSProfilesTransmissionSampler, uv, 0);
}

float EncodeThickness(float Thickness)
{
	return 1 - Thickness;
}

float DecodeThickness(float Thickness)
{
	return 1 - Thickness;
}







  float GetSubSurfaceTransmission( float OccluderDistance, float SubsurfaceDensity) { return saturate(FastExp(-OccluderDistance * SubsurfaceDensity)); }
  float4 GetSubSurfaceTransmission( float4 OccluderDistance, float SubsurfaceDensity) { return saturate(FastExp(-OccluderDistance * SubsurfaceDensity)); }
#line  11 "/Engine/Private/ShadingModels.ush"

#line   3 "/Engine/Private/HairBsdf.ush"







float Hair_g(float B, float Theta)
{
	return exp(-0.5 * Pow2(Theta) / (B * B)) / (sqrt(2 * PI) * B);
}

float Hair_F(float CosTheta)
{
	const float n = 1.55;
	const float F0 = Pow2((1 - n) / (1 + n));
	return F0 + (1 - F0) * Pow5(1 - CosTheta);
}

float3 KajiyaKayDiffuseAttenuation(FGBufferData GBuffer, float3 L, float3 V, min16float3 N, float Shadow)
{
	
	float KajiyaDiffuse = 1 - abs(dot(N, L));

	float3 FakeNormal = normalize(V - N * dot(V, N));
	
	N = FakeNormal;

	
	float MinValue = 0.0001f;
	float Wrap = 1;
	float NoL = saturate((dot(N, L) + Wrap) / Square(1 + Wrap));
	float DiffuseScatter = (1 / PI) * lerp(NoL, KajiyaDiffuse, 0.33) * GBuffer.Metallic;
	float Luma = Luminance(GBuffer.BaseColor);
	float3 ScatterTint = pow(abs(GBuffer.BaseColor / max(Luma, MinValue)), 1 - Shadow);
	return sqrt(abs(GBuffer.BaseColor)) * DiffuseScatter * ScatterTint;
}

float3 EvaluateHairMultipleScattering(
	const FHairTransmittanceData TransmittanceData,
	const float Roughness,
	const float3 Fs)
{
	return TransmittanceData.GlobalScattering * (Fs + TransmittanceData.LocalScattering) * TransmittanceData.OpaqueVisibility;
}





#line 263 "/Engine/Private/HairBsdf.ush"









float3 HairShading( FGBufferData GBuffer, float3 L, float3 V, min16float3 N, float Shadow, FHairTransmittanceData HairTransmittance, float InBacklit, float Area, uint2 Random )
{
	
	
	
	float ClampedRoughness = clamp(GBuffer.Roughness, 1/255.0f, 1.0f);

	
	const float Backlit	= min(InBacklit, HairTransmittance.bUseBacklit ? GBuffer.CustomData.z : 1);






	

	const float VoL       = dot(V,L);                                                      
	const float SinThetaL = clamp(dot(N,L), -1.f, 1.f);
	const float SinThetaV = clamp(dot(N,V), -1.f, 1.f);
	float CosThetaD = cos( 0.5 * abs( asinFast( SinThetaV ) - asinFast( SinThetaL ) ) );

	

	const float3 Lp = L - SinThetaL * N;
	const float3 Vp = V - SinThetaV * N;
	const float CosPhi = dot(Lp,Vp) * rsqrt( dot(Lp,Lp) * dot(Vp,Vp) + 1e-4 );
	const float CosHalfPhi = sqrt( saturate( 0.5 + 0.5 * CosPhi ) );
	

	float n = 1.55;
	
	float n_prime = 1.19 / CosThetaD + 0.36 * CosThetaD;

	float Shift = 0.035;
	float Alpha[] =
	{
		-Shift * 2,
		Shift,
		Shift * 4,
	};	
	float B[] =
	{
		Area + Pow2(ClampedRoughness),
		Area + Pow2(ClampedRoughness) / 2,
		Area + Pow2(ClampedRoughness) * 2,
	};

	float3 S = 0;
	if (HairTransmittance.ScatteringComponent & 0x1u)
	{
		const float sa = sin(Alpha[0]);
		const float ca = cos(Alpha[0]);
		float ShiftR = 2 * sa * (ca * CosHalfPhi * sqrt(1 - SinThetaV * SinThetaV) + sa * SinThetaV);
		float BScale = HairTransmittance.bUseSeparableR ? sqrt(2.0) * CosHalfPhi : 1;
		float Mp = Hair_g(B[0] * BScale, SinThetaL + SinThetaV - ShiftR);
		float Np = 0.25 * CosHalfPhi;
		float Fp = Hair_F(sqrt(saturate(0.5 + 0.5 * VoL)));
		S += Mp * Np * Fp * (GBuffer.Specular * 2) * lerp(1, Backlit, saturate(-VoL));
	}

	
	if (HairTransmittance.ScatteringComponent & 0x2u)
	{
		float Mp = Hair_g( B[1], SinThetaL + SinThetaV - Alpha[1] );

		float a = 1 / n_prime;
		
		
		float h = CosHalfPhi * ( 1 + a * ( 0.6 - 0.8 * CosPhi ) );
		
		
		
		
		float f = Hair_F( CosThetaD * sqrt( saturate( 1 - h*h ) ) );
		float Fp = Pow2(1 - f);
		
		
		float3 Tp = 0;
		if (HairTransmittance.bUseLegacyAbsorption)
		{
			Tp = pow(abs(GBuffer.BaseColor), 0.5 * sqrt(1 - Pow2(h * a)) / CosThetaD);
		}
		else
		{
			
			const float3 AbsorptionColor = HairColorToAbsorption(GBuffer.BaseColor);
			Tp = exp(-AbsorptionColor * 2 * abs(1 - Pow2(h * a) / CosThetaD));
		}

		
		
		
		
		
		
		float Np = exp( -3.65 * CosPhi - 3.98 );

		S += Mp * Np * Fp * Tp * Backlit;
	}

	
	if (HairTransmittance.ScatteringComponent & 0x4u)
	{
		float Mp = Hair_g( B[2], SinThetaL + SinThetaV - Alpha[2] );
		
		
		float f = Hair_F( CosThetaD * 0.5 );
		float Fp = Pow2(1 - f) * f;
		
		float3 Tp = pow(abs(GBuffer.BaseColor), 0.8 / CosThetaD );

		
		
		float Np = exp( 17 * CosPhi - 16.78 );

		S += Mp * Np * Fp * Tp;
	}


	if (HairTransmittance.ScatteringComponent & 0x20u)
	{
		S  = EvaluateHairMultipleScattering(HairTransmittance, ClampedRoughness, S);
		S += KajiyaKayDiffuseAttenuation(GBuffer, L, V, N, Shadow);
	}

	S = -min(-S, 0.0);
	return S;
}

#line  12 "/Engine/Private/ShadingModels.ush"

#line   3 "/Engine/Private/ShadingEnergyConservation.ush"









	
	




























float2 GGXEnergyLookup(float Roughness, float NoV)
{









	return float2(1, 0);

}

float GGXEnergyLookup(float Roughness, float NoV, float Eta)
{
	
	





	
	return 1.0;

}

float2 ClothEnergyLookup(float Roughness, float NoV)
{












	return float2(1, 0);

}

float DiffuseEnergyLookup(float Roughness, float NoV)
{










	return 1.f;

}













#line   7 "/Engine/Private/ShadingEnergyConservationTemplate.ush"











float3   GetF0F90RGB(float3 InF0)
{



	return InF0;

}

struct   FBxDFEnergyTermsRGB
{
	float3 W; 
	float3 E; 
};



  FBxDFEnergyTermsRGB   ComputeFresnelEnergyTermsRGB(float2 E, float3 InF0, float3 InF90)
{
	float3 F0  =   GetF0F90RGB(InF0);
	float3 F90 =   GetF0F90RGB(InF90);

	  FBxDFEnergyTermsRGB Result;
	
	



	Result.W = 1.0 + F0 * ((1 - E.x) / E.x);

	
	
	
	Result.E = Result.W * (E.x * F0 + E.y * (F90 - F0));
	return Result;
}

  FBxDFEnergyTermsRGB   ComputeGGXSpecEnergyTermsRGB(float Roughness, float NoV, float3 F0, float3 F90)
{
	  FBxDFEnergyTermsRGB Out;





	{
		Out.W = 1.0f;
		Out.E =   GetF0F90RGB(F0);
	}

	return Out;
}

  FBxDFEnergyTermsRGB   ComputeGGXSpecEnergyTermsRGB(float Roughness, float NoV, float3 F0)
{
	const float F90 = saturate(50.0 * F0.g); 
	return   ComputeGGXSpecEnergyTermsRGB(Roughness, NoV, F0, F90);
}

  FBxDFEnergyTermsRGB   ComputeClothEnergyTermsRGB(float Roughness, float NoV)
{
	  FBxDFEnergyTermsRGB Out;






	{
		Out.W = 1.0f;
		Out.E = 1.0f;
	}

	return Out;
}

  FBxDFEnergyTermsRGB   ComputeDiffuseEnergyTermsRGB(float Roughness, float NoV)
{
	  FBxDFEnergyTermsRGB Out;





	{
		Out.E = 1.0f;
	}

	Out.W = 1.0f;
	return Out;
}






float ComputeEnergyPreservation(  FBxDFEnergyTermsRGB EnergyTerms)
{







	return 1.0f;

}


float3 ComputeEnergyConservation(  FBxDFEnergyTermsRGB EnergyTerms)
{
	return EnergyTerms.W;
}

#line 117 "/Engine/Private/ShadingEnergyConservation.ush"









#line   7 "/Engine/Private/ShadingEnergyConservationTemplate.ush"











float   GetF0F90A(float3 InF0)
{

	return max3(InF0.x, InF0.y, InF0.z);



}

struct   FBxDFEnergyTermsA
{
	float W; 
	float E; 
};



  FBxDFEnergyTermsA   ComputeFresnelEnergyTermsA(float2 E, float3 InF0, float3 InF90)
{
	float F0  =   GetF0F90A(InF0);
	float F90 =   GetF0F90A(InF90);

	  FBxDFEnergyTermsA Result;
	
	



	Result.W = 1.0 + F0 * ((1 - E.x) / E.x);

	
	
	
	Result.E = Result.W * (E.x * F0 + E.y * (F90 - F0));
	return Result;
}

  FBxDFEnergyTermsA   ComputeGGXSpecEnergyTermsA(float Roughness, float NoV, float3 F0, float3 F90)
{
	  FBxDFEnergyTermsA Out;





	{
		Out.W = 1.0f;
		Out.E =   GetF0F90A(F0);
	}

	return Out;
}

  FBxDFEnergyTermsA   ComputeGGXSpecEnergyTermsA(float Roughness, float NoV, float3 F0)
{
	const float F90 = saturate(50.0 * F0.g); 
	return   ComputeGGXSpecEnergyTermsA(Roughness, NoV, F0, F90);
}

  FBxDFEnergyTermsA   ComputeClothEnergyTermsA(float Roughness, float NoV)
{
	  FBxDFEnergyTermsA Out;






	{
		Out.W = 1.0f;
		Out.E = 1.0f;
	}

	return Out;
}

  FBxDFEnergyTermsA   ComputeDiffuseEnergyTermsA(float Roughness, float NoV)
{
	  FBxDFEnergyTermsA Out;





	{
		Out.E = 1.0f;
	}

	Out.W = 1.0f;
	return Out;
}






float ComputeEnergyPreservation(  FBxDFEnergyTermsA EnergyTerms)
{







	return 1.0f;

}


float ComputeEnergyConservation(  FBxDFEnergyTermsA EnergyTerms)
{
	return EnergyTerms.W;
}

#line 126 "/Engine/Private/ShadingEnergyConservation.ush"






























#line  13 "/Engine/Private/ShadingModels.ush"

#line   5 "/Engine/Private/ParticipatingMediaCommon.ush"














struct FParticipatingMedia
{
	float3 ScatteringCoef;	
	float3 AbsorptionCoef;	
	float3 ExtinctionCoef;	
	float3 MeanFreePath;	
	float3 Albedo;			
	float3 BaseColor;		
};





float3 GetBaseColorFromAlbedo(const float3 Albedo, const float g = 0.0f)
{
	const float3 s = sqrt((1 - Albedo) / (1.0f - Albedo * g));
	const float3 BaseColor = ((1.0f - s) * (1 - 0.139 * s)) / (1.0f + 1.17 * s);
	return BaseColor;
}
float3 GetAlbedoFromBaseColor(const float3 BaseColor, const float g = 0.0f)
{
	const float3 s = 4.09712 + 4.20863 * BaseColor - sqrt(9.59217 + 41.6808 * BaseColor + 17.7126 * BaseColor * BaseColor);
	const float3 Albedo = (1.0f - s * s) / (1.0f - g * s * s);
	return Albedo;
}


FParticipatingMedia CreateMediumFromAlbedoMFP(float3 Albedo, float3 MeanFreePathMeters)
{
	FParticipatingMedia PM = (FParticipatingMedia)0;
	PM.Albedo = Albedo;
	PM.BaseColor = GetBaseColorFromAlbedo(Albedo);
	PM.MeanFreePath = MeanFreePathMeters;
	PM.ExtinctionCoef = 1.0f / max(0.000000000001f, PM.MeanFreePath);
	PM.ScatteringCoef = PM.Albedo * PM.ExtinctionCoef;
	PM.AbsorptionCoef = max(0.0f, PM.ExtinctionCoef - PM.ScatteringCoef);
	return PM;
}


FParticipatingMedia CreateMediumFromBaseColorMFP(float3 BaseColor, float3 MeanFreePathMeters)
{
	FParticipatingMedia PM = (FParticipatingMedia)0;
	PM.Albedo = GetAlbedoFromBaseColor(BaseColor);
	PM.BaseColor = BaseColor;
	PM.MeanFreePath = MeanFreePathMeters;
	PM.ExtinctionCoef = 1.0f / max(0.000000000001f, PM.MeanFreePath);
	PM.ScatteringCoef = PM.Albedo * PM.ExtinctionCoef;
	PM.AbsorptionCoef = max(0.0f, PM.ExtinctionCoef - PM.ScatteringCoef);
	return PM;
}







float IsotropicPhase()
{
	return 1.0f / (4.0f * PI);
}


float HenyeyGreensteinPhase(float G, float CosTheta)
{
	
	
	float Numer = 1.0f - G * G;
	float Denom = 1.0f + G * G + 2.0f * G * CosTheta;
	return Numer / (4.0f * PI * Denom * sqrt(Denom));
}

float RayleighPhase(float CosTheta)
{
	float Factor = 3.0f / (16.0f * PI);
	return Factor * (1.0f + CosTheta * CosTheta);
}


float SchlickPhaseFromK(float K, float CosTheta)
{
	const float SchlickPhaseFactor = 1.0f + K * CosTheta;
	const float PhaseValue = (1.0f - K * K) / (4.0f * PI * SchlickPhaseFactor * SchlickPhaseFactor);
	return PhaseValue;
}
float SchlickPhase(float G, float CosTheta)
{
	const float K = 1.55f * G - 0.55f * G * G * G;
	return SchlickPhaseFromK(K, CosTheta);
}


float HenyeyGreensteinPhaseInvertCDF(float E, float G)
{
	
	
	float t0 = (1.0 - G) + G * E;
	float t1 = (1.0 - E) + E * E;
	float t2 = t1 + (G * E) * t0;
	float t3 = (2.0 * E - 1.0) - G * G;
	float Num = t3 + (2.0 * G) * t2;
	float Den = t0 + G * E;
	return Num / (Den * Den);
}


float4 ImportanceSampleHenyeyGreensteinPhase(float2 E, float G)
{
	float Phi = 2.0f * PI * E.x;
	float CosTheta = HenyeyGreensteinPhaseInvertCDF(E.y, G);
	float SinTheta = sqrt(max(0.0f, 1.0f - CosTheta * CosTheta));

	float3 H = float3(SinTheta * sin(Phi), SinTheta * cos(Phi), CosTheta);

	return float4(H, HenyeyGreensteinPhase(G, CosTheta));
}


float RayleighPhaseInvertCdf(float E)
{
	
	
	float Z = E * 4.0 - 2.0;
	float InvZ = sqrt(Z * Z + 1.0);
	float u = pow(Z + InvZ, 1.0 / 3.0); 
	return u - rcp(u);
}

float4 ImportanceSampleRayleigh(float2 E)
{
	float Phi = 2.0f * PI * E.x;
	float CosTheta = RayleighPhaseInvertCdf(E.y);
	float SinTheta = sqrt(max(0.0f, 1.0f - CosTheta * CosTheta));
	float3 H = float3(SinTheta * sin(Phi), SinTheta * cos(Phi), CosTheta);
	return float4(H, RayleighPhase(CosTheta));
}






float3 TransmittanceToExtinction(in float3 TransmittanceColor, in float ThicknessMeters)
{
	
	
	return -log(clamp(TransmittanceColor, 0.000000000001f, 1.0f)) / max(0.000000000001f, ThicknessMeters);
}

float3 TransmittanceToMeanFreePath(in float3 TransmittanceColor, in float ThicknessMeters)
{
	return 1.0f / max(0.000000000001f, TransmittanceToExtinction(TransmittanceColor, ThicknessMeters));
}

float3 ExtinctionToTransmittance(in float3 Extinction, in float ThicknessMeters)
{
	return exp(-Extinction * ThicknessMeters);
}





float3 IsotropicMediumSlabDirectionalAlbedoFade(float3 BaseColor, float3 MFP)
{
	float3 Fade;
	
	const float BaseColorFadesOutBelowPercentage = 10.0f;
	Fade = saturate(BaseColor * BaseColorFadesOutBelowPercentage);
	
	const float FitLastMeasuredSampleMFP = 20.0f;
	const float AlbedoIsZeroForMFP = 1000.0f;
	Fade*= saturate(1.0f - (MFP - FitLastMeasuredSampleMFP) / (AlbedoIsZeroForMFP - FitLastMeasuredSampleMFP));

	return Fade;
}

float3 IsotropicMediumSlabPunctualDirectionalAlbedo(FParticipatingMedia PM)
{
	
	
	const float3 MFP = max(0.01f, PM.MeanFreePath);

	const float3 EvaluateForBaseColor1	= 0.0855674 / (0.237742 + (MFP + ((0.0310849 - MFP) / (1.95492 * MFP + 2.07238))));
	const float3 EvaluateForBaseColor01 = 0.0167964 / (0.541037 * (pow(1.17902, (-4.33046) / MFP) * (-0.294969 + MFP)) + 0.797592);

	
	float3 FinalEvaluate = lerp(EvaluateForBaseColor01, EvaluateForBaseColor1, (PM.BaseColor - 0.1f) / (1.0f - 0.1f));
	return FinalEvaluate * IsotropicMediumSlabDirectionalAlbedoFade(PM.BaseColor, MFP);
}

float3 IsotropicMediumSlabEnvDirectionalAlbedo(FParticipatingMedia PM)
{
	
	
	const float3 MFP = max(0.01f, PM.MeanFreePath);

	const float3 EvaluateForBaseColor1	= 0.00231881 + (0.51379 / (pow(MFP, 1.03577) + 0.510465)); 
	const float3 EvaluateForBaseColor01 = 0.189167 / (1.55597 + (MFP + pow(0.182843, 0.0666775 + MFP)));

	
	float3 FinalEvaluate = lerp(EvaluateForBaseColor01, EvaluateForBaseColor1, (PM.BaseColor - 0.1f) / (1.0f - 0.1f));
	return FinalEvaluate * IsotropicMediumSlabDirectionalAlbedoFade(PM.BaseColor, MFP);
}

float3 IsotropicMediumSlabTransmittance(FParticipatingMedia PM, float SlabThickness, float NoV)
{
	const float3 SafeExtinctionThreshold = 0.000001f;
	const float3 SafeExtinctionCoefficients = max(SafeExtinctionThreshold, PM.ExtinctionCoef);

	const float PathLength = SlabThickness / max(0.0001f, abs(NoV));
	const float3 SafePathSegmentTransmittance = exp(-SafeExtinctionCoefficients * PathLength);

	return SafePathSegmentTransmittance;
}

#line  14 "/Engine/Private/ShadingModels.ush"

#line   3 "/Engine/Private/ColorSpace.ush"








static const float3x3 sRGB_2_LMS_MAT =
{
    17.8824,  43.5161,  4.1193,
     3.4557,  27.1554,  3.8671,
     0.02996,  0.18431, 1.4670,
};

static const float3x3 LMS_2_sRGB_MAT =
{
    0.0809,  -0.1305,   0.1167,
   -0.0102,   0.0540,  -0.1136,
   -0.0003,  -0.0041,   0.6935,
};

float3 sRGB_2_LMS( float3 RGB )
{
	return mul(sRGB_2_LMS_MAT, RGB);
}

float3 LMS_2_sRGB( float3 LMS )
{
	return mul(LMS_2_sRGB_MAT, LMS);
}






static const float3x3 XYZ_2_LinearRGB_MAT =
{
	 3.2409699419, -1.5373831776, -0.4986107603,
	-0.9692436363,  1.8759675015,  0.0415550574,
	 0.0556300797, -0.2039769589,  1.0569715142,
};

static const float3x3 LinearRGB_2_XYZ_MAT =
{
	0.4124564, 0.3575761, 0.1804375,
	0.2126729, 0.7151522, 0.0721750,
	0.0193339, 0.1191920, 0.9503041,
};

float3 LinearRGB_2_XYZ( float3 LinearRGB )
{
	return mul(LinearRGB_2_XYZ_MAT, LinearRGB);
}

float3 XYZ_2_LinearRGB( float3 XYZ )
{
	return mul(XYZ_2_LinearRGB_MAT, XYZ);
}












static const float3 XYZ_WHITE_REF_D65 = float3(95.047, 100.0, 108.883);
static const float3 XYZ_WHITE_REF_D50 = float3(96.6797, 100.0, 82.5188);
static const float3 XYZ_WHITE_REF_D65_NOMINAL = float3(0.95047, 1.00, 1.08883);
static const float3 XYZ_WHITE_REF_D50_NOMINAL = float3(0.966797, 1.00, 0.825188);
static const float XYZ_2_LAB_DELTA_SQUARED = 0.04280618311; 
static const float XYZ_2_LAB_DELTA_CUBED = 0.00885645167; 

float xyz_otherwise(float t)
{
	return (t / (3.0 * XYZ_2_LAB_DELTA_SQUARED)) + 4.0 / 29.0;
}

float3 LinearRGB_2_LAB( float3 LinearRGB, float3 ReferenceWhite )
{
	float3 XYZ = LinearRGB_2_XYZ(LinearRGB);

	float t_X = XYZ.x / ReferenceWhite.x;
	float t_Y = XYZ.y / ReferenceWhite.y;
	float t_Z = XYZ.z / ReferenceWhite.z;

	float f_X = (t_X > XYZ_2_LAB_DELTA_CUBED) ? pow(max(t_X, XYZ_2_LAB_DELTA_CUBED), 1.0 / 3.0) : xyz_otherwise(t_X);
	float f_Y = (t_Y > XYZ_2_LAB_DELTA_CUBED) ? pow(max(t_Y, XYZ_2_LAB_DELTA_CUBED), 1.0 / 3.0) : xyz_otherwise(t_Y);
	float f_Z = (t_Z > XYZ_2_LAB_DELTA_CUBED) ? pow(max(t_Z, XYZ_2_LAB_DELTA_CUBED), 1.0 / 3.0) : xyz_otherwise(t_Z);

	float L = ( 116.0 * f_Y ) - 16.0;
	float a = 500.0 * ( f_X - f_Y );
	float b = 200.0 * ( f_Y - f_Z );

	return float3(L, a, b);
}

float lab_otherwise(float t)
{
	return (3.0 * XYZ_2_LAB_DELTA_SQUARED) * (t - (4.0 / 29.0));
}

float3 LAB_2_LinearRGB( float3 LAB, float3 ReferenceWhite)
{
	float L = LAB.x;
	float a = LAB.y;
	float b = LAB.z;

	float t_y = (L + 16.0) / 116.0;
	float t_x = t_y + (a / 500.0);
	float t_z = t_y - (b / 200.0);

	float f_x = pow(t_x, 3.0);
	float f_y = pow(t_y, 3.0);
	float f_z = pow(t_z, 3.0);

	if (f_x <= XYZ_2_LAB_DELTA_CUBED)
	{
		f_x = lab_otherwise(t_x);
	}

	if (f_y <= XYZ_2_LAB_DELTA_CUBED)
	{
		f_y = lab_otherwise(t_y);
	}

	if (f_z <= XYZ_2_LAB_DELTA_CUBED)
	{
		f_z = lab_otherwise(t_z);
	}

	float X = ReferenceWhite.x * f_x;
	float Y = ReferenceWhite.y * f_y;
	float Z = ReferenceWhite.z * f_z;

	return XYZ_2_LinearRGB(float3(X, Y, Z));
}













float3 LinearRGB_2_YCoCg(float3 RGB)
{
	float Y = dot(RGB, float3(1, 2, 1));
	float Co = dot(RGB, float3(2, 0, -2));
	float Cg = dot(RGB, float3(-1, 2, -1));

	float3 YCoCg = float3(Y, Co, Cg);
	return YCoCg;
}

float3 YCoCg_2_LinearRGB(float3 YCoCg)
{
	float Y = YCoCg.x * 0.25;
	float Co = YCoCg.y * 0.25;
	float Cg = YCoCg.z * 0.25;

	float R = Y + Co - Cg;
	float G = Y + Cg;
	float B = Y - Co - Cg;

	float3 RGB = float3(R, G, B);
	return RGB;
}

float3 YCoCg_2_LCoCg(float3 YCoCg)
{
	return float3(
		YCoCg.x,
		YCoCg.yz * (YCoCg.x > 0 ? rcp(YCoCg.x) : 0));
}

float3 LCoCg_2_YCoCg(float3 LCoCg)
{
	return float3(LCoCg.x, LCoCg.x * LCoCg.yz);
}

float3 LinearRGB_2_LCoCg(float3 RGB)
{
	return YCoCg_2_LCoCg(LinearRGB_2_YCoCg(RGB));
}

float3 LCoCg_2_LinearRGB(float3 LCoCg)
{
	return YCoCg_2_LinearRGB(LCoCg_2_YCoCg(LCoCg));
}


float3 LinearRGB_2_NormalisedYCoCg(float3 RGB)
{
	return LinearRGB_2_YCoCg(RGB) * float3(1.0f / 4.0, 0.25f, 0.25f) + float3(0.0f, 0.5f, 0.5f);
}

float3 NormalisedYCoCg_2_LinearRGB(float3 YCoCg)
{
	return YCoCg_2_LinearRGB(YCoCg * float3(4.0, 4.0f, 4.0f) + float3(0.0f, -2.0f, -2.0f));
}





float3 HUE_2_LinearRGB(in float H)
{
	float R = abs(H * 6 - 3) - 1;
	float G = 2 - abs(H * 6 - 2);
	float B = 2 - abs(H * 6 - 4);
	return saturate(float3(R, G, B));
}

float3 HSV_2_LinearRGB(in float3 HSV)
{
	float3 RGB = HUE_2_LinearRGB(HSV.x);
	return ((RGB - 1) * HSV.y + 1) * HSV.z;
}

float3 RGB_2_HCV(in float3 RGB)
{
	
	float4 P = (RGB.g < RGB.b)	? float4(RGB.bg, -1.0f, 2.0f / 3.0f): float4(RGB.gb, 0.0f, -1.0f / 3.0f);
	float4 Q = (RGB.r < P.x)	? float4(P.xyw, RGB.r)				: float4(RGB.r, P.yzx);
	float Chroma = Q.x - min(Q.w, Q.y);
	float Hue = abs((Q.w - Q.y) / (6.0f * Chroma + 1e-10f) + Q.z);
	return float3(Hue, Chroma, Q.x);
}

float3 LinearRGB_2_HSV(in float3 RGB)
{
	float3 HCV = RGB_2_HCV(RGB);
	float s = HCV.y / (HCV.z + 1e-10f);
	return float3(HCV.x, s, HCV.z);
}





float3 LAB_2_LCH(float3 LAB)
{
	float3 LCH;
	LCH.x = LAB.x;
	LCH.y = length(LAB.yz);
	float HInDegree0To360 = 0.0f;

	if (LAB.z != 0 || LAB.y != 0)
	{
		HInDegree0To360 = atan2(LAB.z, LAB.y) * 180 / 3.1415926535897932f;
		HInDegree0To360 += lerp(0, 360.0f, HInDegree0To360 < 0);
	}
	LCH.z = HInDegree0To360;
	return LCH;
}





float3 SRGBCoefficientsToWorkingColorSpace(in float3 CoefficientsSRGB)
{

	return CoefficientsSRGB;





}

float3 SRGBColorToWorkingColorSpace(in float3 ColorSRGB)
{

	return ColorSRGB;



}
#line  15 "/Engine/Private/ShadingModels.ush"



#line  17 "/Engine/Private/MobileGGX.ush"








min16float D_GGX_Mobile(min16float Roughness, float NoH)
{
    
	float OneMinusNoHSqr = 1.0 - NoH * NoH; 
	min16float a = Roughness * Roughness;
	min16float n = NoH * a;
	min16float p = a / (OneMinusNoHSqr + n * n);
	min16float d = (1.0 / PI) * p * p;
	
	return min(d, 2048.0);
}
#line  18 "/Engine/Private/ShadingModels.ush"






































min16float4 GetSSProfilePreIntegratedValue(uint SubsurfaceProfileInt, min16float NoL, min16float Curvature)
{
	float3 UV = float3((NoL * .5 + .5), Curvature, SubsurfaceProfileInt);

	return Texture2DArraySampleLevel(View_SSProfilesPreIntegratedTexture, View_SSProfilesPreIntegratedSampler, UV, 0);
}

min16float3 GetEnvBRDF(min16float3 SpecularColor, min16float Roughness, min16float NoV)
{





	
	
	
	return EnvBRDFApproxNonmetal(Roughness, NoV).xxx;



}

min16float3 MobileSpecularGGXInner(min16float D, min16float3 SpecularColor, min16float Roughness, min16float NoV, min16float NoL, min16float VoH, bool bHighQualityBRDF)
{
	min16float Vis = (Roughness * 0.25 + 0.25);
	min16float3 F = GetEnvBRDF(SpecularColor, Roughness, NoV);

	if (bHighQualityBRDF)
	{
		Vis = saturate(Vis_SmithJointApprox(Roughness * Roughness * Roughness * Roughness, NoV, NoL));
		F = F_Schlick(SpecularColor, VoH);
	}

	return (D * Vis) * F;
}


#line 130 "/Engine/Private/ShadingModels.ush"

struct FDirectLighting
{
	float3	Diffuse;
	float3	Specular;
	float3	Transmission;
};

struct FShadowTerms
{
	min16float	SurfaceShadow;
	min16float	TransmissionShadow;
	min16float	TransmissionThickness;
	FHairTransmittanceData HairTransmittance;
};
FDirectLighting HairBxDF(FGBufferData GBuffer, min16float3 N, min16float3 V, min16float3 L, float Falloff, min16float NoL, FAreaLight AreaLight, FShadowTerms Shadow)
{
	const float3 BsdfValue = HairShading(GBuffer, L, V, N, Shadow.TransmissionShadow, Shadow.HairTransmittance, 1, 0, uint2(0, 0));

	FDirectLighting Lighting;
	Lighting.Diffuse = 0;
	Lighting.Specular = 0;
	Lighting.Transmission = AreaLight.FalloffColor * Falloff * BsdfValue;
	return Lighting;
}

float New_a2( float a2, float SinAlpha, float VoH )
{
	return a2 + 0.25 * SinAlpha * (3.0 * sqrtFast(a2) + SinAlpha) / ( VoH + 0.001 );
	
	
}

float EnergyNormalization( inout float a2, float VoH, FAreaLight AreaLight )
{
	if( AreaLight.SphereSinAlphaSoft > 0 )
	{
		
		a2 = saturate( a2 + Pow2( AreaLight.SphereSinAlphaSoft ) / ( VoH * 3.6 + 0.4 ) );
	}

	float Sphere_a2 = a2;
	float Energy = 1;
	if( AreaLight.SphereSinAlpha > 0 )
	{
		Sphere_a2 = New_a2( a2, AreaLight.SphereSinAlpha, VoH );
		Energy = a2 / Sphere_a2;
	}

	if( AreaLight.LineCosSubtended < 1 )
	{

		float LineCosTwoAlpha = AreaLight.LineCosSubtended;
		float LineTanAlpha = sqrt( ( 1.0001 - LineCosTwoAlpha ) / ( 1 + LineCosTwoAlpha ) );
		float Line_a2 = New_a2( Sphere_a2, LineTanAlpha, VoH );
		Energy *= sqrt( Sphere_a2 / Line_a2 );






	}

	return Energy;
}

float3 SpecularGGX(float Roughness, float Anisotropy, float3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight)
{
	float Alpha = Roughness * Roughness;
	float a2 = Alpha * Alpha;

	FAreaLight Punctual = AreaLight;
	Punctual.SphereSinAlpha = 0;
	Punctual.SphereSinAlphaSoft = 0;
	Punctual.LineCosSubtended = 1;
	Punctual.Rect = (FRect)0;
	Punctual.IsRectAndDiffuseMicroReflWeight = 0;

	float Energy = EnergyNormalization(a2, Context.VoH, Punctual);

	float ax = 0;
	float ay = 0;
	GetAnisotropicRoughness(Alpha, Anisotropy, ax, ay);

	
	float3 D = D_GGXaniso(ax, ay, Context.NoH, Context.XoH, Context.YoH) * Energy;
	float3 Vis = Vis_SmithJointAniso(ax, ay, Context.NoV, NoL, Context.XoV, Context.XoL, Context.YoV, Context.YoL);
	float3 F = F_Schlick( SpecularColor, Context.VoH );

	return (D * Vis) * F;
}

float3 SpecularGGX( float Roughness, float3 SpecularColor, BxDFContext Context, min16float NoL, FAreaLight AreaLight )
{
	float a2 = Pow4( Roughness );
	float Energy = EnergyNormalization( a2, Context.VoH, AreaLight );
	

	min16float D = D_GGX_Mobile(Roughness, Context.NoH) * Energy;
	return MobileSpecularGGXInner(D, SpecularColor, Roughness, Context.NoV, NoL, Context.VoH, 0);








}

min16float3 DualSpecularGGX(min16float AverageRoughness, min16float Lobe0Roughness, min16float Lobe1Roughness, min16float LobeMix, min16float3 SpecularColor, BxDFContext Context, min16float NoL, FAreaLight AreaLight)
{
	float AverageAlpha2 = Pow4(AverageRoughness);
	float Lobe0Alpha2 = Pow4(Lobe0Roughness);
	float Lobe1Alpha2 = Pow4(Lobe1Roughness);

	float Lobe0Energy = EnergyNormalization(Lobe0Alpha2, Context.VoH, AreaLight);
	float Lobe1Energy = EnergyNormalization(Lobe1Alpha2, Context.VoH, AreaLight);


	min16float D = lerp(D_GGX_Mobile(Lobe0Roughness, Context.NoH) * Lobe0Energy, D_GGX_Mobile(Lobe1Roughness, Context.NoH) * Lobe1Energy, LobeMix);

	return MobileSpecularGGXInner(D, SpecularColor, AverageRoughness, Context.NoV, NoL, Context.VoH, 0);








}

FDirectLighting DefaultLitBxDF( FGBufferData GBuffer, min16float3 N, min16float3 V, min16float3 L, float Falloff, min16float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	BxDFContext Context;
	FDirectLighting Lighting;




	bool bHasAnisotropy = false;


	float NoV, VoH, NoH;
	[branch]
	if (bHasAnisotropy)
	{
		min16float3 X = GBuffer.WorldTangent;
		min16float3 Y = normalize(cross(N, X));
		Init(Context, N, X, Y, V, L);

		NoV = Context.NoV;
		VoH = Context.VoH;
		NoH = Context.NoH;
	}
	else
	{

		InitMobile(Context, N, V, L, NoL);




		NoV = Context.NoV;
		VoH = Context.VoH;
		NoH = Context.NoH;

		SphereMaxNoH(Context, AreaLight.SphereSinAlpha, true);
	}

	Context.NoV = saturate(abs( Context.NoV ) + 1e-5);






	Lighting.Diffuse = Diffuse_Lambert(GBuffer.DiffuseColor);

	Lighting.Diffuse *= AreaLight.FalloffColor * (Falloff * NoL);

	[branch]
	if (bHasAnisotropy)
	{
		
		Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.Anisotropy, GBuffer.SpecularColor, Context, NoL, AreaLight);
	}
	else
	{
		if( IsRectLight(AreaLight) )
		{
			Lighting.Specular = RectGGXApproxLTC(GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		}
		else
		{
			Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight);
		}
	}

	FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, Context.NoV, GBuffer.SpecularColor);

	
	Lighting.Diffuse *= ComputeEnergyPreservation(EnergyTerms);

	
	Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);

	Lighting.Transmission = 0;
	return Lighting;
}


float3 SimpleShading( float3 DiffuseColor, float3 SpecularColor, float Roughness, float3 L, float3 V, min16float3 N )
{
	const float NoV = saturate(dot(N, V));
	const FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(Roughness, NoV, SpecularColor);

	float3 H = normalize(V + L);
	float NoH = saturate( dot(N, H) );
	
	
	float D = D_GGX( Pow4(Roughness), NoH );
	float Vis = Vis_Implicit();
	float3 F = F_None( SpecularColor );

	return 
		Diffuse_Lambert( DiffuseColor ) * ComputeEnergyPreservation(EnergyTerms) +
		(D * Vis) * F * ComputeEnergyConservation(EnergyTerms);
}

float RefractBlend(float VoH, float Eta)
{
	
	float k = 1.0 - Eta * Eta * (1.0 - VoH * VoH);
	return Eta * VoH - sqrt(k);
}

min16float RefractBlendClearCoatApprox(min16float VoH)
{
	
	return (0.63 - 0.22 * VoH) * VoH - 0.745;
}

float3 Refract(float3 V, float3 H, float Eta)
{
	
	float VoH = dot(V, H);
	return RefractBlend(VoH, Eta) * H - Eta * V;
}

BxDFContext RefractClearCoatContext(BxDFContext Context)
{
	
	
	
	
	
	
	

	BxDFContext RefractedContext = Context;
	min16float Eta = 1.0 / 1.5;
	min16float RefractionBlendFactor = RefractBlendClearCoatApprox(Context.VoH);
	min16float RefractionProjectionTerm = RefractionBlendFactor * Context.NoH;
	RefractedContext.NoV = clamp(Eta * Context.NoV - RefractionProjectionTerm, 0.001, 1.0); 
	RefractedContext.NoL = clamp(Eta * Context.NoL - RefractionProjectionTerm, 0.001, 1.0); 
	RefractedContext.VoH = saturate(Eta * Context.VoH - RefractionBlendFactor);
	RefractedContext.VoL = 2.0 * RefractedContext.VoH * RefractedContext.VoH - 1.0;
	RefractedContext.NoH = Context.NoH;
	return RefractedContext;
}

FDirectLighting ClearCoatBxDF( FGBufferData GBuffer, min16float3 N, min16float3 V, min16float3 L, float Falloff, min16float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	const min16float ClearCoat			= GBuffer.CustomData.x;
	const min16float ClearCoatRoughness	= max(GBuffer.CustomData.y, 0.02f);

	FDirectLighting Lighting = {
		float3(0.0, 0.0, 0.0),
		float3(0.0, 0.0, 0.0),
		float3(0.0, 0.0, 0.0)
	};
	
	BxDFContext Context;
	min16float3 Nspec = N;

	if (0)
	{
		Nspec = GBuffer.WorldNormal;
	}




	bool bHasAnisotropy = false;


	min16float3 X = 0;
	min16float3 Y = 0;

	
	
	

	
	Init(Context, Nspec, V, L);
	
	
	
	float SphereSinAlpha = AreaLight.SphereSinAlpha;
	float RoughnessCompensation = 1 - Pow2(GBuffer.Roughness);
	min16float Alpha = ClearCoatRoughness * ClearCoatRoughness;
	RoughnessCompensation = RoughnessCompensation > 0.0 ? (1 - Alpha) / RoughnessCompensation : 0.0;
	AreaLight.SphereSinAlpha = saturate(AreaLight.SphereSinAlpha * RoughnessCompensation);

	SphereMaxNoH(Context, AreaLight.SphereSinAlpha, 0 == 0);
	Context.NoV = saturate(abs(Context.NoV) + 1e-5);
	const bool bIsRect = IsRectLight(AreaLight);
	Context.VoH = bIsRect ? Context.NoV : Context.VoH;

	
	float F0 = 0.04;
	float Fc = Pow5(1 - Context.VoH);
	float F = Fc + (1 - Fc) * F0;

	FBxDFEnergyTermsRGB EnergyTermsCoat   = ComputeGGXSpecEnergyTermsRGB(ClearCoatRoughness, Context.NoV, F0);

	if (bIsRect)
	{
		Lighting.Specular = ClearCoat * RectGGXApproxLTC(ClearCoatRoughness, F0, Nspec, V, AreaLight.Rect, AreaLight.Texture);
	}
	else
	{
		
		float a2 = Pow2(Alpha);
		float ClearCoatEnergy = EnergyNormalization(a2, Context.VoH, AreaLight);
		min16float Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);

		min16float D = D_GGX_Mobile(ClearCoatRoughness, Context.NoH) * ClearCoatEnergy;
		Vis = saturate(Vis);



		min16float Fr1 = (D * Vis) * F;
		Lighting.Specular = ClearCoat * AreaLight.FalloffColor * (Falloff * NoL * Fr1);
	}
	Lighting.Specular *= ComputeEnergyConservation(EnergyTermsCoat);

	
	
	AreaLight.SphereSinAlpha = SphereSinAlpha;
	Alpha = Pow2(GBuffer.Roughness);

	
	
	


	
	min16float FresnelCoeff = 1.0 - F;
	
	FresnelCoeff *= FresnelCoeff;

	
	
	

	if (0)
	{
		BxDFContext TempContext;

		[branch]
		if (bHasAnisotropy)
		{
			Init(TempContext, N, X, Y, V, L);
		}
		else
		{
			Init(TempContext, Nspec, V, L);
		}

		
		float3 H = normalize(V + L);
		Context.NoH = saturate(dot(N, H));
		Context.NoV = saturate(dot(N, V));
		Context.NoL = saturate(dot(N, L));
		Context.VoL = saturate(dot(V, L));
		Context.VoH = saturate(dot(V, H));

		Context.XoV = TempContext.XoV;
		Context.XoL = TempContext.XoL;
		Context.XoH = TempContext.XoH;
		Context.YoV = TempContext.YoV;
		Context.YoL = TempContext.YoL;
		Context.YoH = TempContext.YoH;

		if (!bHasAnisotropy)
		{
			bool bNewtonIteration = true;
			SphereMaxNoH(Context, AreaLight.SphereSinAlpha, bNewtonIteration);
		}

		Context.NoV = saturate(abs(Context.NoV) + 1e-5);
	}

	
	
	
	
	
	
	
	
	
	if (bHasAnisotropy)
	{
		
		X = GBuffer.WorldTangent;
		Y = normalize(cross(N, X));
		Init(Context, Nspec, X, Y, V, L);
	}
	BxDFContext BottomContext = RefractClearCoatContext(Context);
	BottomContext.VoH = bIsRect ? BottomContext.NoV : BottomContext.VoH;

	FBxDFEnergyTermsRGB EnergyTermsBottom = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, BottomContext.NoV, GBuffer.SpecularColor);

	
	float3 Transmission = SimpleClearCoatTransmittance(BottomContext.NoL, BottomContext.NoV, GBuffer.Metallic, GBuffer.BaseColor);

	
	min16float3 DefaultDiffuse = (Falloff * NoL) * AreaLight.FalloffColor * Diffuse_Lambert(GBuffer.DiffuseColor) * ComputeEnergyPreservation(EnergyTermsBottom);
	min16float3 RefractedDiffuse = FresnelCoeff * Transmission * DefaultDiffuse;
	Lighting.Diffuse = lerp(DefaultDiffuse, RefractedDiffuse, ClearCoat);

	if (!bHasAnisotropy && bIsRect)
	{
		
		float3 DefaultSpecular = RectGGXApproxLTC(GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		float3 RefractedSpecular = FresnelCoeff * Transmission * DefaultSpecular;
		Lighting.Specular += lerp(DefaultSpecular, RefractedSpecular, ClearCoat);
	}
	else
	{
		float a2 = Pow4(GBuffer.Roughness);
		min16float D2 = 0;
		min16float Vis2 = 0;

		[branch]
		if (bHasAnisotropy)
		{
			float ax = 0;
			float ay = 0;
			GetAnisotropicRoughness(Alpha, GBuffer.Anisotropy, ax, ay); 

			D2 = D_GGXaniso(ax, ay, Context.NoH, Context.XoH, Context.YoH);
			Vis2 = Vis_SmithJointAniso(ax, ay, BottomContext.NoV, BottomContext.NoL, BottomContext.XoV, BottomContext.XoL, BottomContext.YoV, BottomContext.YoL);
		}
		else
		{
			
			Vis2 = Vis_SmithJointApprox(a2, BottomContext.NoV, NoL);

			D2 = D_GGX_Mobile(GBuffer.Roughness, BottomContext.NoH);
			Vis2 = saturate(Vis2);



		}
		min16float3 F_Bot = F_Schlick(GBuffer.SpecularColor, BottomContext.VoH);
		min16float3 F_DefaultLit = F_Schlick(GBuffer.SpecularColor, Context.VoH);
		
		float Energy = 0;

		[branch]
		if (bHasAnisotropy)
		{
			FAreaLight Punctual = AreaLight;
			Punctual.SphereSinAlpha = 0;
			Punctual.SphereSinAlphaSoft = 0;
			Punctual.LineCosSubtended = 1;
			Punctual.Rect = (FRect)0;
			Punctual.IsRectAndDiffuseMicroReflWeight = 0;
			
			Energy = EnergyNormalization(a2, Context.VoH, Punctual);
		}
		else
		{
			Energy = EnergyNormalization(a2, Context.VoH, AreaLight);
		}

		
		float3 CommonSpecular = (Energy * Falloff * NoL * D2 * Vis2) * AreaLight.FalloffColor;
		float3 DefaultSpecular = F_DefaultLit;
		float3 RefractedSpecular = FresnelCoeff * Transmission * F_Bot;
		Lighting.Specular += CommonSpecular * lerp(DefaultSpecular, RefractedSpecular, ClearCoat);
	}

	return Lighting;
}


float ApproximateHG(float cosJ, float g)
{
	float g2 = g * g;
	float gcos2 = 1.0f - (g * cosJ);
	gcos2 *= gcos2;

	const float ISO_PHASE_FUNC_Normalized = 0.5;

	return (ISO_PHASE_FUNC_Normalized * (1.0f - g2) / max( 1e-5, gcos2));
}

void GetProfileDualSpecular(uint SubsurfaceProfileInt, min16float Roughness, min16float Opacity, out min16float LobeRoughness0, out min16float LobeRoughness1, out min16float LobeMix)
{



	
	LobeRoughness0 = Roughness;
	LobeRoughness1 = Roughness;
	LobeMix = 0.f;

}

FDirectLighting SubsurfaceProfileBxDF( FGBufferData GBuffer, min16float3 N, min16float3 V, min16float3 L, float Falloff, min16float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	BxDFContext Context;

	InitMobile(Context, N, V, L, NoL);



	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, true );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );

	uint SubsurfaceProfileId = ExtractSubsurfaceProfileInt(GBuffer);
	min16float Opacity = GBuffer.CustomData.a;
	min16float Roughness = GBuffer.Roughness;

	min16float Lobe0Roughness = 0;
	min16float Lobe1Roughness = 0;
	min16float LobeMix = 0;

	GetProfileDualSpecular(SubsurfaceProfileId, Roughness, Opacity, Lobe0Roughness, Lobe1Roughness, LobeMix);
	min16float AverageRoughness = lerp(Lobe0Roughness, Lobe1Roughness, LobeMix);

	
	const FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(AverageRoughness, Context.NoV, GBuffer.SpecularColor);

	FDirectLighting Lighting;

	min16float Curvature = GBuffer.Curvature;
	min16float UnClampedNoL = dot(GBuffer.WorldNormal, L);
	min16float ShadowFactor = 1.0f - sqrt(Shadow.SurfaceShadow);
	
	min16float UnClampedRotatedNoL = max(UnClampedNoL - max(2.0f * UnClampedNoL, 0.4f) * ShadowFactor, -1.0f);
	min16float4 BurleyDiffuse = GetSSProfilePreIntegratedValue(SubsurfaceProfileId, UnClampedRotatedNoL, Curvature);
	
	min16float3 Tint = GetSubsurfaceProfileTexture(0, SubsurfaceProfileId).rgb;
	
	
	Lighting.Diffuse = lerp(AreaLight.FalloffColor * (Falloff * NoL) * Shadow.SurfaceShadow, BurleyDiffuse.rgb, Tint) * Diffuse_Lambert(GBuffer.DiffuseColor);












	if (IsRectLight(AreaLight))
	{
		float3 Lobe0Specular = RectGGXApproxLTC(Lobe0Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		float3 Lobe1Specular = RectGGXApproxLTC(Lobe1Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		Lighting.Specular = lerp(Lobe0Specular, Lobe1Specular, LobeMix);
	}
	else
	{
		Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * DualSpecularGGX(AverageRoughness, Lobe0Roughness, Lobe1Roughness, LobeMix, GBuffer.SpecularColor, Context, NoL, AreaLight);
	}

	Lighting.Diffuse  *= ComputeEnergyPreservation(EnergyTerms);
	Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);

#line 734 "/Engine/Private/ShadingModels.ush"


	Lighting.Transmission = 0;



	return Lighting;
}

FDirectLighting ClothBxDF( FGBufferData GBuffer, min16float3 N, min16float3 V, min16float3 L, float Falloff, min16float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	const float3 FuzzColor	= ExtractSubsurfaceColor(GBuffer);
	const float  Cloth		= saturate(GBuffer.CustomData.a);

	BxDFContext Context;

	InitMobile(Context, N, V, L, NoL);



	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, true );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );

	float3 Spec1;
	if(IsRectLight(AreaLight))
		Spec1 = RectGGXApproxLTC( GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture );
	else
		Spec1 = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX( GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight );

	const FBxDFEnergyTermsRGB EnergyTerms1 = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, Context.NoV, GBuffer.SpecularColor);
	Spec1 *= ComputeEnergyConservation(EnergyTerms1);

	
	float D2 = D_InvGGX( Pow4( GBuffer.Roughness ), Context.NoH );
	float Vis2 = Vis_Cloth( Context.NoV, NoL );

	Vis2 = saturate(Vis2);

	float3 F2 = F_Schlick( FuzzColor, Context.VoH );
	float3 Spec2 = AreaLight.FalloffColor * (Falloff * NoL) * (D2 * Vis2) * F2;
	
	const FBxDFEnergyTermsA EnergyTerms2 = ComputeClothEnergyTermsA(GBuffer.Roughness, Context.NoV);
	Spec2 *= ComputeEnergyConservation(EnergyTerms2);

	FDirectLighting Lighting;
	Lighting.Diffuse  = AreaLight.FalloffColor * (Falloff * NoL) * Diffuse_Lambert( GBuffer.DiffuseColor ); 
	Lighting.Specular = lerp( Spec1, Spec2, Cloth );
	Lighting.Transmission = 0;

	Lighting.Diffuse *= lerp(ComputeEnergyPreservation(EnergyTerms1), ComputeEnergyPreservation(EnergyTerms2), Cloth);

	return Lighting;
}

FDirectLighting SubsurfaceBxDF(FGBufferData GBuffer, min16float3 N, min16float3 V, min16float3 L, float Falloff, min16float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow);

	min16float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);
	min16float Opacity = GBuffer.CustomData.a;

	
	
	min16float InScatter = pow(saturate(dot(L, -V)), 12) * lerp(3, .1f, Opacity);

	
	
	
	
	
	
	const min16float WrappedDiffuse = pow(saturate(dot(N, L) * (1.f / 1.5f) + (0.5f / 1.5f)), 1.5f) * (2.5f / 1.5f);
	const min16float NormalContribution = lerp(1.f, WrappedDiffuse, Opacity);
	const min16float BackScatter = GBuffer.GBufferAO * NormalContribution / (PI * 2);

	
	
	
	
	
	const min16float3 ExtinctionCoefficients = TransmittanceToExtinction(SubsurfaceColor, View_SubSurfaceColorAsTransmittanceAtDistanceInMeters);
	const min16float3 RawTransmittedColor = ExtinctionToTransmittance(ExtinctionCoefficients, 1.0f );
	const min16float3 TransmittedColor = HSV_2_LinearRGB(min16float3(LinearRGB_2_HSV(RawTransmittedColor).xy, LinearRGB_2_HSV(SubsurfaceColor).z));

	
	Lighting.Transmission = AreaLight.FalloffColor * (Falloff * lerp(BackScatter, 1, InScatter)) * lerp(TransmittedColor, SubsurfaceColor, Shadow.TransmissionThickness);

	return Lighting;
}

FDirectLighting TwoSidedBxDF( FGBufferData GBuffer, min16float3 N, min16float3 V, min16float3 L, float Falloff, min16float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );

	min16float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);

	
	min16float Wrap = 0.5;
	min16float WrapNoL = saturate( ( -dot(N, L) + Wrap ) / Square( 1 + Wrap ) );

	
	min16float VoL = dot(V, L);

	min16float Scatter = D_GGX_Mobile(0.6, saturate(-VoL));




	Lighting.Transmission = AreaLight.FalloffColor * (Falloff * WrapNoL * Scatter) * SubsurfaceColor;

	return Lighting;
}

FDirectLighting EyeBxDF( FGBufferData GBuffer, min16float3 N, min16float3 V, min16float3 L, float Falloff, min16float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{









	const float3 IrisNormal		= OctahedronToUnitVector( GBuffer.CustomData.yz * 2 - 1 );
	const float  IrisDistance	= GBuffer.StoredMetallic;
	const float  IrisMask		= 1.0f - GBuffer.CustomData.w;

	
	
	
	
	const float3 CausticNormal = normalize(lerp(IrisNormal, -N, IrisMask*IrisDistance));


	BxDFContext Context;

	InitMobile(Context, N, V, L, NoL);



	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, false );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );
	const bool bIsRect = IsRectLight(AreaLight);
	Context.VoH = bIsRect ? Context.NoV : Context.VoH;
	
	
	float F0 = GBuffer.Specular * 0.08;
	float Fc = Pow5( 1 - Context.VoH );
	float F = Fc + (1 - Fc) * F0;
	
	const FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, Context.NoV, F0);

	FDirectLighting Lighting;

	if( bIsRect )
	{
		Lighting.Specular = RectGGXApproxLTC( GBuffer.Roughness, F0, N, V, AreaLight.Rect, AreaLight.Texture );
	}
	else
	{
		float a2 = Pow4( GBuffer.Roughness );
		float Energy = EnergyNormalization( a2, Context.VoH, AreaLight );
		
		float Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);

		min16float D = D_GGX_Mobile(GBuffer.Roughness, Context.NoH) * Energy;
		Vis = saturate(Vis);



		Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * D * Vis * F;
	}

	float IrisNoL = saturate( dot( IrisNormal, L ) );
	float Power = lerp( 12, 1, IrisNoL );
	float Caustic = 0.8 + 0.2 * ( Power + 1 ) * pow( saturate( dot( CausticNormal, L ) ), Power );
	float Iris = IrisNoL * Caustic;
	float Sclera = NoL;
	
	Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);




	
	const float EnergyPreservation = 1.0f - F;


	Lighting.Diffuse = 0;
	Lighting.Transmission = AreaLight.FalloffColor * ( Falloff * lerp( Sclera, Iris, IrisMask ) * EnergyPreservation ) * Diffuse_Lambert( GBuffer.DiffuseColor );

	uint SubsurfaceProfileId = ExtractSubsurfaceProfileInt(GBuffer);
	min16float Curvature = GBuffer.Curvature;
	min16float ShadowFactor = 1.0f - sqrt(Shadow.SurfaceShadow);
	
	
	min16float UnClampedNoL = dot(GBuffer.WorldNormal, L);
	min16float UnClampedRotatedNoL = max(UnClampedNoL - max(2.0f * UnClampedNoL, 0.4f) * ShadowFactor, -1.0f);
	min16float4 BurleyDiffuse = GetSSProfilePreIntegratedValue(SubsurfaceProfileId, UnClampedRotatedNoL, Curvature);

	
	min16float UnClampedIrisNoL = dot(IrisNormal, L);
	min16float UnClampedRotatedIrisNoL = max(UnClampedIrisNoL - max(2.0f * UnClampedIrisNoL, 0.4f) * ShadowFactor, -1.0f);
	min16float4 IrisBurleyDiffuse = GetSSProfilePreIntegratedValue(SubsurfaceProfileId, UnClampedRotatedIrisNoL * Caustic, Curvature);
	
	min16float3 Tint = GetSubsurfaceProfileTexture(0, SubsurfaceProfileId).rgb;

	
	Lighting.Transmission = lerp(Lighting.Transmission * Shadow.SurfaceShadow, Falloff * lerp(BurleyDiffuse.rgb, IrisBurleyDiffuse.rgb, IrisMask) * Diffuse_Lambert(GBuffer.DiffuseColor), Tint);

	return Lighting;
}

FDirectLighting PreintegratedSkinBxDF( FGBufferData GBuffer, min16float3 N, min16float3 V, min16float3 L, float Falloff, min16float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
	
	min16float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);
	min16float Opacity = GBuffer.CustomData.a;

	min16float3 PreintegratedBRDF = Texture2DSampleLevel(View_PreIntegratedBRDF, View_PreIntegratedBRDFSampler, float2(saturate(dot(N, L) * .5 + .5), 1 - Opacity), 0).rgb;
	Lighting.Transmission = AreaLight.FalloffColor * Falloff * PreintegratedBRDF * SubsurfaceColor;

	return Lighting;
}

FDirectLighting IntegrateBxDF( FGBufferData GBuffer, min16float3 N, min16float3 V, min16float3 L, float Falloff, min16float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	switch( GBuffer.ShadingModelID )
	{
		case 1:
		case 10:
		case 11:
			return DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 2:
			return SubsurfaceBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 3:
			return PreintegratedSkinBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 4:
			return ClearCoatBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 5:
			return SubsurfaceProfileBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 6:
			return TwoSidedBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 7:
			return HairBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 8:
			return ClothBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 9:
			return EyeBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		default:
			return (FDirectLighting)0;
	}
}

FDirectLighting EvaluateBxDF( FGBufferData GBuffer, min16float3 N, min16float3 V, min16float3 L, float NoL, FShadowTerms Shadow )
{
	FAreaLight AreaLight;
	AreaLight.SphereSinAlpha = 0;
	AreaLight.SphereSinAlphaSoft = 0;
	AreaLight.LineCosSubtended = 1;
	AreaLight.FalloffColor = 1;
	AreaLight.Rect = (FRect)0;
	AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	AreaLight.Texture = InitRectTexture();

	return IntegrateBxDF( GBuffer, N, V, L, 1, NoL, AreaLight, Shadow );
}
#line   7 "/Engine/Private/MobileLightingCommon.ush"

#line   3 "/Engine/Private/ReflectionEnvironmentShared.ush"








float GetSkyLightCubemapBrightness()
{
	return View_MobileSkyIrradianceEnvironmentMap[7].x; 
}







min16float ComputeReflectionCaptureMipFromRoughness(min16float Roughness, min16float CubemapMaxMip)
{
	
	
	
	min16float LevelFrom1x1 = 1 - 1.2 * log2(max(Roughness, 0.001));
	return CubemapMaxMip - 1 - LevelFrom1x1;
}

float ComputeReflectionCaptureRoughnessFromMip(float Mip, min16float CubemapMaxMip)
{
	float LevelFrom1x1 = CubemapMaxMip - 1 - Mip;
	return exp2( ( 1 - LevelFrom1x1 ) / 1.2 );
}



float3 GetSkyLightReflection(float3 ReflectionVector, float Roughness, out float OutSkyAverageBrightness)
{
	float AbsoluteSpecularMip = ComputeReflectionCaptureMipFromRoughness(Roughness, MobileBasePass_ReflectionsParameters_SkyLightParameters.x);
	float3 Reflection = TextureCubeSampleLevel(MobileBasePass_ReflectionsParameters_SkyLightCubemap, MobileBasePass_ReflectionsParameters_SkyLightCubemapSampler, ReflectionVector, AbsoluteSpecularMip).rgb;

	OutSkyAverageBrightness = GetSkyLightCubemapBrightness() * Luminance(View_SkyLightColor.rgb);
	return Reflection * View_SkyLightColor.rgb;
}

float3 GetSkyLightReflectionSupportingBlend(float3 ReflectionVector, float Roughness, out float OutSkyAverageBrightness)
{
	float3 Reflection = GetSkyLightReflection(ReflectionVector, Roughness, OutSkyAverageBrightness);

	[branch]
	if (MobileBasePass_ReflectionsParameters_SkyLightParameters.w > 0)
	{
		float AbsoluteSpecularMip = ComputeReflectionCaptureMipFromRoughness(Roughness, MobileBasePass_ReflectionsParameters_SkyLightParameters.x);
		float3 BlendDestinationReflection = TextureCubeSampleLevel(MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemap, MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemapSampler, ReflectionVector, AbsoluteSpecularMip).rgb;

		Reflection = lerp(Reflection, BlendDestinationReflection * View_SkyLightColor.rgb, MobileBasePass_ReflectionsParameters_SkyLightParameters.w);
	}

	return Reflection;
}

bool ShouldSkyLightApplyPrecomputedBentNormalShadowing() {
	return View_SkyLightApplyPrecomputedBentNormalShadowingFlag != 0.0f;
}

bool ShouldSkyLightAffectReflection() {
	return View_SkyLightAffectReflectionFlag != 0.0f;
}

bool ShouldSkyLightAffectGlobalIllumination() {
	return View_SkyLightAffectGlobalIlluminationFlag != 0.0f;
}





float3 GetSkySHDiffuse(float3 Normal)
{
	float4 NormalVector = float4(Normal, 1.0f); 

	float3 Intermediate0, Intermediate1, Intermediate2;
	Intermediate0.x = dot(View_MobileSkyIrradianceEnvironmentMap[0], NormalVector);
	Intermediate0.y = dot(View_MobileSkyIrradianceEnvironmentMap[1], NormalVector);
	Intermediate0.z = dot(View_MobileSkyIrradianceEnvironmentMap[2], NormalVector);

	float4 vB = NormalVector.xyzz * NormalVector.yzzx;
	Intermediate1.x = dot(View_MobileSkyIrradianceEnvironmentMap[3], vB);
	Intermediate1.y = dot(View_MobileSkyIrradianceEnvironmentMap[4], vB);
	Intermediate1.z = dot(View_MobileSkyIrradianceEnvironmentMap[5], vB);

	float vC = NormalVector.x * NormalVector.x - NormalVector.y * NormalVector.y;
	Intermediate2 = View_MobileSkyIrradianceEnvironmentMap[6].xyz * vC;

	
	return max(0, Intermediate0 + Intermediate1 + Intermediate2);
}






float3 GetSkySHDiffuseSimple(float3 Normal)
{
	float4 NormalVector = float4(Normal, 1);

	float3 Intermediate0;
	Intermediate0.x = dot(View_MobileSkyIrradianceEnvironmentMap[0], NormalVector);
	Intermediate0.y = dot(View_MobileSkyIrradianceEnvironmentMap[1], NormalVector);
	Intermediate0.z = dot(View_MobileSkyIrradianceEnvironmentMap[2], NormalVector);		

	
	return max(0, Intermediate0);
}



min16float3 GetOffSpecularPeakReflectionDir(min16float3 Normal, min16float3 ReflectionVector, min16float Roughness)
{
	min16float a = Roughness * Roughness;
	return lerp( Normal, ReflectionVector, (1 - a) * ( sqrt(1 - a) + a ) );	
}

min16float GetSpecularOcclusion(min16float NoV, min16float RoughnessSq, min16float AO)
{
	return saturate( pow( NoV + AO, RoughnessSq ) - 1 + AO );
}

float3 GetLookupVectorForBoxCapture(float3 ReflectionVector, float3 WorldPosition, float4 BoxCapturePositionAndRadius, float4x4 RelativeWorldToBox, float4 BoxScales, float3 LocalCaptureOffset, out float DistanceAlpha)
{
	
	float3 LocalRayStart		= mul(float4(WorldPosition - BoxCapturePositionAndRadius.xyz, 1), RelativeWorldToBox).xyz;
	float3 LocalRayDirection	= mul(float4(ReflectionVector,  0), RelativeWorldToBox).xyz;

	float3 InvRayDir = rcp(LocalRayDirection);
	
	
	float3 FirstPlaneIntersections = -InvRayDir - LocalRayStart * InvRayDir;
	
	float3 SecondPlaneIntersections = InvRayDir - LocalRayStart * InvRayDir;
	
	float3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);

	
	float Intersection = min(FurthestPlaneIntersections.x, min(FurthestPlaneIntersections.y, FurthestPlaneIntersections.z));

	
	float3 IntersectPosition = WorldPosition + Intersection * ReflectionVector;
	float3 ProjectedCaptureVector = IntersectPosition - (BoxCapturePositionAndRadius.xyz + LocalCaptureOffset);

	
	
	
	float BoxDistance = ComputeDistanceFromBoxToPoint(-(BoxScales.xyz - .5f * BoxScales.w), BoxScales.xyz - .5f * BoxScales.w, LocalRayStart * BoxScales.xyz);

	
	DistanceAlpha = 1.0 - smoothstep(0, .7f * BoxScales.w, BoxDistance);

	return ProjectedCaptureVector;
}

float3 GetLookupVectorForSphereCapture(float3 ReflectionVector, float3 WorldPosition, float4 SphereCapturePositionAndRadius, float NormalizedDistanceToCapture, float3 LocalCaptureOffset, inout float DistanceAlpha)
{
	float3 ProjectedCaptureVector = ReflectionVector;
	float ProjectionSphereRadius = SphereCapturePositionAndRadius.w;
	float SphereRadiusSquared = ProjectionSphereRadius * ProjectionSphereRadius;

	float3 LocalPosition = WorldPosition - SphereCapturePositionAndRadius.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);

	
	float3 QuadraticCoef;
	QuadraticCoef.x = 1;
	QuadraticCoef.y = dot(ReflectionVector, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - SphereRadiusSquared;

	float Determinant = QuadraticCoef.y * QuadraticCoef.y - QuadraticCoef.z;

	
	[flatten]
	if (Determinant >= 0)
	{
		float FarIntersection = sqrt(Determinant) - QuadraticCoef.y;

		float3 LocalIntersectionPosition = LocalPosition + FarIntersection * ReflectionVector;
		ProjectedCaptureVector = LocalIntersectionPosition - LocalCaptureOffset;
		
		

		float x = saturate( 2.5 * NormalizedDistanceToCapture - 1.5 );
		DistanceAlpha = 1 - x*x*(3 - 2*x);
	}
	return ProjectedCaptureVector;
}

min16float ComputeMixingWeight(min16float IndirectIrradiance, min16float AverageBrightness, min16float Roughness)
{
	
	min16float MixingAlpha = smoothstep(0, 1, saturate(Roughness * View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.x + View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.y));

	
	
	
	
	min16float MixingWeight = IndirectIrradiance / max(AverageBrightness, .0001f);

	MixingWeight = min(MixingWeight, View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.z);

	return lerp(1.0f, MixingWeight, MixingAlpha);
}















#line   8 "/Engine/Private/MobileLightingCommon.ush"

#line   7 "/Engine/Private/PlanarReflectionShared.ush"
min16float4 ComputePlanarReflections(float3 TranslatedWorldPosition, min16float3 WorldNormal, min16float Roughness, SamplerState SharedClampSampler)
{
	min16float4 OutPlanarReflection = 0;

	float PlaneDistance = dot(MobileBasePass_PlanarReflection_ReflectionPlane, float4(TranslatedWorldPosition, -1));
	min16float DistanceFade = 1 - saturate(abs(PlaneDistance) * MobileBasePass_PlanarReflection_PlanarReflectionParameters.x + MobileBasePass_PlanarReflection_PlanarReflectionParameters.y);

	float3 PlaneOriginToWorldPosition = TranslatedWorldPosition - MobileBasePass_PlanarReflection_PlanarReflectionOrigin.xyz;
	float XAxisDistance = dot(PlaneOriginToWorldPosition, MobileBasePass_PlanarReflection_PlanarReflectionXAxis.xyz);
	min16float XAxisFade = saturate((MobileBasePass_PlanarReflection_PlanarReflectionXAxis.w - abs(XAxisDistance)) * MobileBasePass_PlanarReflection_PlanarReflectionParameters.x);
	float YAxisDistance = dot(PlaneOriginToWorldPosition, MobileBasePass_PlanarReflection_PlanarReflectionYAxis.xyz);
	min16float YAxisFade = saturate((MobileBasePass_PlanarReflection_PlanarReflectionYAxis.w - abs(YAxisDistance)) * MobileBasePass_PlanarReflection_PlanarReflectionParameters.x);
	DistanceFade *= XAxisFade * YAxisFade;

	min16float AngleFade = saturate(dot(MobileBasePass_PlanarReflection_ReflectionPlane.xyz, WorldNormal) * MobileBasePass_PlanarReflection_PlanarReflectionParameters2.x + MobileBasePass_PlanarReflection_PlanarReflectionParameters2.y);
	min16float RoughnessFade = 1 - saturate((Roughness - .2f) * 10.0f);
	min16float FinalFade = DistanceFade * AngleFade * RoughnessFade;

	[branch]
	if (FinalFade > 0)
	{
		
		float3 CameraToPixel = normalize(TranslatedWorldPosition - ResolvedView.TranslatedWorldCameraOrigin);
		
		float3 MirroredCameraVector = reflect(CameraToPixel, -MobileBasePass_PlanarReflection_ReflectionPlane.xyz);
		
		min16float3 MirroredNormal = mul(WorldNormal, MobileBasePass_PlanarReflection_InverseTransposeMirrorMatrix).xyz;
		
		min16float3 MirroredReflectionVectorOffNormal = reflect(MirroredCameraVector, MirroredNormal);
		
		
		
		float3 VirtualReflectionSpherePosition = TranslatedWorldPosition + MirroredReflectionVectorOffNormal * MobileBasePass_PlanarReflection_PlanarReflectionParameters.z;
		
		float3 ViewVirtualReflectionSpherePosition = mul(float4(VirtualReflectionSpherePosition, 1), ResolvedView.TranslatedWorldToView).xyz;
		
		float4 ClipVirtualReflectionSpherePosition = mul(float4(ViewVirtualReflectionSpherePosition, 1), MobileBasePass_PlanarReflection_ProjectionWithExtraFOV[ResolvedView.StereoPassIndex]);

		uint EyeIndex = 0;








		min16float2 NDC = clamp(ClipVirtualReflectionSpherePosition.xy / ClipVirtualReflectionSpherePosition.w, -MobileBasePass_PlanarReflection_PlanarReflectionScreenBound, MobileBasePass_PlanarReflection_PlanarReflectionScreenBound);
		min16float2 ViewportUV = NDC * MobileBasePass_PlanarReflection_PlanarReflectionScreenScaleBias[EyeIndex].xy + MobileBasePass_PlanarReflection_PlanarReflectionScreenScaleBias[EyeIndex].zw;

		min16float4 PlanarReflectionTextureValue = Texture2DSampleLevel(
			MobileBasePass_PlanarReflection_PlanarReflectionTexture,



			MobileBasePass_PlanarReflection_PlanarReflectionSampler,

			ViewportUV, 
			0);

		
		FinalFade *= PlanarReflectionTextureValue.a;
		OutPlanarReflection.rgb = PlanarReflectionTextureValue.rgb * RoughnessFade; 
		OutPlanarReflection.a = FinalFade;
	}

	return OutPlanarReflection;
}


min16float4 GetPlanarReflection(float3 TranslatedWorldPosition, min16float3 WorldNormal, min16float Roughness)
{
	min16float4 PlanarReflection = ComputePlanarReflections(TranslatedWorldPosition, WorldNormal, Roughness, MobileBasePass_PlanarReflection_PlanarReflectionSampler);

	
	PlanarReflection.rgb *= PlanarReflection.rgb;


	return PlanarReflection;
}
#line   9 "/Engine/Private/MobileLightingCommon.ush"

#line   7 "/Engine/Private/LightGridCommon.ush"














struct FLightGridData
{
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	int3 CulledGridSize;
};

FLightGridData GetLightGridData(uint EyeIndex)
{
	FLightGridData Result;







		Result.LightGridPixelSizeShift = MobileBasePass_Forward_LightGridPixelSizeShift;
		Result.LightGridZParams = MobileBasePass_Forward_LightGridZParams;
		Result.CulledGridSize = MobileBasePass_Forward_CulledGridSize;











	return Result;
}

uint3 ComputeLightGridCellCoordinate(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	const FLightGridData GridData = GetLightGridData(EyeIndex);
	uint ZSlice = (uint)(max(0, log2(SceneDepth * GridData.LightGridZParams.x + GridData.LightGridZParams.y) * GridData.LightGridZParams.z));
	ZSlice = min(ZSlice, (uint)(GridData.CulledGridSize.z - 1));
	return uint3(PixelPos >> GridData.LightGridPixelSizeShift, ZSlice);
}

uint ComputeLightGridCellIndex(uint3 GridCoordinate, uint EyeIndex)
{
	const FLightGridData GridData = GetLightGridData(EyeIndex);
	return (GridCoordinate.z * GridData.CulledGridSize.y + GridCoordinate.y) * GridData.CulledGridSize.x + GridCoordinate.x;
}

uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	return ComputeLightGridCellIndex(ComputeLightGridCellCoordinate(PixelPos, SceneDepth, EyeIndex), EyeIndex);
}

uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth)
{
	return ComputeLightGridCellIndex(PixelPos, SceneDepth, 0);
}









uint GetNumLocalLights(uint EyeIndex)
{



	return MobileBasePass_Forward_NumLocalLights;

}

struct FCulledLightsGridData
{
	uint NumLocalLights;
	uint DataStartIndex;
};

FCulledLightsGridData GetCulledLightsGrid(uint GridIndex, uint EyeIndex)
{
	FCulledLightsGridData Result;







		Result.NumLocalLights = min(MobileBasePass_Forward_NumCulledLightsGrid[GridIndex * 2 + 0], MobileBasePass_Forward_NumLocalLights);
		Result.DataStartIndex = MobileBasePass_Forward_NumCulledLightsGrid[GridIndex * 2 + 1];










	return Result;
}

struct FVirtualShadowMapSMRTSettings
{
	int   RayCount;
	int   SamplesPerRay;
	float RayLengthScale;
	float ScreenRayLength;
	float CotMaxRayAngleFromLight;
	float TexelDitherScale;
	float ExtrapolateSlope;
	float MaxSlopeBias;
	uint  AdaptiveRayCount;
};

FVirtualShadowMapSMRTSettings GetDirectionalLightSMRTSettings()
{
	FVirtualShadowMapSMRTSettings Out;
	Out.ScreenRayLength			= MobileBasePass_Forward_DirectionalLightSMRTSettings_ScreenRayLength;
	Out.RayCount 				= MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTRayCount;
	Out.SamplesPerRay 			= MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	Out.RayLengthScale 			= MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	Out.CotMaxRayAngleFromLight = MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	Out.TexelDitherScale 		= MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	Out.ExtrapolateSlope 		= MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	Out.MaxSlopeBias 			= MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	Out.AdaptiveRayCount 		= MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	return Out;
}

FDirectionalLightData GetDirectionalLightData(uint EyeIndex)
{
	FDirectionalLightData Result;






	
		Result.HasDirectionalLight					= MobileBasePass_Forward_HasDirectionalLight;
		Result.DirectionalLightShadowMapChannelMask = MobileBasePass_Forward_DirectionalLightShadowMapChannelMask;
		Result.DirectionalLightDistanceFadeMAD		= MobileBasePass_Forward_DirectionalLightDistanceFadeMAD;
		Result.DirectionalLightColor				= MobileBasePass_Forward_DirectionalLightColor;
		Result.DirectionalLightDirection			= MobileBasePass_Forward_DirectionalLightDirection;
		Result.DirectionalLightSourceRadius			= MobileBasePass_Forward_DirectionalLightSourceRadius;














	return Result;
}

FLocalLightData GetLocalLightData_Internal(
	uint LocalLightIndex,
	uint ClusteredDeferredSupportedEndIndex,
	uint LumenSupportedStartIndex,
	uint SimpleLightsEndIndex,
	float4 InData0, float4 InData1, float4 InData2, float4 InData3, float4 InData4, float4 InData5)
{
	FLocalLightData Out = (FLocalLightData)0;

	Out.bClusteredDeferredSupported				= LocalLightIndex <  ClusteredDeferredSupportedEndIndex;
	Out.bLumenLightSupported					= LocalLightIndex >= LumenSupportedStartIndex;
	Out.bIsSimpleLight							= LocalLightIndex <  SimpleLightsEndIndex;
	Out.LightPositionAndInvRadius				= InData0;
	Out.LightColorAndFalloffExponent			= InData1;
	Out.LightDirectionAndShadowMask				= InData2;
	Out.SpotAnglesAndIdAndSourceRadiusPacked	= InData3;
	Out.LightTangentAndIESDataAndSpecularScale	= InData4;
	Out.RectDataAndVirtualShadowMapId			= InData5;
	Out.VirtualShadowMapId						= int(Out.RectDataAndVirtualShadowMapId.z);
	Out.LightSceneId							= int(Out.SpotAnglesAndIdAndSourceRadiusPacked.y);

	return Out;
}

FLocalLightData GetLocalLightDataNonStereo(uint LocalLightIndex)
{
	FLocalLightData Out;
	uint LocalLightBaseIndex = LocalLightIndex * 6;

	Out = GetLocalLightData_Internal(
		LocalLightIndex,
		MobileBasePass_Forward_ClusteredDeferredSupportedEndIndex,
		MobileBasePass_Forward_LumenSupportedStartIndex,
		MobileBasePass_Forward_SimpleLightsEndIndex,
		MobileBasePass_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 0],
		MobileBasePass_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 1],
		MobileBasePass_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 2],
		MobileBasePass_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 3],
		MobileBasePass_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 4],
		MobileBasePass_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 5]);
	return Out;
}

FLocalLightData GetLocalLightData(uint GridIndex, uint EyeIndex)
{
	FLocalLightData Out;






		uint LocalLightIndex = MobileBasePass_Forward_CulledLightDataGrid[GridIndex];
		uint LocalLightBaseIndex = LocalLightIndex * 6;

		Out = GetLocalLightData_Internal(
			LocalLightIndex, 
			MobileBasePass_Forward_ClusteredDeferredSupportedEndIndex,
			MobileBasePass_Forward_LumenSupportedStartIndex,
			MobileBasePass_Forward_SimpleLightsEndIndex,
			MobileBasePass_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 0],
			MobileBasePass_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 1],
			MobileBasePass_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 2],
			MobileBasePass_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 3],
			MobileBasePass_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 4],
			MobileBasePass_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 5]);
#line 273 "/Engine/Private/LightGridCommon.ush"

	return Out;
}





uint4 InitializePackedShadowMask()
{
	return uint(0xffffffff).xxxx;
}

uint GetPackedShadowMaskMaxLightCount()
{
	return VirtualShadowMap_PackedShadowMaskMaxLightCount;
}

void PackShadowMask(inout uint4 InOutShadowMask, float InShadowFactor, uint InLightIndex)
{
	uint Value = ~uint(round(InShadowFactor * 15.0f)) & 15U;
	uint Dword = InLightIndex / 8;

	InOutShadowMask.x ^= (Dword == 0U) ? (Value << (InLightIndex      ) * 4U) : 0U;
	InOutShadowMask.y ^= (Dword == 1U) ? (Value << (InLightIndex -  8U) * 4U) : 0U;
	InOutShadowMask.z ^= (Dword == 2U) ? (Value << (InLightIndex - 16U) * 4U) : 0U;
	InOutShadowMask.w ^= (Dword == 3U) ? (Value << (InLightIndex - 24U) * 4U) : 0U;

	
}

float UnpackShadowMask(uint4 InShadowMask, uint InLightIndex)
{	
	uint Dword = InLightIndex / 8;
	return ((InShadowMask[Dword] >> (InLightIndex - Dword*8U) * 4U) & 15U) / 15.0f;	
	
}


float UnpackShadowMask(uint4 InShadowMask, uint InLightIndex, float Dither)
{	
	float ShadowFactor = UnpackShadowMask(InShadowMask, InLightIndex);
	if (ShadowFactor > 0.0f && ShadowFactor < 1.0f)
	{
		ShadowFactor = saturate(ShadowFactor + (Dither - 0.5f) * (1.0f / 16.0f));
	}
	return ShadowFactor;
}

#line  10 "/Engine/Private/MobileLightingCommon.ush"

#line   7 "/Engine/Private/ShadowFilteringCommon.ush"


#line   7 "/Engine/Private/PixelQuadMessagePassing.ush"








struct FPQMPContext
{
	
	float2 PixelPos;

	
	float2  QuadVector;
};



FPQMPContext PQMPInit(float2 SvPosition)
{
	FPQMPContext PQMP;





	PQMP.PixelPos	= float2(0, 0);
	PQMP.QuadVector = float2(0, 0);

	return PQMP;
}



float PQMPAverage(FPQMPContext PQMP, float v)
{




	return v;

}

float2 PQMPAverage(FPQMPContext PQMP, float2 v)
{




	return v;

}



float PQMPReadX(FPQMPContext PQMP, float v)
{








	return v;

}


float PQMPReadY(FPQMPContext PQMP, float v)
{








	return v;

}

float2 PQMPReadX(FPQMPContext PQMP, float2 v)
{
	return float2( PQMPReadX(PQMP, v.x), PQMPReadX(PQMP, v.y));
}

float2 PQMPReadY(FPQMPContext PQMP, float2 v)
{
	return float2( PQMPReadY(PQMP, v.x), PQMPReadY(PQMP, v.y));
}

float3 PQMPReadX(FPQMPContext PQMP, float3 v)
{
	return float3( PQMPReadX(PQMP, v.x), PQMPReadX(PQMP, v.y), PQMPReadX(PQMP, v.z));
}

float3 PQMPReadY(FPQMPContext PQMP, float3 v)
{
	return float3( PQMPReadY(PQMP, v.x), PQMPReadY(PQMP, v.y), PQMPReadY(PQMP, v.z));
}


#line   9 "/Engine/Private/ShadowFilteringCommon.ush"




struct FPCFSamplerSettings
{
	Texture2D		ShadowDepthTexture;
	SamplerState	ShadowDepthTextureSampler;

	
	
	float4			ShadowBufferSize;

	
	float			SceneDepth;

	float			TransitionScale;

	
	bool			bSubsurface;

	
	bool			bTreatMaxDepthUnshadowed;

	
	float			DensityMulConstant;

	
	float2			ProjectionDepthBiasParameters;
};





float PCF2x2(float2 Fraction, float3 Values0, float3 Values1, float3 Values2)
{
	float3 Results;

	Results.x = Values0.x * (1.0f - Fraction.x);
	Results.y = Values1.x * (1.0f - Fraction.x);
	Results.z = Values2.x * (1.0f - Fraction.x);
	Results.x += Values0.y;
	Results.y += Values1.y;
	Results.z += Values2.y;
	Results.x += Values0.z * Fraction.x;
	Results.y += Values1.z * Fraction.x;
	Results.z += Values2.z * Fraction.x;

	return saturate(0.25f * dot(Results, min16float3(1.0f - Fraction.y, 1.0f, Fraction.y)));
}






float PCF3x3(float2 Fraction, float4 Values0, float4 Values1, float4 Values2, float4 Values3)
{
	float4 Results;

	Results.x = Values0.x * (1.0f - Fraction.x);
	Results.y = Values1.x * (1.0f - Fraction.x);
	Results.z = Values2.x * (1.0f - Fraction.x);
	Results.w = Values3.x * (1.0f - Fraction.x);
	Results.x += Values0.y;
	Results.y += Values1.y;
	Results.z += Values2.y;
	Results.w += Values3.y;
	Results.x += Values0.z;
	Results.y += Values1.z;
	Results.z += Values2.z;
	Results.w += Values3.z;
	Results.x += Values0.w * Fraction.x;
	Results.y += Values1.w * Fraction.x;
	Results.z += Values2.w * Fraction.x;
	Results.w += Values3.w * Fraction.x;

	return saturate(dot(Results, float4(1.0f - Fraction.y, 1.0f, 1.0f, Fraction.y)) * (1.0f / 9.0f));
}








float PCF3x3gather(float2 Fraction, float4 Values0, float4 Values1, float4 Values2, float4 Values3)
{
	float4 Results;

	Results.x = Values0.w * (1.0 - Fraction.x);
	Results.y = Values0.x * (1.0 - Fraction.x);
	Results.z = Values2.w * (1.0 - Fraction.x);
	Results.w = Values2.x * (1.0 - Fraction.x);
	Results.x += Values0.z;
	Results.y += Values0.y;
	Results.z += Values2.z;
	Results.w += Values2.y;
	Results.x += Values1.w;
	Results.y += Values1.x;
	Results.z += Values3.w;
	Results.w += Values3.x;
	Results.x += Values1.z * Fraction.x;
	Results.y += Values1.y * Fraction.x;
	Results.z += Values3.z * Fraction.x;
	Results.w += Values3.y * Fraction.x;

	return dot( Results, float4( 1.0 - Fraction.y, 1.0, 1.0, Fraction.y) * ( 1.0 / 9.0) );
}


float2 HorizontalPCF5x2(float2 Fraction, float4 Values00, float4 Values20, float4 Values40)
{
	float Results0;
	float Results1;

	Results0 = Values00.w * (1.0 - Fraction.x);
	Results1 = Values00.x * (1.0 - Fraction.x);
	Results0 += Values00.z;
	Results1 += Values00.y;
	Results0 += Values20.w;
	Results1 += Values20.x;
	Results0 += Values20.z;
	Results1 += Values20.y;
	Results0 += Values40.w;
	Results1 += Values40.x;
	Results0 += Values40.z * Fraction.x;
	Results1 += Values40.y * Fraction.x;

	return float2(Results0, Results1);
}


float PCF1x1(float2 Fraction, float4 Values00)
{
	float2 HorizontalLerp00 = lerp(Values00.wx, Values00.zy, Fraction.xx);

	return lerp(HorizontalLerp00.x, HorizontalLerp00.y, Fraction.y);
}

float4 CalculateOcclusion(float4 ShadowmapDepth, FPCFSamplerSettings Settings)
{
	if (Settings.bSubsurface)
	{
		float4 OccluderDistance = max(Settings.SceneDepth - ShadowmapDepth, 0);
		float4 Occlusion = GetSubSurfaceTransmission(OccluderDistance, Settings.DensityMulConstant);
		
		return  select_internal( ShadowmapDepth > .99f , 1.0f , Occlusion );
	}
	else
	{
		
		
		
		float TransitionScale = Settings.TransitionScale;

		
		
		float ConstantFactor = (Settings.SceneDepth * TransitionScale - 1);
		float4 ShadowFactor = saturate(ShadowmapDepth * TransitionScale - ConstantFactor);

		[flatten]
		if (Settings.bTreatMaxDepthUnshadowed)
		{
			ShadowFactor = saturate(ShadowFactor + (ShadowmapDepth > .99f));
		}

		return ShadowFactor;
	}
}

float3 CalculateOcclusion(float3 ShadowmapDepth, FPCFSamplerSettings Settings)
{
	if (Settings.bSubsurface)
	{
		
		
		
		float3 Thickness = max(Settings.SceneDepth - ShadowmapDepth, 0);
		float3 Occlusion = saturate(FastExp(-Thickness * Settings.DensityMulConstant));
		
		return  select_internal( ShadowmapDepth > .99f , 1.0 , Occlusion );
	}
	else
	{
		
		
		
		float TransitionScale = Settings.TransitionScale;

		
		
		float ConstantFactor = (Settings.SceneDepth * TransitionScale - 1);
		float3 ShadowFactor = saturate(ShadowmapDepth * TransitionScale - ConstantFactor);

		[flatten]
		if (Settings.bTreatMaxDepthUnshadowed)
		{
			ShadowFactor = saturate(ShadowFactor + (ShadowmapDepth > .99f));
		}

		return ShadowFactor;
	}
}

float3 FetchRowOfThree(float2 Sample00TexelCenter, float VerticalOffset, FPCFSamplerSettings Settings)
{
	float3 Values;
	Values.x = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(0, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.y = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(1, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.z = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(2, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;	
	return CalculateOcclusion(Values, Settings);
}

float4 FetchRowOfFour(float2 Sample00TexelCenter, float VerticalOffset, FPCFSamplerSettings Settings)
{
	float4 Values;
	Values.x = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(0, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.y = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(1, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.z = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(2, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.w = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(3, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	return CalculateOcclusion(Values, Settings);
}

float3 FetchRowOfThreeAfterFour(float2 Sample00TexelCenter, float VerticalOffset, FPCFSamplerSettings Settings)
{
	float3 Values;
	Values.x = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(4, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.y = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(5, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.z = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(6, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	return CalculateOcclusion(Values, Settings);
}

float Manual3x3PCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{
	
	{
		float2 TexelPos = ShadowPosition * Settings.ShadowBufferSize.xy - 0.5f;	
		float2 Fraction = frac(TexelPos);
		float2 TexelCorner = floor(TexelPos);	

		
		
		float2 SamplePos = (TexelCorner + 1.0f) * Settings.ShadowBufferSize.zw;	
		float4 SampleValues0 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(-1, -1)), Settings);
		float4 SampleValues1 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(1, -1)), Settings);
		float4 SampleValues2 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(-1, 1)), Settings);
		float4 SampleValues3 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(1, 1)), Settings);
		return PCF3x3gather(Fraction, SampleValues0, SampleValues1, SampleValues2, SampleValues3);
	}
}

float Manual5x5PCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{
	
	float2 TexelPos = ShadowPosition * Settings.ShadowBufferSize.xy - 0.5f;	
	float2 Fraction = frac(TexelPos);
	
	
	float2 SamplePos = (floor(TexelPos) + 1.0f) * Settings.ShadowBufferSize.zw;	

	float4 Values00 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(-2, -2)), Settings);
	float4 Values20 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(0, -2)), Settings);
	float4 Values40 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(2, -2)), Settings);

	float2 Row0 = HorizontalPCF5x2(Fraction, Values00, Values20, Values40);
	float Results = Row0.x * (1.0f - Fraction.y) + Row0.y;

	float4 Values02 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(-2, 0)), Settings);
	float4 Values22 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(0, 0)), Settings);
	float4 Values42 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(2, 0)), Settings);

	float2 Row1 = HorizontalPCF5x2(Fraction, Values02, Values22, Values42);
	Results += Row1.x + Row1.y;

	float4 Values04 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(-2, 2)), Settings);
	float4 Values24 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(0, 2)), Settings);
	float4 Values44 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(2, 2)), Settings);

	float2 Row2 = HorizontalPCF5x2(Fraction, Values04, Values24, Values44);
	Results += Row2.x + Row2.y * Fraction.y;

	return 0.04f * Results;
}


float Manual2x2PCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{
	float2 TexelPos = ShadowPosition * Settings.ShadowBufferSize.xy;
	float2 Fraction = frac(TexelPos);
	float2 TexelCenter = floor(TexelPos) + 0.5f;	
	
	float2 Sample00TexelCenter = TexelCenter - float2(1, 1);

	float3 SamplesValues0 = FetchRowOfThree(Sample00TexelCenter, 0, Settings);
	float3 SamplesValues1 = FetchRowOfThree(Sample00TexelCenter, 1, Settings);
	float3 SamplesValues2 = FetchRowOfThree(Sample00TexelCenter, 2, Settings);
	
	return PCF2x2(Fraction, SamplesValues0, SamplesValues1, SamplesValues2);
}


float Manuax2PCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{
	float2 TexelPos = ShadowPosition * Settings.ShadowBufferSize.xy;
	float2 Fraction = frac(TexelPos);
	float2 TexelCenter = floor(TexelPos) + 0.5f;	
	
	float2 Sample00TexelCenter = TexelCenter - float2(1, 1);

	float3 SamplesValues0 = FetchRowOfThree(Sample00TexelCenter, 0, Settings);
	float3 SamplesValues1 = FetchRowOfThree(Sample00TexelCenter, 1, Settings);
	float3 SamplesValues2 = FetchRowOfThree(Sample00TexelCenter, 2, Settings);
	
	return PCF2x2(Fraction, SamplesValues0, SamplesValues1, SamplesValues2);
}

float ManualNoFiltering(float2 ShadowPosition, FPCFSamplerSettings Settings)
{
	
	return CalculateOcclusion(Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, ShadowPosition, 0).rrr, Settings).r;
}

float Manual1x1PCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{
	float2 TexelPos = ShadowPosition * Settings.ShadowBufferSize.xy - 0.5f;	
	float2 Fraction = frac(TexelPos);

	
	float4 Samples;

	
	
	float2 QuadCenter = floor(TexelPos) + 1.0f;	
	Samples = Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, QuadCenter * Settings.ShadowBufferSize.zw);

	float4 Values00 = CalculateOcclusion(Samples, Settings);
	return PCF1x1(Fraction, Values00);
}


float ManualPCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{








	return Manual5x5PCF(ShadowPosition, Settings);

}
#line  11 "/Engine/Private/MobileLightingCommon.ush"

#line   3 "/Engine/Private/ClearCoatCommon.ush"


float3 GetClearCoatBottomNormal(FGBufferData GBuffer, float3 WorldNormal)
{
	if (GBuffer.ShadingModelID == 4 && 0)
	{
		const float2 oct1 = ((float2(GBuffer.CustomData.a, GBuffer.CustomData.z) * 4) - (512.0 / 255.0)) + UnitVectorToOctahedron(WorldNormal);
		WorldNormal = OctahedronToUnitVector(oct1);
	}

	return WorldNormal;
}

float GetClearCoatRoughness(FGBufferData GBuffer)
{
	return GBuffer.ShadingModelID == 4 ? GBuffer.CustomData.y : GBuffer.Roughness;
}

void RemapClearCoatDiffuseAndSpecularColor(FGBufferData GBuffer, min16float NoV, inout min16float3 DiffuseColor, inout min16float3 SpecularColor)
{
	if (GBuffer.ShadingModelID == 4)
	{
		
		min16float RefractionScale = ((NoV * 0.5 + 0.5) * NoV - 1) * saturate(1.25 - 1.25 * GBuffer.Roughness) + 1;

		min16float MetalSpec = 0.9;
		min16float3 AbsorptionColor = GBuffer.BaseColor * (1 / MetalSpec);
		min16float3 Absorption = AbsorptionColor * ((NoV - 1) * 0.85 * (1 - lerp(AbsorptionColor, Square(AbsorptionColor), -0.78)) + 1);

		min16float F0 = 0.04;
		min16float Fc = Pow5(1 - NoV);
		min16float F = Fc + (1 - Fc) * F0;
		min16float ClearCoat = GBuffer.CustomData.x;
		min16float LayerAttenuation = lerp(1, (1 - F), ClearCoat);

		min16float3 BaseColor = lerp(GBuffer.BaseColor * LayerAttenuation, MetalSpec * Absorption * RefractionScale, GBuffer.Metallic * ClearCoat);
		
		DiffuseColor = BaseColor - BaseColor * GBuffer.Metallic;

		min16float Specular = lerp(GBuffer.Specular, RefractionScale, ClearCoat);
		SpecularColor = ComputeF0(Specular, BaseColor, GBuffer.Metallic) * View_SpecularOverrideParameter.w + View_SpecularOverrideParameter.xyz;
	}
}

void RemapClearCoatDiffuseAndSpecularColor(FGBufferData GBuffer, float2 ScreenPosition, inout float3 DiffuseColor, inout float3 SpecularColor)
{
	if (GBuffer.ShadingModelID == 4)
	{
		float3 TranslatedWorldPosition = mul(float4(ScreenPosition * GBuffer.Depth, GBuffer.Depth, 1), View_ScreenToTranslatedWorld).xyz;
		float3 CameraToPixel = normalize(TranslatedWorldPosition - GetPrimaryView().TranslatedWorldCameraOrigin);
		float3 V = -CameraToPixel;
		float NoV = saturate(dot(GBuffer.WorldNormal, V));

		RemapClearCoatDiffuseAndSpecularColor(GBuffer, NoV, DiffuseColor, SpecularColor);
	}
}

float3 ClearCoatLayerCombine(FGBufferData GBuffer, float NoV, float3 TopLayerReflections, float3 BottomLayerReflections, float3 SpecularColor)
{
	const float ClearCoat			= GBuffer.CustomData.x;
	const float ClearCoatRoughness	= GBuffer.CustomData.y;

	
	float2 AB = PreIntegratedGF.SampleLevel( PreIntegratedGFSampler, float2( NoV, GBuffer.Roughness ), 0 ).rg;
	BottomLayerReflections *= SpecularColor * AB.x + AB.y * saturate( 50 * SpecularColor.g ) * (1 - ClearCoat);
		
	
	float F = EnvBRDF( 0.04, ClearCoatRoughness, NoV ).x;
		
	F *= ClearCoat;
			
	return BottomLayerReflections * (1 - F) + TopLayerReflections * F;
}
#line  12 "/Engine/Private/MobileLightingCommon.ush"

#line   7 "/Engine/Private/DeferredLightingCommon.ush"



#line   7 "/Engine/Private/DynamicLightingCommon.ush"


float3 GetDeferredLightTranslatedWorldPosition()
{
	return DeferredLightUniforms_TranslatedWorldPosition;
}





float RadialAttenuationMask(float3 WorldLightVector)
{
	float NormalizeDistanceSquared = dot(WorldLightVector, WorldLightVector);
	return 1.0f - saturate(NormalizeDistanceSquared);
}
float RadialAttenuation(float3 WorldLightVector, min16float FalloffExponent)
{
	
	return pow(RadialAttenuationMask(WorldLightVector), FalloffExponent);

	
	
	
	
	















}







float SpotAttenuationMask(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	return saturate((dot(L, -SpotDirection) - SpotAngles.x) * SpotAngles.y);
}
float SpotAttenuation(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	float ConeAngleFalloff = Square(SpotAttenuationMask(L, SpotDirection, SpotAngles));
	return ConeAngleFalloff;
}


float CalcLightAttenuation(float3 TranslatedWorldPosition, out float3 WorldLightVector)
{
	WorldLightVector = DeferredLightUniforms_Direction;
	float DistanceAttenuation = 1;

#line  87 "/Engine/Private/DynamicLightingCommon.ush"


	float SpotFalloff = 1;
	



	return SpotFalloff * DistanceAttenuation;
}

float3 GetNormalizedLightVector(float3 TranslatedWorldPosition)
{
	
	float3 Ret = DeferredLightUniforms_Direction;

	



	return Ret;
}

float GetLightInfluenceMask(float3 TranslatedWorldPosition)
{
	float LightMask = 1;

	if (DeferredLightUniforms_InvRadius > 0)
	{
		float3 ToLight = GetDeferredLightTranslatedWorldPosition() - TranslatedWorldPosition;
		float DistanceSqr = dot(ToLight, ToLight);
		float3 L = ToLight * rsqrt(DistanceSqr);

		if (DeferredLightUniforms_FalloffExponent == 0)
		{
			LightMask = saturate(1 - Square(DistanceSqr * Square(DeferredLightUniforms_InvRadius)));
			
		}
		else
		{
			LightMask = RadialAttenuationMask(ToLight * DeferredLightUniforms_InvRadius);
		}

		if (DeferredLightUniforms_SpotAngles.x > -2.0f)
		{
			LightMask *= SpotAttenuationMask(L, -DeferredLightUniforms_Direction, DeferredLightUniforms_SpotAngles);
		}
	}

	return LightMask > 0.0f ? 1.0f : 0.0f;
}
#line  10 "/Engine/Private/DeferredLightingCommon.ush"

#line   7 "/Engine/Private/IESLightProfilesCommon.ush"



  
	
  









float ComputeLightProfileMultiplier(float3 WorldPosition, float3 LightPosition, float3 LightDirection, float3 LightTangent, float InIESAtlasIndex)
{
	float Out = 1.0f;
#line  52 "/Engine/Private/IESLightProfilesCommon.ush"

	return Out;
}
#line  11 "/Engine/Private/DeferredLightingCommon.ush"

#line   3 "/Engine/Private/CapsuleLightIntegrate.ush"







#line   3 "/Engine/Private/CapsuleLightSampling.ush"




float SqrtOneMinusX(float x)
{
	return x < 0.01 ? 1 - x * (0.5 + x * 0.125) : sqrt(1 - x);
}



struct FCapsuleSphericalBounds
{
	FSphericalRect SphericalRect;
	float3 ConeAxis;
	float ConeSinThetaMax2;
	float ConeSolidAngle;
};


float GetCapsuleBoundsSolidAngle(FCapsuleSphericalBounds Bounds)
{
	return min(Bounds.SphericalRect.SolidAngle, Bounds.ConeSolidAngle);
}


float4 SampleCapsuleBounds(FCapsuleSphericalBounds Bounds, float2 E)
{
	if (Bounds.ConeSolidAngle < Bounds.SphericalRect.SolidAngle)
	{
		return float4(TangentToWorld(UniformSampleConeRobust(E, Bounds.ConeSinThetaMax2).xyz, Bounds.ConeAxis), Bounds.ConeSolidAngle);
	}
	else
	{
		return float4(normalize(UniformSampleSphericalRect(E, Bounds.SphericalRect)), Bounds.SphericalRect.SolidAngle);
	}
}


FCapsuleSphericalBounds CapsuleGetSphericalBounds(float3 Origin, float3 Axis, float Radius, float Length)
{
	float h = dot(Axis, Origin);
	float3 ClosestPointOnAxis = Origin - Axis * h;

	float DistanceToAxisSqr = dot(ClosestPointOnAxis, ClosestPointOnAxis);
	float RadiusSqr = Pow2(Radius);

	if (DistanceToAxisSqr <= RadiusSqr)
	{
		
		float3 CapCenter = Origin - Axis * Length * 0.5 * sign(h);
		float LightDistanceSquared = dot(CapCenter, CapCenter);
		float SinThetaMax2 = saturate(RadiusSqr / LightDistanceSquared);

		FCapsuleSphericalBounds Result;
		Result.SphericalRect = (FSphericalRect)0;
		Result.SphericalRect.SolidAngle = (asfloat(0x7F800000)); 
		Result.ConeAxis = normalize(CapCenter);
		Result.ConeSinThetaMax2 = SinThetaMax2;
		Result.ConeSolidAngle = UniformConeSolidAngle(SinThetaMax2);
		return Result;
	}

	
	FRect Rect;
	Rect.Origin = Origin;
	Rect.Axis[1] = Axis;
	Rect.Axis[2] = normalize(-ClosestPointOnAxis);
	Rect.Axis[0] = cross(Rect.Axis[1], Rect.Axis[2]);

	float SinCylinderAngle = Radius * rsqrt(DistanceToAxisSqr);
	
	float RectRadius = Radius * rsqrt(1 - Pow2(SinCylinderAngle));

	float Extension[2];
	for (int i = 0; i < 2; i++)
	{
		float hi = Length * (i > 0 ? 0.5 : -0.5);
		float3 PointPos = Origin + Axis * hi;

		float InverseDist = rsqrt(dot(PointPos, PointPos));

		float SinSphereAngle = saturate(Radius * InverseDist);
		float CosSphereAngle = SqrtOneMinusX(Pow2(SinSphereAngle));

		float CosAxisAngle = -dot(Axis, PointPos) * InverseDist;
		CosAxisAngle = sign(CosAxisAngle * hi) * saturate(abs(CosAxisAngle));
		float SinAxisAngle = SqrtOneMinusX(Pow2(CosAxisAngle));

		float CosExtension = SinAxisAngle * CosSphereAngle + CosAxisAngle * SinSphereAngle;
		Extension[i] = Radius / CosExtension;
	}

	float Translate = 0.5 * (Extension[1] - Extension[0]);
	float Extend = 0.5 * (Extension[0] + Extension[1]);

	Rect.Origin += Translate * Rect.Axis[1];
	Rect.Extent = float2(RectRadius, 0.5 * Length + Extend);

	
	float3 R0 = Rect.Origin - Rect.Axis[1] * Rect.Extent.y;
	float3 R1 = Rect.Origin + Rect.Axis[1] * Rect.Extent.y;
	float InvDistR0 = rsqrt(dot(R0, R0));
	float InvDistR1 = rsqrt(dot(R1, R1));

	FCapsuleSphericalBounds Result;
	Result.SphericalRect = BuildSphericalRect(Rect);
	Result.ConeAxis = normalize(lerp(R0, R1, saturate(InvDistR1 / (InvDistR0 + InvDistR1))));
	Result.ConeSinThetaMax2 = saturate(0.5 - 0.5 * dot(R0, R1) * InvDistR0 * InvDistR1); 
	Result.ConeSolidAngle = UniformConeSolidAngle(Result.ConeSinThetaMax2);
	return Result;
}




float CapsuleIntersect(float3 Rd, float3 Center, float3 Axis, float Radius2, float Length)
{
	float3 ba = Axis;
	float3 oa = -Center;
	float bard = dot(ba, Rd);
	float baoa = dot(ba, oa);
	float rdoa = dot(Rd, oa);
	float oaoa = dot(oa, oa);
	float a = 1 - bard * bard;
	float b = rdoa - baoa * bard;
	float c = oaoa - baoa * baoa - Radius2;
	float h = b * b - a * c;
	if (h >= 0.0)
	{
		float t = (-b - sqrt(h)) / a;
		float y = baoa + t * bard;
		
		if (abs(y) < 0.5 * Length)
		{
			return t;
		}

		
		float3 oc = oa - (sign(y) * 0.5 * Length) * ba;
		b = dot(Rd, oc);
		h = Radius2 - length2(oc - b * Rd);
		if (h > 0.0)
		{
			return -b - sqrt(h);
		}
	}
	return -1.0;
}



float CapsuleTest(float3 Rd, float3 Center, float3 Axis, float Radius2, float Length)
{
	
	float B = dot(Rd, Axis);
	float t = clamp(dot(Center, B * Rd - Axis) / (1 - B * B), -0.5 * Length, 0.5 * Length);
	float3 ToSphere = Center + t * Axis;
	float3 C = cross(Rd, ToSphere);
	return dot(C, C) <= Radius2 ? length(ToSphere) : -1.0;
}
#line  10 "/Engine/Private/CapsuleLightIntegrate.ush"




float IntegrateLight( FCapsuleLight Capsule, bool bInverseSquared )
{
	float Falloff;

	[branch]
	if( Capsule.Length > 0 )
	{
		float NoL;
		float LineCosSubtended = 1;
		LineIrradiance( 0, Capsule.LightPos[0], Capsule.LightPos[1], Capsule.DistBiasSqr, LineCosSubtended, Falloff, NoL );
	}
	else
	{
		float3 ToLight = Capsule.LightPos[0];
		float DistSqr = dot( ToLight, ToLight );
		Falloff = rcp( DistSqr + Capsule.DistBiasSqr );
	}

	Falloff = bInverseSquared ? Falloff : 1;

	return Falloff;
}

FAreaLightIntegrateContext CreateCapsuleIntegrateContext(float Roughness, min16float3 N, min16float3 V, FCapsuleLight Capsule, bool bInverseSquared )
{
	FAreaLightIntegrateContext Out = InitAreaLightIntegrateContext();

	float NoL;
	float Falloff;
	float LineCosSubtended = 1;

	
	
	
	
	

	[branch]
	if( Capsule.Length > 0 )
	{
		LineIrradiance( N, Capsule.LightPos[0], Capsule.LightPos[1], Capsule.DistBiasSqr, LineCosSubtended, Falloff, NoL );
	}
	else
	{
		float DistSqr = dot( Capsule.LightPos[0], Capsule.LightPos[0] );
		Falloff = rcp( DistSqr + Capsule.DistBiasSqr );

		float3 L = Capsule.LightPos[0] * rsqrt( DistSqr );
		NoL = dot( N, L );
	}

	if( Capsule.Radius > 0 )
	{
		
		float SinAlphaSqr = saturate( Pow2( Capsule.Radius ) * Falloff );
		NoL = SphereHorizonCosWrap( NoL, SinAlphaSqr );
	}

	NoL = saturate( NoL );
	Falloff = bInverseSquared ? Falloff : 1;

	float3 ToLight = Capsule.LightPos[0];
	if( Capsule.Length > 0 )
	{
		float3 R = reflect( -V, N );

		







		ToLight = ClosestPointLineToRay( Capsule.LightPos[0], Capsule.LightPos[1], Capsule.Length, R );
	}

	float DistSqr = dot( ToLight, ToLight );
	float InvDist = rsqrt( DistSqr );
	float3 L = ToLight * InvDist;
	
	Roughness = max( Roughness, View_MinRoughness );
	float a = Pow2( Roughness );
    
	
	
	const float SizeFadesOutDiffuseMicroRefl = 20.0;

	Out.AreaLight.SphereSinAlpha = saturate( Capsule.Radius * InvDist * (1 - a) );
	Out.AreaLight.SphereSinAlphaSoft = saturate( Capsule.SoftRadius * InvDist );
	Out.AreaLight.LineCosSubtended = LineCosSubtended;
	Out.AreaLight.FalloffColor = 1;
	Out.AreaLight.Rect = (FRect)0;
	Out.AreaLight.Texture = InitRectTexture();
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	SetIsRectLight(Out.AreaLight, false);
	SetAreaLightDiffuseMicroReflWeight(Out.AreaLight, saturate(1.0f - max(Capsule.Length, Capsule.Radius) / SizeFadesOutDiffuseMicroRefl));
	Out.NoL = NoL;
	Out.Falloff = Falloff;	
	Out.L = L;
	return Out;
}


FDirectLighting IntegrateBxDF( FGBufferData GBuffer, min16float3 N, min16float3 V, FCapsuleLight Capsule, FShadowTerms Shadow, bool bInverseSquared )
{
	GBuffer.Roughness = max( GBuffer.Roughness, View_MinRoughness );
	FAreaLightIntegrateContext Context = CreateCapsuleIntegrateContext(GBuffer.Roughness, N, V, Capsule, bInverseSquared);
	return IntegrateBxDF( GBuffer, N, V, Context.L, Context.Falloff, Context.NoL, Context.AreaLight, Shadow );
}

FDirectLighting IntegrateBxDF( FGBufferData GBuffer, min16float3 N, min16float3 V, FCapsuleLight Capsule, FShadowTerms Shadow, uint2 SVPos )
{
	FDirectLighting Lighting = (FDirectLighting)0;

	Capsule.Radius = max( 1, Capsule.Radius );

	const float SphereArea = (4*PI) * Pow2( Capsule.Radius );
	const float CylinderArea = (2*PI) * Capsule.Radius * Capsule.Length;
	const float SurfaceArea = SphereArea + CylinderArea;
	const float SurfaceColor = 4.0 / SurfaceArea;

	float3 ToLight = 0.5 * ( Capsule.LightPos[0] + Capsule.LightPos[1] );
	float3 CapsuleAxis = normalize( Capsule.LightPos[1] - Capsule.LightPos[0] );

	float DistanceSqr = dot( ToLight, ToLight );
	float3 ConeAxis = ToLight * rsqrt( DistanceSqr );
	float SineConeSqr = saturate(Pow2(Capsule.Radius) / DistanceSqr);

	FCapsuleSphericalBounds CapsuleBounds = CapsuleGetSphericalBounds(ToLight, CapsuleAxis, Capsule.Radius, Capsule.Length);
	
	const uint NumSets = 3;
	const uint NumSamples[ NumSets ] =
	{
		0,	
		16,	
		16,	
	};
	
	uint2 SobolBase = SobolPixel( SVPos );
	uint2 SobolFrame = SobolIndex( SobolBase, View_StateFrameIndexMod8, 3 );
	
	[unroll]
	for( uint Set = 0; Set < NumSets; Set++ )
	{
		[loop]
		for( uint i = 0; i < NumSamples[ Set ]; i++ )
		{
			uint2 Random = Rand3DPCG16( uint3( SVPos.xy, View_Random ^ Set ) ).xy;

			float2 E = float2( SobolIndex( SobolFrame, i << 3 ) ) / 0x10000;
			
			
			
			float3 L, H;
			if( Set == 0 )
			{
				L = TangentToWorld( CosineSampleHemisphere( E ).xyz, N );
				H = normalize(V + L);
			}
			else if( Set == 1 )
			{
				H = TangentToWorld( ImportanceSampleGGX( E, Pow4(GBuffer.Roughness) ).xyz, N );
				L = 2 * dot( V, H ) * H - V;
			}
			else
			{
				















































				if( Capsule.Length > 0 )
				{
					float3 ToArea = SampleCapsuleBounds(CapsuleBounds, E).xyz;
					L = normalize( ToArea );
					H = normalize( V + L );
				}
				else
				{
					L = TangentToWorld( UniformSampleConeRobust( E, SineConeSqr).xyz, ConeAxis );
					H = normalize(V + L);
				}
			}

			float NoL = saturate( dot(N, L) );
			float NoH = saturate( dot(N, H) );
			float VoH = saturate( dot(V, H) );

			if( NoL > 0 && VoH > 0 )
			{
				{
					if (CapsuleTest(L, ToLight, CapsuleAxis, Pow2(Capsule.Radius), Capsule.Length) > 0)
					{
						
						continue;
					}
				}

				float PDF[] =
				{
					NoL / PI,
					D_GGX(Pow4(GBuffer.Roughness), NoH) * NoH / (4 * VoH),
					1.0 / GetCapsuleBoundsSolidAngle(CapsuleBounds)
				};

				if( Capsule.Length == 0 )
				{
					PDF[2] = 1.0 / UniformConeSolidAngle(SineConeSqr);
				}

				
				float InvWeight = 0;
				[unroll] for( uint j = 0; j < NumSets; j++ )
				{
					InvWeight += Square( PDF[j] * NumSamples[j] );
				}
				float Weight = rcp( InvWeight ) * PDF[Set] * NumSamples[Set];
				
				FDirectLighting LightingSample = EvaluateBxDF( GBuffer, N, V, L, NoL, Shadow );

				Lighting.Diffuse		+= SurfaceColor * Weight * LightingSample.Diffuse;
				Lighting.Specular		+= SurfaceColor * Weight * LightingSample.Specular;
				Lighting.Transmission	+= SurfaceColor * Weight * LightingSample.Transmission;
			}
		}
	}

	return Lighting;
}
#line  12 "/Engine/Private/DeferredLightingCommon.ush"

#line   3 "/Engine/Private/RectLightIntegrate.ush"








float3 ClampToRect( float3 L, FRect Rect )
{
	
	
	

	
	float3 PointOnPlane = L * ( dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L ) );
	

	float2 PointInRect;
	PointInRect.x = dot( Rect.Axis[0], PointOnPlane - Rect.Origin );
	PointInRect.y = dot( Rect.Axis[1], PointOnPlane - Rect.Origin );

	
	PointInRect = clamp( PointInRect, -Rect.Extent, Rect.Extent );

	float3 ToRect = Rect.Origin;
	ToRect += PointInRect.x * Rect.Axis[0];
	ToRect += PointInRect.y * Rect.Axis[1];

	return normalize( ToRect );
}

bool RayHitRect( float3 L, FRect Rect )
{
	
	float t = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
	float3 PointOnPlane = L * t;

	bool InExtentX = abs( dot( Rect.Axis[0], PointOnPlane - Rect.Origin ) ) <= Rect.Extent.x;
	bool InExtentY = abs( dot( Rect.Axis[1], PointOnPlane - Rect.Origin ) ) <= Rect.Extent.y;

	return t >= 0 && InExtentX && InExtentY;
}

float IntegrateLight( FRect Rect )
{
	
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	float NoL;
	float Falloff;




	float3 L = RectIrradianceLambert( 0, Rect, Falloff, NoL );







	
	return Falloff;
}

FAreaLightIntegrateContext CreateRectIntegrateContext( float Roughness, min16float3 N, min16float3 V, FRect Rect, FRectTexture SourceTexture )
{
	float NoL = 0;
	float Falloff = 0;
	
	FAreaLightIntegrateContext Out = InitAreaLightIntegrateContext();




	float3 L = RectIrradianceLambert( N, Rect, Falloff, NoL );








#line 236 "/Engine/Private/RectLightIntegrate.ush"

	float3 FalloffColor = SampleSourceTexture( L, Rect, SourceTexture );

	Out.AreaLight.SphereSinAlpha = 0;
	Out.AreaLight.SphereSinAlphaSoft = 0;
	Out.AreaLight.LineCosSubtended = 1;
	Out.AreaLight.FalloffColor = FalloffColor;
	Out.AreaLight.Rect = Rect;
	Out.AreaLight.Texture = SourceTexture;
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	SetIsRectLight(Out.AreaLight, true);
	SetAreaLightDiffuseMicroReflWeight(Out.AreaLight, 0.0);
	Out.L = L;
	Out.NoL = NoL;
	Out.Falloff = Falloff;

	return Out;
}

FDirectLighting IntegrateBxDF(FGBufferData GBuffer, min16float3 N, min16float3 V, FRect Rect, FShadowTerms Shadow, FRectTexture SourceTexture)
{
	
	FDirectLighting Out = (FDirectLighting)0;
	if (IsRectVisible(Rect))
	{
		FAreaLightIntegrateContext Context = CreateRectIntegrateContext(GBuffer.Roughness, N, V, Rect, SourceTexture);
		GBuffer.Roughness = max(GBuffer.Roughness, 0.02);
		Out = IntegrateBxDF(GBuffer, N, V, Context.L, Context.Falloff, Context.NoL, Context.AreaLight, Shadow);
	}
	return Out;
}

FDirectLighting IntegrateBxDF( FGBufferData GBuffer, min16float3 N, min16float3 V, FRect Rect, FShadowTerms Shadow, FRectTexture SourceTexture, uint2 SVPos )
{
	FDirectLighting Lighting = (FDirectLighting)0;

	const float SurfaceArea = 4 * Rect.Extent.x * Rect.Extent.y;
	const float SurfaceColor = 2.0 / SurfaceArea;

	
	if( dot( Rect.Axis[2], Rect.Origin ) < 0 )
		return Lighting;
	
	
	if (!IsRectVisible(Rect))
		return Lighting;

	FSphericalRect SphericalRect = BuildSphericalRect( Rect );
	
	const uint NumSets = 4;
	const uint NumSamples[ NumSets ] =
	{
		0,	
		16,	
		0,	
		16,	
	};

	uint2 SobolBase = SobolPixel( SVPos );
	uint2 SobolFrame = SobolIndex( SobolBase, View_StateFrameIndexMod8, 3 );

	[unroll]
	for( uint Set = 0; Set < NumSets; Set++ )
	{
		[loop]
		for( uint i = 0; i < NumSamples[ Set ]; i++ )
		{
			uint2 Random = Rand3DPCG16( uint3( SVPos.xy, View_Random ^ Set ) ).xy;

			float2 E = float2( SobolIndex( SobolFrame, i << 3 ) ) / 0x10000;
			
			
			
			float3 L, H;
			switch( Set )
			{
				case 0:
				{
					L = TangentToWorld( CosineSampleHemisphere( E ).xyz, N );
					H = normalize( V + L );
					break;
				}
				case 1:
				{
					H = TangentToWorld( ImportanceSampleGGX( E, Pow4(GBuffer.Roughness) ).xyz, N );
					L = 2 * dot( V, H ) * H - V;
					break;
				}
				case 2:
				{
					float3 ToArea = Rect.Origin;
					ToArea += (E.x * 2 - 1) * Rect.Axis[0] * Rect.Extent.x;
					ToArea += (E.y * 2 - 1) * Rect.Axis[1] * Rect.Extent.y;
					L = normalize( ToArea );
					H = normalize( V + L );
					break;
				}
				case 3:
				{
					float3 ToArea = UniformSampleSphericalRect( E, SphericalRect );
					L = normalize( ToArea );
					H = normalize( V + L );
					break;
				}
			}

			float NoL = saturate( dot(N, L) );
			float NoH = saturate( dot(N, H) );
			float VoH = saturate( dot(V, H) );

			if( NoL > 0 && VoH > 0 )
			{
				
				float t = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
				float3 PointOnPlane = L * t;

				float2 PointInRect;
				PointInRect.x = dot( Rect.Axis[0], PointOnPlane - Rect.Origin );
				PointInRect.y = dot( Rect.Axis[1], PointOnPlane - Rect.Origin );

				float2 RectUV = PointInRect / Rect.Extent * float2( 0.5, -0.5 ) + 0.5;
				float3 LightColor = SampleRectTexture(SourceTexture, RectUV, 0, true);

				if( Set == 0 || Set == 1 )
				{
					bool InExtentX = abs( PointInRect.x ) <= Rect.Extent.x;
					bool InExtentY = abs( PointInRect.y ) <= Rect.Extent.y;

					[branch]
					if( t < 0 || !InExtentX || !InExtentY )
					{
						
						continue;
					}
				}

				float PDF[] =
				{
					NoL * (1 / PI),
					D_GGX( Pow4(GBuffer.Roughness), NoH ) * NoH / (4 * VoH),
					dot( PointOnPlane, PointOnPlane ) / ( SurfaceArea * abs( dot( L, Rect.Axis[2] ) ) ),
					1.0 / SphericalRect.SolidAngle,
				};

				
				float InvWeight = 0;
				[unroll] for( uint j = 0; j < NumSets; j++ )
				{
					InvWeight += Square( PDF[j] * NumSamples[j] );
				}
				float Weight = rcp( InvWeight ) * PDF[Set] * NumSamples[Set];

				FDirectLighting LightingSample = EvaluateBxDF( GBuffer, N, V, L, NoL, Shadow );

				Lighting.Diffuse		+= ( LightColor * Weight ) * LightingSample.Diffuse;
				Lighting.Specular		+= ( LightColor * Weight ) * LightingSample.Specular;
				Lighting.Transmission	+= ( LightColor * Weight ) * LightingSample.Transmission;
			}
		}
	}

	return Lighting;
}
#line  13 "/Engine/Private/DeferredLightingCommon.ush"

#line   3 "/Engine/Private/Strata/Strata.ush"








#line 4205 "/Engine/Private/Strata/Strata.ush"

#line  14 "/Engine/Private/DeferredLightingCommon.ush"









	


		
	





float DistanceFromCameraFade(float SceneDepth, FDeferredLightData LightData)
{
	
	float Fade = saturate(SceneDepth * LightData.DistanceFadeMAD.x + LightData.DistanceFadeMAD.y);
	return Fade * Fade;
}

#line 116 "/Engine/Private/DeferredLightingCommon.ush"






void GetShadowTerms(float SceneDepth, min16float4 PrecomputedShadowFactors, uint ShadingModelID, float ContactShadowOpacity, FDeferredLightData LightData, float3 TranslatedWorldPosition, min16float3 L, min16float4 LightAttenuation, float Dither, inout FShadowTerms Shadow)
{
	float ContactShadowLength = 0.0f;
	const float ContactShadowLengthScreenScale = View_ClipToView[1][1] * SceneDepth;

	[branch]
	if (LightData.ShadowedBits)
	{
		

		
		
		

		min16float UsesStaticShadowMap = dot(LightData.ShadowMapChannelMask, min16float4(1, 1, 1, 1));
		min16float StaticShadowing = lerp(1, dot(PrecomputedShadowFactors, LightData.ShadowMapChannelMask), UsesStaticShadowMap);




		if (LightData.bRadialLight || 1)
		{
			

			Shadow.SurfaceShadow = LightAttenuation.z * StaticShadowing;
			
			
			Shadow.TransmissionShadow = LightAttenuation.w * StaticShadowing;

			Shadow.TransmissionThickness = LightAttenuation.w;
		}
		else
		{
			
			
			

			float DynamicShadowFraction = DistanceFromCameraFade(SceneDepth, LightData);
			
			Shadow.SurfaceShadow = lerp(LightAttenuation.x, StaticShadowing, DynamicShadowFraction);
			
			Shadow.TransmissionShadow = min(lerp(LightAttenuation.y, StaticShadowing, DynamicShadowFraction), LightAttenuation.w);

			Shadow.SurfaceShadow *= LightAttenuation.z;
			Shadow.TransmissionShadow *= LightAttenuation.z;

			
			Shadow.TransmissionThickness = min(LightAttenuation.y, LightAttenuation.w);
		}

		[flatten]
		if (LightData.ShadowedBits > 1 && LightData.ContactShadowLength > 0)
		{
			ContactShadowLength = LightData.ContactShadowLength * (LightData.ContactShadowLengthInWS ? 1.0f : ContactShadowLengthScreenScale);
		}
	}

#line 234 "/Engine/Private/DeferredLightingCommon.ush"


	Shadow.HairTransmittance = LightData.HairTransmittance;
	Shadow.HairTransmittance.OpaqueVisibility = Shadow.SurfaceShadow;
}

float GetLocalLightAttenuation(
	float3 TranslatedWorldPosition, 
	FDeferredLightData LightData, 
	inout float3 ToLight, 
	inout float3 L)
{
	ToLight = LightData.TranslatedWorldPosition - TranslatedWorldPosition;
		
	float DistanceSqr = dot( ToLight, ToLight );
	L = ToLight * rsqrt( DistanceSqr );

	float LightMask;
	if (LightData.bInverseSquared)
	{
		LightMask = Square( saturate( 1 - Square( DistanceSqr * Square(LightData.InvRadius) ) ) );
		
		
		
		LightMask *= 1.0f / (DistanceSqr + 1.0f);
		
	}
	else
	{
		LightMask = RadialAttenuation(ToLight * LightData.InvRadius, LightData.FalloffExponent);
	}

	if (LightData.bSpotLight)
	{
		LightMask *= SpotAttenuation(L, -LightData.Direction, LightData.SpotAngles);
	}

	if( LightData.bRectLight )
	{
		
		LightMask = dot( LightData.Direction, L ) < 0 ? 0 : LightMask;
	}

	return LightMask;
}



FRect GetRect(float3 ToLight, FDeferredLightData LightData)
{
	return GetRect(
		ToLight, 
		LightData.Direction, 
		LightData.Tangent, 
		LightData.SourceRadius, 
		LightData.SourceLength, 
		LightData.RectLightData.BarnCosAngle, 
		LightData.RectLightData.BarnLength,
		1);
}

FCapsuleLight GetCapsule( float3 ToLight, FDeferredLightData LightData )
{
	FCapsuleLight Capsule;
	Capsule.Length = LightData.SourceLength;
	Capsule.Radius = LightData.SourceRadius;
	Capsule.SoftRadius = LightData.SoftSourceRadius;
	Capsule.DistBiasSqr = 1;
	Capsule.LightPos[0] = ToLight - 0.5 * Capsule.Length * LightData.Tangent;
	Capsule.LightPos[1] = ToLight + 0.5 * Capsule.Length * LightData.Tangent;
	return Capsule;
}

FLightAccumulator AccumulateDynamicLighting(
	float3 TranslatedWorldPosition, min16float3 CameraVector, FGBufferData GBuffer, min16float AmbientOcclusion, uint ShadingModelID,
	FDeferredLightData LightData, min16float4 LightAttenuation, float Dither, uint2 SVPos, 
	inout float SurfaceShadow)
{
	FLightAccumulator LightAccumulator = (FLightAccumulator)0;

	min16float3 V = -CameraVector;
	min16float3 N = GBuffer.WorldNormal;
	[branch] if( GBuffer.ShadingModelID == 4 && 0)
	{
		const float2 oct1 = ((float2(GBuffer.CustomData.a, GBuffer.CustomData.z) * 4) - (512.0/255.0)) + UnitVectorToOctahedron(GBuffer.WorldNormal);
		N = OctahedronToUnitVector(oct1);			
	}
	
	float3 L = LightData.Direction;	
	float3 ToLight = L;
	float3 MaskedLightColor = LightData.Color;
	float LightMask = 1;
	if (LightData.bRadialLight)
	{
		LightMask = GetLocalLightAttenuation( TranslatedWorldPosition, LightData, ToLight, L );
		MaskedLightColor *= LightMask;
	}

	LightAccumulator.EstimatedCost += 0.3f;		

	[branch]
	if( LightMask > 0 )
	{
		FShadowTerms Shadow;
		Shadow.SurfaceShadow = AmbientOcclusion;
		Shadow.TransmissionShadow = 1;
		Shadow.TransmissionThickness = 1;
		Shadow.HairTransmittance.OpaqueVisibility = 1;
		const float ContactShadowOpacity = GBuffer.CustomData.a;
		GetShadowTerms(GBuffer.Depth, GBuffer.PrecomputedShadowFactors, GBuffer.ShadingModelID, ContactShadowOpacity,
			LightData, TranslatedWorldPosition, L, LightAttenuation, Dither, Shadow);
		SurfaceShadow = Shadow.SurfaceShadow;

		LightAccumulator.EstimatedCost += 0.3f;		


		const bool bNeedsSeparateSubsurfaceLightAccumulation = UseSubsurfaceProfile(GBuffer.ShadingModelID);
		
		FDirectLighting Lighting = (FDirectLighting)0;

		min16float NoL = max(0, dot(GBuffer.WorldNormal, L));
	
		NoL = 1.0f;
	
		Lighting = EvaluateBxDF(GBuffer, N, V, L, NoL, Shadow);

		Lighting.Specular *= LightData.SpecularScale;
				
		LightAccumulator_AddSplit( LightAccumulator, Lighting.Diffuse, Lighting.Specular, Lighting.Diffuse, MaskedLightColor * Shadow.SurfaceShadow, bNeedsSeparateSubsurfaceLightAccumulation );
		LightAccumulator_AddSplit( LightAccumulator, Lighting.Transmission, 0.0f, Lighting.Transmission, MaskedLightColor * Shadow.TransmissionShadow, bNeedsSeparateSubsurfaceLightAccumulation );
#line 421 "/Engine/Private/DeferredLightingCommon.ush"

	}
	return LightAccumulator;
}


FDeferredLightingSplit GetDynamicLightingSplit(
	float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBuffer, float AmbientOcclusion, uint ShadingModelID, 
	FDeferredLightData LightData, float4 LightAttenuation, float Dither, uint2 SVPos, 
	inout float SurfaceShadow)
{
	FLightAccumulator LightAccumulator = AccumulateDynamicLighting(TranslatedWorldPosition, CameraVector, GBuffer, AmbientOcclusion, ShadingModelID, LightData, LightAttenuation, Dither, SVPos, SurfaceShadow);
	return LightAccumulator_GetResultSplit(LightAccumulator);
}

float4 GetDynamicLighting(
	float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBuffer, float AmbientOcclusion, uint ShadingModelID, 
	FDeferredLightData LightData, float4 LightAttenuation, float Dither, uint2 SVPos, 
	inout float SurfaceShadow)
{
	FDeferredLightingSplit SplitLighting = GetDynamicLightingSplit(
		TranslatedWorldPosition, CameraVector, GBuffer, AmbientOcclusion, ShadingModelID, 
		LightData, LightAttenuation, Dither, SVPos, 
		SurfaceShadow);

	return SplitLighting.SpecularLighting + SplitLighting.DiffuseLighting;
}






float3 GetSimpleDynamicLighting(float3 TranslatedWorldPosition, float3 CameraVector, float3 WorldNormal, float AmbientOcclusion, float3 DiffuseColor, float3 SpecularColor, float Roughness, FSimpleDeferredLightData LightData)
{
	float3 V = -CameraVector;
	float3 N = WorldNormal;
	float3 ToLight = LightData.TranslatedWorldPosition - TranslatedWorldPosition;
	float DistanceAttenuation = 1;
	
	float DistanceSqr = dot( ToLight, ToLight );
	float3 L = ToLight * rsqrt( DistanceSqr );
	float NoL = saturate( dot( N, L ) );

	if (LightData.bInverseSquared)
	{
		
		DistanceAttenuation = 1 / ( DistanceSqr + 1 );
	
		float LightRadiusMask = Square( saturate( 1 - Square( DistanceSqr * Square(LightData.InvRadius) ) ) );
		DistanceAttenuation *= LightRadiusMask;
	}
	else
	{
		DistanceAttenuation = RadialAttenuation(ToLight * LightData.InvRadius, LightData.FalloffExponent);
	}

	float3 OutLighting = 0;

	[branch]
	if (DistanceAttenuation > 0)
	{
		const float3 LightColor = LightData.Color;

		
		float Attenuation = DistanceAttenuation * AmbientOcclusion;

		



			OutLighting += LightColor * (NoL * Attenuation) * SimpleShading(DiffuseColor, SpecularColor, max(Roughness, .04f), L, V, N);
		
	}

	return OutLighting;
}

#line  13 "/Engine/Private/MobileLightingCommon.ush"






















#line   7 "/Engine/Private/ReflectionEnvironmentComposite.ush"


float3 CompositeReflectionCapturesAndSkylightTWS(
	float CompositeAlpha, 
	float3 TranslatedWorldPosition, 
	float3 RayDirection, 
	float Roughness, 
	float IndirectIrradiance, 
	float IndirectSpecularOcclusion,
	float3 ExtraIndirectSpecular,
	uint NumCapturesAffectingTile,
	uint CaptureDataStartIndex, 
	int SingleCaptureIndex,
	bool bCompositeSkylight,
	uint EyeIndex)
{
	float Mip = ComputeReflectionCaptureMipFromRoughness(Roughness, View_ReflectionCubemapMaxMip);
	float4 ImageBasedReflections = float4(0, 0, 0, CompositeAlpha);
	float2 CompositedAverageBrightness = float2(0.0f, 1.0f);


	
	[loop]
	for (uint TileCaptureIndex = 0; TileCaptureIndex < NumCapturesAffectingTile; TileCaptureIndex++) 
	{
		[branch]
		if (ImageBasedReflections.a < 0.001)
		{
			break;
		}

		uint CaptureIndex = 0;



	




	
			CaptureIndex = MobileBasePass_Forward_CulledLightDataGrid[CaptureDataStartIndex + TileCaptureIndex];
	
	








		FLWCVector3 CaptureWorldPosition = MakeLWCVector3( ReflectionCaptureES31_TilePosition[ CaptureIndex ].xyz,  ReflectionCaptureES31_PositionAndRadius[ CaptureIndex ].xyz);
		float3 CaptureTranslatedWorldPosition = LWCToFloat(LWCAdd(CaptureWorldPosition, GetPrimaryView().PreViewTranslation));
		float CaptureRadius =  ReflectionCaptureES31_PositionAndRadius[ CaptureIndex ].w;

		float4 CaptureProperties =  ReflectionCaptureES31_CaptureProperties[ CaptureIndex ];

		float3 CaptureVector = TranslatedWorldPosition - CaptureTranslatedWorldPosition;
		float CaptureVectorLength = sqrt(dot(CaptureVector, CaptureVector));		
		float NormalizedDistanceToCapture = saturate(CaptureVectorLength / CaptureRadius);

		[branch]
		if (CaptureVectorLength < CaptureRadius)
		{
			float3 ProjectedCaptureVector = RayDirection;
			float4 CaptureOffsetAndAverageBrightness =  ReflectionCaptureES31_CaptureOffsetAndAverageBrightness[ CaptureIndex ];

			
			float DistanceAlpha = 0;
			
			
			
				
					
					
					[branch] if (CaptureProperties.b > 0)
					
					{
						ProjectedCaptureVector = GetLookupVectorForBoxCapture(RayDirection, TranslatedWorldPosition, float4(CaptureTranslatedWorldPosition, CaptureRadius),
																			  ReflectionCaptureES31_BoxTransform[ CaptureIndex ],  ReflectionCaptureES31_BoxScales[ CaptureIndex ], CaptureOffsetAndAverageBrightness.xyz, DistanceAlpha);
					}
				

				
					
					
					else
					
					{
						ProjectedCaptureVector = GetLookupVectorForSphereCapture(RayDirection, TranslatedWorldPosition, float4(CaptureTranslatedWorldPosition, CaptureRadius), NormalizedDistanceToCapture, CaptureOffsetAndAverageBrightness.xyz, DistanceAlpha);
					}
				
			



			float CaptureArrayIndex = CaptureProperties.g;

			{
				float4 Sample = MobileBasePass_ReflectionsParameters_ReflectionCubemap.SampleLevel(MobileBasePass_ReflectionsParameters_ReflectionCubemapSampler, float4(ProjectedCaptureVector, CaptureArrayIndex), Mip);

				Sample.rgb *= CaptureProperties.r;
				Sample *= DistanceAlpha;

				
				ImageBasedReflections.rgb += Sample.rgb * ImageBasedReflections.a * IndirectSpecularOcclusion;
				ImageBasedReflections.a *= 1 - Sample.a;

				float AverageBrightness = CaptureOffsetAndAverageBrightness.w;
				CompositedAverageBrightness.x += AverageBrightness * DistanceAlpha * CompositedAverageBrightness.y;
				CompositedAverageBrightness.y *= 1 - DistanceAlpha;
			}
		}
	}

#line 158 "/Engine/Private/ReflectionEnvironmentComposite.ush"


	
	ImageBasedReflections.rgb *= View_PrecomputedIndirectSpecularColorScale;
	CompositedAverageBrightness.x *= Luminance( View_PrecomputedIndirectSpecularColorScale );

#line 191 "/Engine/Private/ReflectionEnvironmentComposite.ush"



	ImageBasedReflections.rgb *= ComputeMixingWeight(IndirectIrradiance, CompositedAverageBrightness.x, Roughness);


	ImageBasedReflections.rgb += ImageBasedReflections.a * ExtraIndirectSpecular;

	return ImageBasedReflections.rgb;
}

float3 CompositeReflectionCapturesAndSkylightTWS(
	float CompositeAlpha, 
	float3 TranslatedWorldPosition, 
	float3 RayDirection, 
	float Roughness, 
	float IndirectIrradiance, 
	float IndirectSpecularOcclusion,
	float3 ExtraIndirectSpecular,
	uint NumCapturesAffectingTile,
	uint CaptureDataStartIndex,
	int SingleCaptureIndex,
	bool bCompositeSkylight)
{
	return CompositeReflectionCapturesAndSkylightTWS(
		CompositeAlpha, 
		TranslatedWorldPosition, 
		RayDirection, 
		Roughness, 
		IndirectIrradiance, 
		IndirectSpecularOcclusion, 
		ExtraIndirectSpecular, 
		NumCapturesAffectingTile, 
		CaptureDataStartIndex,
		SingleCaptureIndex,
		bCompositeSkylight,
		0);
}

float3 CompositeReflectionCapturesAndSkylight(
	float CompositeAlpha, 
	float3 TranslatedWorldPosition, 
	float3 RayDirection, 
	float Roughness, 
	float IndirectIrradiance, 
	float IndirectSpecularOcclusion,
	float3 ExtraIndirectSpecular,
	uint NumCapturesAffectingTile,
	uint CaptureDataStartIndex,
	int SingleCaptureIndex,
	bool bCompositeSkylight)
{
	return CompositeReflectionCapturesAndSkylightTWS(
		CompositeAlpha, 
		TranslatedWorldPosition,
		RayDirection, 
		Roughness, 
		IndirectIrradiance, 
		IndirectSpecularOcclusion, 
		ExtraIndirectSpecular, 
		NumCapturesAffectingTile, 
		CaptureDataStartIndex,
		SingleCaptureIndex,
		bCompositeSkylight,
		0);
}

float3 CompositeReflectionCapturesAndSkylight(
	float CompositeAlpha, 
	float3 TranslatedWorldPosition,
	float3 RayDirection, 
	float Roughness, 
	float IndirectIrradiance, 
	float IndirectSpecularOcclusion,
	float3 ExtraIndirectSpecular,
	uint NumCapturesAffectingTile,
	uint CaptureDataStartIndex,
	int SingleCaptureIndex,
	bool bCompositeSkylight,
	uint EyeIndex)
{
	return CompositeReflectionCapturesAndSkylightTWS(
		CompositeAlpha, 
		TranslatedWorldPosition,
		RayDirection, 
		Roughness, 
		IndirectIrradiance, 
		IndirectSpecularOcclusion, 
		ExtraIndirectSpecular, 
		NumCapturesAffectingTile, 
		CaptureDataStartIndex,
		SingleCaptureIndex,
		bCompositeSkylight,
		EyeIndex);
}
#line  35 "/Engine/Private/MobileLightingCommon.ush"


min16float GetSurfaceShadow(FGBufferData GBuffer, FShadowTerms ShadowTerms)
{
	if (GBuffer.ShadingModelID == 5)
	{
		return 1.0f;
	}
	return ShadowTerms.SurfaceShadow;
}

min16float GetTransmissionShadow(FGBufferData GBuffer, FShadowTerms ShadowTerms)
{
	if (GBuffer.ShadingModelID == GBuffer.ShadingModelID == 9)
	{
		return 1.0f;
	}
	return ShadowTerms.TransmissionShadow;
}

min16float3 SafeGetOutColor(min16float3 OutColor)
{
	
	
	
	
	OutColor = min(OutColor, Max111110BitsFloat3 * 0.5f);
	return OutColor;
}

FLightAccumulator LightAccumulator_Add(FLightAccumulator A, FLightAccumulator B)
{
	FLightAccumulator Sum = (FLightAccumulator)0;
	Sum.TotalLight = A.TotalLight + B.TotalLight;
	Sum.ScatterableLightLuma = A.ScatterableLightLuma + B.ScatterableLightLuma;
	Sum.ScatterableLight = A.ScatterableLight + B.ScatterableLight;
	Sum.EstimatedCost = A.EstimatedCost + B.EstimatedCost;
	Sum.TotalLightDiffuse = A.TotalLightDiffuse + B.TotalLightDiffuse;
	Sum.TotalLightSpecular = A.TotalLightSpecular + B.TotalLightSpecular;
	return Sum;
}





min16float ApplyPrecomputedShadowMask(min16float ShadowMap, min16float Shadow)
{

	return min(ShadowMap, Shadow);



}





bool IsCSMEnabled()
{



	return true;

}

min16float MobileShadowPCF(float2 ShadowUVs, FPCFSamplerSettings Settings)
{





	min16float ShadowMap = Manual3x3PCF(ShadowUVs, Settings);






return ShadowMap;
}












min16float MobileDirectionalLightCSM(float2 ScreenPosition, float SceneDepth, inout float ShadowPositionZ)
{
	min16float ShadowMap = 1;

	ShadowPositionZ = 0;
	FPCFSamplerSettings Settings;
	Settings.ShadowDepthTexture = MobileDirectionalLight_DirectionalLightShadowTexture;
	Settings.ShadowDepthTextureSampler = MobileDirectionalLight_DirectionalLightShadowSampler;
	Settings.TransitionScale = MobileDirectionalLight_DirectionalLightDirectionAndShadowTransition.w;
	Settings.ShadowBufferSize = MobileDirectionalLight_DirectionalLightShadowSize;
	Settings.bSubsurface = false;
	Settings.bTreatMaxDepthUnshadowed = false;
	Settings.DensityMulConstant = 0;
	Settings.ProjectionDepthBiasParameters = 0;

	float4 ShadowPosition = float4(0, 0, 0, 0);
	for (uint i = 0; i < 4u; i++)
	{
		if (SceneDepth < MobileDirectionalLight_DirectionalLightShadowDistances[i])
		{
		



			ShadowPosition = mul(float4(ScreenPosition.x, ScreenPosition.y, SceneDepth, 1), MobileDirectionalLight_DirectionalLightScreenToShadow[i]);
		
			ShadowPositionZ = ShadowPosition.z;
			break; 
		}
	}

	
	if (ShadowPosition.z > 0)
	{
		
		

		
		float ShadowZ = 1.0f - ShadowPosition.z;
		float LightSpacePixelDepthForOpaque = min(ShadowZ, 0.99999f);
		Settings.SceneDepth = LightSpacePixelDepthForOpaque;

		ShadowMap = MobileShadowPCF(ShadowPosition.xy, Settings);

	
		float Fade = saturate(SceneDepth * MobileDirectionalLight_DirectionalLightDistanceFadeMADAndSpecularScale.x + MobileDirectionalLight_DirectionalLightDistanceFadeMADAndSpecularScale.y);
		
		ShadowMap = lerp(ShadowMap, 1.0, Fade * Fade);
	
	}

	return ShadowMap;
}





struct FTranslucencyLightingVector
{
	float4 AmbientLightingVector;
	float3 DirectionalLightingVector;
};

FTranslucencyLightingVector GetTranslucencyLightingVector(FDeferredLightData LightData, float3 TranslatedWorldPosition)
{
	FTranslucencyLightingVector Out;

	float Attenuation = 1.0f;
	float3 L = LightData.Direction;	
	float3 NormalizedLightVector = L;
	if (LightData.bRadialLight)
	{
		Attenuation = GetLocalLightAttenuation(TranslatedWorldPosition, LightData, L, NormalizedLightVector);
	}

	float3 Lighting = LightData.Color / PI * Attenuation;
	FTwoBandSHVectorRGB SHLighting = MulSH(SHBasisFunction(NormalizedLightVector), Lighting);

	Out.AmbientLightingVector = float4(SHLighting.R.V.x, SHLighting.G.V.x, SHLighting.B.V.x, 1.0f);

	float3 LuminanceWeights = float3(.3, .59, .11);
	float3 Coefficient0 = float3(SHLighting.R.V.y, SHLighting.G.V.y, SHLighting.B.V.y);
	float3 Coefficient1 = float3(SHLighting.R.V.z, SHLighting.G.V.z, SHLighting.B.V.z);
	float3 Coefficient2 = float3(SHLighting.R.V.w, SHLighting.G.V.w, SHLighting.B.V.w);
	Out.DirectionalLightingVector = float3(dot(Coefficient0, LuminanceWeights), dot(Coefficient1, LuminanceWeights), dot(Coefficient2, LuminanceWeights));

	return Out;
}

FLightAccumulator GetTranslucencySHLighting(FGBufferData GBuffer, FDeferredLightData LightData, float3 TranslatedWorldPosition)
{
	float4 VolumeLighting;
	float3 InterpolatedLighting = 0;

	FTranslucencyLightingVector LightingVector = GetTranslucencyLightingVector(LightData, TranslatedWorldPosition);







	GetVolumeLightingNonDirectional(LightingVector.AmbientLightingVector, GBuffer.DiffuseColor, InterpolatedLighting, VolumeLighting);



	FLightAccumulator LightAccumulator = (FLightAccumulator)0;
	LightAccumulator_AddSplit(LightAccumulator, InterpolatedLighting, 0.0f, InterpolatedLighting, 1.0f, false);
	return LightAccumulator;
}





FDeferredLightData GetDirectionalLightData(float4 ScreenPosition, float4 SvPosition, inout min16float4 OutDynamicShadowFactors, inout min16float OutDynamicShadowing)
{










	float  ShadowPositionZ = 0;
	min16float ShadowMap = MobileDirectionalLightCSM(ScreenPosition.xy, ScreenPosition.w, ShadowPositionZ);
	OutDynamicShadowing = 1.0f;

   










	FDeferredLightData LightData = (FDeferredLightData)0;
	LightData.Color = MobileDirectionalLight_DirectionalLightColor.rgb;
	LightData.FalloffExponent = 0;
	LightData.Direction = MobileDirectionalLight_DirectionalLightDirectionAndShadowTransition.xyz;
	LightData.bRadialLight = false;
	LightData.SpecularScale = MobileDirectionalLight_DirectionalLightDistanceFadeMADAndSpecularScale.z;
	LightData.ShadowedBits = 1;
	LightData.HairTransmittance = InitHairTransmittanceData();
	LightData.ShadowMapChannelMask = UnpackShadowMapChannelMask(MobileDirectionalLight_DirectionalLightShadowMapChannelMask);

	return LightData;
}

void AccumulateDirectionalLighting(FGBufferData GBuffer, float3 TranslatedWorldPosition, min16float3 CameraVector, float4 ScreenPosition, float4 SvPosition, inout min16float4 DynamicShadowFactors, inout float OutDirectionalLightShadow, inout FLightAccumulator DirectLighting)
{
	min16float DynamicShadowing = 1.0f;
	FDeferredLightData LightData = GetDirectionalLightData(ScreenPosition, SvPosition, DynamicShadowFactors, DynamicShadowing);
	min16float4 LightAttenuation = min16float4(1, 1, DynamicShadowing, DynamicShadowing);




	FLightAccumulator NewLighting = AccumulateDynamicLighting(TranslatedWorldPosition, CameraVector, GBuffer, 1, GBuffer.ShadingModelID, LightData, LightAttenuation, 0, uint2(0, 0), OutDirectionalLightShadow);

	DirectLighting = LightAccumulator_Add(DirectLighting, NewLighting);
}







min16float3 GetMobileSkyLightReflection(min16float3 ReflectionVector, min16float Roughness, min16float CubemapMaxMip)
{
	min16float AbsoluteSpecularMip = ComputeReflectionCaptureMipFromRoughness(Roughness, CubemapMaxMip);
	min16float4 Reflection = MobileReflectionCapture_Texture.SampleLevel(MobileReflectionCapture_TextureSampler, ReflectionVector, AbsoluteSpecularMip);
	return Reflection.rgb * ResolvedView.SkyLightColor.rgb;
}



min16float3 GetImageBasedReflectionLighting_Mobile(
	min16float3 ReflectionVector, 
	float3 TranslatedWorldPosition, 
	min16float Roughness, 
	min16float IndirectIrradiance, 
	min16float CompositeAlpha, 
	uint GridIndex)
{
	min16float3 SpecularIBL = (min16float3)0.0f;

#line 354 "/Engine/Private/MobileLightingCommon.ush"


	min16float UsingSkyReflection = MobileReflectionCapture_Params.y > 0.0f;
	if (UsingSkyReflection)
	{
		
		SpecularIBL = GetMobileSkyLightReflection(ReflectionVector, Roughness, MobileReflectionCapture_Params.y);
	}
	else
	{
		min16float AbsoluteSpecularMip = ComputeReflectionCaptureMipFromRoughness(Roughness, ResolvedView.ReflectionCubemapMaxMip);
		SpecularIBL = MobileReflectionCapture_Texture.SampleLevel(MobileReflectionCapture_TextureSampler, ReflectionVector, AbsoluteSpecularMip).rgb;

		min16float ReflectionCaptureBrightness = MobileReflectionCapture_Params.w;
		SpecularIBL = SpecularIBL * ReflectionCaptureBrightness;
	}

	
	SpecularIBL *= ComputeMixingWeight(IndirectIrradiance, MobileReflectionCapture_Params.x, Roughness);
	

	SpecularIBL *= CompositeAlpha;


	return SpecularIBL;
}


min16float3 GetPlanarReflectionbasedReflectionLighting_Mobile(float3 TranslatedWorldPosition, min16float3 WorldNormal, min16float Roughness, min16float3 InSpecularIBL)
{
	min16float3 Out = InSpecularIBL;









	return Out;
}


float3 GetImageBasedReflectionSpecular(
	  min16float3 SpecularDirection, 
	  min16float Roughness, 
	  float3 TranslatedWorldPosition, 
	  min16float3 WorldNormal, 
	  min16float SpecularOcclusion,
	  min16float IndirectIrradiance, 
	  uint GridIndex)
{
	min16float3 Out = 0;

	
	Out = GetImageBasedReflectionLighting_Mobile(
		SpecularDirection,
		TranslatedWorldPosition,
		Roughness,
		IndirectIrradiance,
		SpecularOcclusion,
		GridIndex);

	
	Out = GetPlanarReflectionbasedReflectionLighting_Mobile(TranslatedWorldPosition, WorldNormal, Roughness, Out);

	return Out;
}


void AccumulateReflection(
	FGBufferData GBuffer, 
	min16float3 CameraVector, 
	float3 TranslatedWorldPosition, 
	min16float3 ReflectionVector, 
	min16float IndirectIrradiance, 
	uint GridIndex, 
	inout FLightAccumulator DirectLighting)
{
	min16float3 SpecularIBLLighting = (min16float3)0.0f;

	min16float3 N = GBuffer.WorldNormal;
	min16float3 V = -CameraVector;
	min16float NoV = saturate(abs(dot(N, V)) + 1e-5);

	min16float3 TopLayerR = ReflectionVector;
	min16float SpecularOcclusion = GBuffer.GBufferAO;
	if (0)
	{
		
		ReflectionVector = GetOffSpecularPeakReflectionDir(N, ReflectionVector, GBuffer.Roughness);

		min16float RoughnessSq = GBuffer.Roughness * GBuffer.Roughness;
		SpecularOcclusion = GetSpecularOcclusion(NoV, RoughnessSq, SpecularOcclusion);
	}

	
	min16float3 SpecularIBL = GetImageBasedReflectionLighting_Mobile(ReflectionVector
		, TranslatedWorldPosition
		, GBuffer.Roughness
		, IndirectIrradiance
		, SpecularOcclusion
		, GridIndex
	);

	
	SpecularIBL = GetPlanarReflectionbasedReflectionLighting_Mobile(TranslatedWorldPosition, GBuffer.WorldNormal, GBuffer.Roughness, SpecularIBL);

	min16float3 DiffuseColor = GBuffer.DiffuseColor;
	min16float3 SpecularColor = GBuffer.SpecularColor;

	if (GBuffer.ShadingModelID == 4)
	{
		const min16float ClearCoat = GBuffer.CustomData.x;
		const min16float ClearCoatRoughness = GBuffer.CustomData.y;

		RemapClearCoatDiffuseAndSpecularColor(GBuffer, NoV, DiffuseColor, SpecularColor);

		min16float F = GetEnvBRDF(0.04, ClearCoatRoughness, NoV).x;
		F *= ClearCoat;
		min16float LayerAttenuation = (1 - F);

		
	


		min16float2 AB = EnvBRDFApproxLazarov(GBuffer.Roughness, NoV);
	
		SpecularIBLLighting += SpecularIBL * LayerAttenuation * (SpecularColor * AB.x + AB.y * saturate(50 * SpecularColor.g) * (1 - ClearCoat));

		
		SpecularIBL = GetImageBasedReflectionLighting_Mobile(TopLayerR
			, TranslatedWorldPosition
			, ClearCoatRoughness
			, IndirectIrradiance
			, F * SpecularOcclusion
			, GridIndex
		);
		SpecularIBLLighting += SpecularIBL;
	}
	else if (GBuffer.ShadingModelID == 7)
	{
		
	}
	else
	{
		SpecularIBLLighting += SpecularIBL * GetEnvBRDF(SpecularColor, GBuffer.Roughness, NoV);
	}
	LightAccumulator_AddSplit(DirectLighting, 0.0f, SpecularIBLLighting, 0.0f, 1.0f, false);
}







#line 585 "/Engine/Private/MobileLightingCommon.ush"
#line 109 "/Engine/Private/MobileBasePassPixelShader.usf"

#line   7 "/Engine/Private/ShadingModelsMaterial.ush"





void SetGBufferForShadingModel(
	in out FGBufferData GBuffer, 
	in out FMaterialPixelParameters MaterialParameters,
	const float Opacity,
	const min16float3 BaseColor,
	const min16float  Metallic,
	const min16float  Specular,
	const float Roughness,
	const float Anisotropy,
	const float3 SubsurfaceColor,
	const float SubsurfaceProfile,
	const float Dither,
	const uint ShadingModel)
{
	GBuffer.WorldNormal = MaterialParameters.WorldNormal;
	GBuffer.WorldTangent = MaterialParameters.WorldTangent;
	GBuffer.BaseColor = BaseColor;
	GBuffer.Metallic = Metallic;
	GBuffer.Specular = Specular;
	GBuffer.Roughness = Roughness;
	GBuffer.Anisotropy = Anisotropy;
	GBuffer.ShadingModelID = ShadingModel;

	
	
	
	if (false)
	{
	}














#line  84 "/Engine/Private/ShadingModelsMaterial.ush"

#line 118 "/Engine/Private/ShadingModelsMaterial.ush"























#line 203 "/Engine/Private/ShadingModelsMaterial.ush"

}
#line 110 "/Engine/Private/MobileBasePassPixelShader.usf"

#line   3 "/Engine/Private/ThinTranslucentCommon.ush"






#line  75 "/Engine/Private/ThinTranslucentCommon.ush"



#line 111 "/Engine/Private/MobileBasePassPixelShader.usf"


























min16float3 FrameBufferBlendOp(min16float4 Source)
{
	min16float4 Dest = min16float4 (0,0,0,0);

#line 153 "/Engine/Private/MobileBasePassPixelShader.usf"

	return (Source.rgb*Source.a) + (Dest.rgb*(1.0 - Source.a));





}

void ApplyPixelDepthOffsetForMobileBasePass(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
    float PixelDepthOffset = ApplyPixelDepthOffsetToMaterialParameters(MaterialParameters, PixelMaterialInputs, OutDepth);
}





	


void GetSkyLighting(min16float3 SkyLightColor, min16float3 WorldNormal, bool bEvaluateBackface, inout min16float IndirectIrradiance, out min16float3 OutSkyDiffuseLighting, out min16float3 OutSkySubsurfaceLighting, out min16float3 OutWaterDiffuseIndirectLuminance)
{
	OutSkyDiffuseLighting = 0;
	OutSkySubsurfaceLighting = 0;
	OutWaterDiffuseIndirectLuminance = 0;

#line 197 "/Engine/Private/MobileBasePassPixelShader.usf"

}

void GetPrecomputedIndirectLightingAndSkyLight(float LightmapVTPageTableResult, FVertexFactoryInterpolantsVSToPS Interpolants, bool bEvaluateBackface, min16float3 DiffuseDir, min16float3 SkyLightColor, out min16float3 OutDiffuseIndirectLighting, out min16float3 OutSubsurfaceIndirectLighting, out min16float OutIndirectIrradiance, out min16float3 OutWaterDiffuseIndirectLuminance)
{
	
	OutIndirectIrradiance = 0;
	OutDiffuseIndirectLighting = 0;
	OutSubsurfaceIndirectLighting = 0;

	
#line 257 "/Engine/Private/MobileBasePassPixelShader.usf"


	min16float3 SkyDiffuseLighting;
	min16float3 SkySubsurfaceLighting;
	GetSkyLighting(SkyLightColor, DiffuseDir, bEvaluateBackface, OutIndirectIrradiance, SkyDiffuseLighting, SkySubsurfaceLighting, OutWaterDiffuseIndirectLuminance);

	OutDiffuseIndirectLighting += SkyDiffuseLighting;
	OutSubsurfaceIndirectLighting += SkySubsurfaceLighting;
}

 
void Main( 
	FVertexFactoryInterpolantsVSToPS Interpolants
	, FSharedMobileBasePassInterpolants BasePassInterpolants
	, in float4 SvPosition : SV_Position
	, in bool bIsFrontFace : SV_IsFrontFace
#line 285 "/Engine/Private/MobileBasePassPixelShader.usf"

	



	, out min16float4 OutColor : SV_Target0
	







	)
{  












	ResolvedView = ResolveView();











	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;
	{
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
		float3 WorldPosition = BasePassInterpolants.PixelPosition.xyz;
		float3 WorldPositionExcludingWPO = BasePassInterpolants.PixelPosition.xyz;
		


		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, WorldPosition, WorldPositionExcludingWPO);






	}




	  

	
	GetMaterialCoverageAndClipping(MaterialParameters, PixelMaterialInputs);


	min16float MaterialAO = GetMaterialAmbientOcclusion(PixelMaterialInputs);







	min16float Opacity = GetMaterialOpacity(PixelMaterialInputs);
	

	
	min16float3 BaseColor = GetMaterialBaseColor(PixelMaterialInputs);
	min16float Metallic = GetMaterialMetallic(PixelMaterialInputs);
	min16float Specular = GetMaterialSpecular(PixelMaterialInputs);
	
	
	
	
	
	
	
	min16float Roughness = max(0.015625f, GetMaterialRoughness(PixelMaterialInputs));
	min16float Anisotropy = GetMaterialAnisotropy(PixelMaterialInputs);
	uint ShadingModelID = GetMaterialShadingModel(PixelMaterialInputs);
	
	
	float3 SubsurfaceColor = 0;
	
	float SubsurfaceProfile = 0;

	
#line 399 "/Engine/Private/MobileBasePassPixelShader.usf"




#line 415 "/Engine/Private/MobileBasePassPixelShader.usf"


#line 435 "/Engine/Private/MobileBasePassPixelShader.usf"



	const min16float BaseMaterialCoverageOverWater = Opacity;
	const min16float WaterVisibility = 1.0 - BaseMaterialCoverageOverWater;
	
	
	min16float3 WaterDiffuseIndirectLuminance = 0;

	FGBufferData GBuffer = (FGBufferData)0;
	GBuffer.GBufferAO = MaterialAO;
	GBuffer.Depth = MaterialParameters.ScreenPosition.w;

	SetGBufferForShadingModel(
		GBuffer,
		MaterialParameters,
		Opacity,
		BaseColor,
		Metallic,
		Specular,
		Roughness,
		Anisotropy,
		SubsurfaceColor,
		SubsurfaceProfile,
		0.0f,
		ShadingModelID
	);

	GBuffer.StoredBaseColor = GBuffer.BaseColor;
	GBuffer.StoredMetallic = GBuffer.Metallic;
	GBuffer.StoredSpecular = GBuffer.Specular;












	GBuffer.DiffuseColor = GBuffer.BaseColor;
	GBuffer.SpecularColor = 0.04;

















#line 513 "/Engine/Private/MobileBasePassPixelShader.usf"


	min16float3 InputBentNormal = MaterialParameters.WorldNormal;

	
	







	const FShadingOcclusion ShadingOcclusion = ApplyBentNormal(MaterialParameters.CameraVector, InputBentNormal, GetWorldBentNormalZero(MaterialParameters), GBuffer.Roughness, GBuffer.GBufferAO);







	float LightmapVTPageTableResult = (float)0.0f;















#line 726 "/Engine/Private/MobileBasePassPixelShader.usf"


	min16float IndirectIrradiance = 0;
	min16float3 DiffuseIndirectLighting = 0;
	min16float3 SubsurfaceIndirectLighting = 0;

	min16float3 DiffuseColorForIndirect = GBuffer.DiffuseColor;
	min16float3 DiffuseDir = ShadingOcclusion.BentNormal;


























	min16float NoL = max(0, dot(GBuffer.WorldNormal, MobileDirectionalLight_DirectionalLightDirectionAndShadowTransition.xyz));

	const bool bEvaluateBackface = GetShadingModelRequiresBackfaceLighting(GBuffer.ShadingModelID);

	GetPrecomputedIndirectLightingAndSkyLight(LightmapVTPageTableResult, Interpolants, bEvaluateBackface, DiffuseDir, ResolvedView.SkyLightColor.rgb, DiffuseIndirectLighting, SubsurfaceIndirectLighting, IndirectIrradiance, WaterDiffuseIndirectLuminance);

	
	IndirectIrradiance *= GBuffer.GBufferAO;

	min16float3 DiffuseColor = (DiffuseIndirectLighting * DiffuseColorForIndirect + SubsurfaceIndirectLighting * SubsurfaceColor) * AOMultiBounce(GBuffer.BaseColor, ShadingOcclusion.DiffOcclusion);









	FLightAccumulator DirectLighting = (FLightAccumulator)0;
	LightAccumulator_AddSplit(DirectLighting, DiffuseColor, 0.0f, DiffuseColor, 1.0f, false);

	GBuffer.PrecomputedShadowFactors = GetPrimaryPrecomputedShadowMask(LightmapVTPageTableResult, Interpolants, MaterialParameters);






	min16float3 CameraVector = -MaterialParameters.CameraVector;

	min16float4 DynamicShadowFactors = 1.0f;
	float DirectionalLightShadow = 1.0f;

	




	float2 LocalPosition = SvPosition.xy - ResolvedView.ViewRectMin.xy;
	uint GridIndex = ComputeLightGridCellIndex(uint2(LocalPosition.x, LocalPosition.y), SvPosition.w);












	
#line 834 "/Engine/Private/MobileBasePassPixelShader.usf"


#line 862 "/Engine/Private/MobileBasePassPixelShader.usf"












	min16float3 Color = 0.0f;


	min16float4 VertexFog = min16float4(0, 0, 0, 1);





	VertexFog = BasePassInterpolants.VertexFog;


	
				 
	min16float3 Emissive = GetMaterialEmissive(PixelMaterialInputs);

	Color += Emissive;





#line 915 "/Engine/Private/MobileBasePassPixelShader.usf"

	
	
	
#line 939 "/Engine/Private/MobileBasePassPixelShader.usf"

		OutColor = min16float4(Color * VertexFog.a + VertexFog.rgb, Opacity);
	
#line 957 "/Engine/Private/MobileBasePassPixelShader.usf"








	OutColor.rgb *= ResolvedView.PreExposure;
















	
		OutColor.rgb = sqrt(OutColor.rgb);
	
















}


#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 387453108
Strata, 158337041
DrawRectangleParameters, 3145984
InstancedView, 446694145
SceneTexturesStruct, 158928480
MobileReflectionCapture, 2425088
InstanceVF, 104204038
SingleLayerWater, 1641252
PrimitiveDither, 1048832
PrimitiveFade, 1048832
DeferredDecal, 2097668
MobileSceneTextures, 11010716
Primitive, 48234752
InstanceCulling, 3146265
SpeedTreeData, 39846144
Atmosphere, 11534592
OpaqueBasePass, 411569516
BasePass, 165483073
MobileBasePass, 416289728
TranslucentBasePass, 205849421
LightmapResourceCluster, 226692878
PrecomputedLightingBuffer, 15728896
IndirectLightingCache, 69011717
MobileDirectionalLight, 24445232
PlanarReflectionStruct, 22348032
ForwardLightData, 180884436
ReflectionStruct, 206569728
ReflectionCaptureES31, 943719169
ReflectionCaptureSM5, -1076886783
VirtualShadowMap, 277877352
DeferredLightUniforms, 10486016
LocalVFLooseParameters, 2490654
LocalVF, 105252632
Material, 88934664
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_AtmosphereTransmittanceTexture, View, 5, 25
View_AtmosphereTransmittanceTextureSampler, View, 8, 26
View_AtmosphereIrradianceTexture, View, 5, 27
View_AtmosphereIrradianceTextureSampler, View, 8, 28
View_AtmosphereInscatterTexture, View, 5, 29
View_AtmosphereInscatterTextureSampler, View, 8, 30
View_PerlinNoiseGradientTexture, View, 5, 31
View_PerlinNoiseGradientTextureSampler, View, 8, 32
View_PerlinNoise3DTexture, View, 5, 33
View_PerlinNoise3DTextureSampler, View, 8, 34
View_SobolSamplingTexture, View, 5, 35
View_SharedPointWrappedSampler, View, 8, 36
View_SharedPointClampedSampler, View, 8, 37
View_SharedBilinearWrappedSampler, View, 8, 38
View_SharedBilinearClampedSampler, View, 8, 39
View_SharedBilinearAnisoClampedSampler, View, 8, 40
View_SharedTrilinearWrappedSampler, View, 8, 41
View_SharedTrilinearClampedSampler, View, 8, 42
View_PreIntegratedBRDF, View, 5, 43
View_PreIntegratedBRDFSampler, View, 8, 44
View_PrimitiveSceneData, View, 6, 45
View_InstanceSceneData, View, 6, 46
View_InstancePayloadData, View, 6, 47
View_LightmapSceneData, View, 6, 48
View_SkyIrradianceEnvironmentMap, View, 6, 49
View_TransmittanceLutTexture, View, 5, 50
View_TransmittanceLutTextureSampler, View, 8, 51
View_SkyViewLutTexture, View, 5, 52
View_SkyViewLutTextureSampler, View, 8, 53
View_DistantSkyLightLutTexture, View, 5, 54
View_DistantSkyLightLutTextureSampler, View, 8, 55
View_CameraAerialPerspectiveVolume, View, 5, 56
View_CameraAerialPerspectiveVolumeSampler, View, 8, 57
View_CameraAerialPerspectiveVolumeMieOnly, View, 5, 58
View_CameraAerialPerspectiveVolumeMieOnlySampler, View, 8, 59
View_CameraAerialPerspectiveVolumeRayOnly, View, 5, 60
View_CameraAerialPerspectiveVolumeRayOnlySampler, View, 8, 61
View_HairScatteringLUTTexture, View, 5, 62
View_HairScatteringLUTSampler, View, 8, 63
View_LTCMatTexture, View, 5, 64
View_LTCMatSampler, View, 8, 65
View_LTCAmpTexture, View, 5, 66
View_LTCAmpSampler, View, 8, 67
View_ShadingEnergyGGXSpecTexture, View, 5, 68
View_ShadingEnergyGGXGlassTexture, View, 5, 69
View_ShadingEnergyClothSpecTexture, View, 5, 70
View_ShadingEnergyDiffuseTexture, View, 5, 71
View_ShadingEnergySampler, View, 8, 72
View_SSProfilesTexture, View, 5, 73
View_SSProfilesSampler, View, 8, 74
View_SSProfilesTransmissionSampler, View, 8, 75
View_SSProfilesPreIntegratedTexture, View, 5, 76
View_SSProfilesPreIntegratedSampler, View, 8, 77
View_WaterIndirection, View, 6, 78
View_WaterData, View, 6, 79
View_RectLightAtlasTexture, View, 5, 80
View_RectLightAtlasSampler, View, 8, 81
View_IESAtlasTexture, View, 5, 82
View_IESAtlasSampler, View, 8, 83
View_LandscapeWeightmapSampler, View, 8, 84
View_LandscapeIndirection, View, 6, 85
View_LandscapePerComponentData, View, 6, 86
View_VTFeedbackBuffer, View, 7, 87
View_EditorVisualizeLevelInstanceIds, View, 6, 88
View_EditorSelectedHitProxyIds, View, 6, 89
View_PhysicsFieldClipmapBuffer, View, 6, 90
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_OpaqueRoughRefractionTexture, Strata, 9, 2
Strata_BSDFOffsetTexture, Strata, 9, 3
Strata_BSDFTileTexture, Strata, 9, 4
Strata_BSDFTileCountBuffer, Strata, 16, 5
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 11
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 12
MobileReflectionCapture_Texture, MobileReflectionCapture, 5, 0
MobileReflectionCapture_TextureSampler, MobileReflectionCapture, 8, 1
InstanceVF_VertexFetch_InstanceOriginBuffer, InstanceVF, 6, 0
InstanceVF_VertexFetch_InstanceTransformBuffer, InstanceVF, 6, 1
InstanceVF_VertexFetch_InstanceLightmapBuffer, InstanceVF, 6, 2
InstanceVF_InstanceCustomDataBuffer, InstanceVF, 6, 3
SingleLayerWater_SceneColorWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 0
SingleLayerWater_SceneColorWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 1
SingleLayerWater_SceneDepthWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 2
SingleLayerWater_SceneDepthWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 3
SingleLayerWater_CustomDepthTexture, SingleLayerWater, 9, 4
SingleLayerWater_CustomStencilTexture, SingleLayerWater, 12, 5
SingleLayerWater_CustomDepthSampler, SingleLayerWater, 8, 6
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTexture, SingleLayerWater, 9, 7
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapSampler, SingleLayerWater, 8, 8
SingleLayerWater_BlueNoise_ScalarTexture, SingleLayerWater, 5, 9
SingleLayerWater_BlueNoise_Vec2Texture, SingleLayerWater, 5, 10
DeferredDecal_PreviousFrameNormal, DeferredDecal, 5, 0
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomStencilTexture, MobileSceneTextures, 12, 6
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 7
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 8
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 9
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 10
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 14
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 15
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 16
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 17
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 18
InstanceCulling_InstanceIdsBuffer, InstanceCulling, 16, 0
InstanceCulling_PageInfoBuffer, InstanceCulling, 16, 1
OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 0
OpaqueBasePass_Shared_Forward_ShadowmapSampler, OpaqueBasePass, 8, 1
OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 2
OpaqueBasePass_Shared_Forward_StaticShadowmapSampler, OpaqueBasePass, 8, 3
OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer, OpaqueBasePass, 16, 4
OpaqueBasePass_Shared_Forward_NumCulledLightsGrid, OpaqueBasePass, 16, 5
OpaqueBasePass_Shared_Forward_CulledLightDataGrid, OpaqueBasePass, 16, 6
OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 7
OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler, OpaqueBasePass, 8, 8
OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 9
OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler, OpaqueBasePass, 8, 10
OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, OpaqueBasePass, 16, 11
OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid, OpaqueBasePass, 16, 12
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid, OpaqueBasePass, 16, 13
OpaqueBasePass_Shared_Reflection_SkyLightCubemap, OpaqueBasePass, 9, 14
OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler, OpaqueBasePass, 8, 15
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, OpaqueBasePass, 5, 16
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, OpaqueBasePass, 8, 17
OpaqueBasePass_Shared_Reflection_ReflectionCubemap, OpaqueBasePass, 5, 18
OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler, OpaqueBasePass, 8, 19
OpaqueBasePass_Shared_Reflection_PreIntegratedGF, OpaqueBasePass, 5, 20
OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler, OpaqueBasePass, 8, 21
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture, OpaqueBasePass, 5, 22
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler, OpaqueBasePass, 8, 23
OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap, OpaqueBasePass, 5, 24
OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler, OpaqueBasePass, 8, 25
OpaqueBasePass_Shared_Fog_IntegratedLightScattering, OpaqueBasePass, 9, 26
OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 27
OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap, OpaqueBasePass, 5, 28
OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler, OpaqueBasePass, 8, 29
OpaqueBasePass_Shared_FogISR_IntegratedLightScattering, OpaqueBasePass, 9, 30
OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 31
OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs, OpaqueBasePass, 13, 32
OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV, OpaqueBasePass, 13, 33
OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture, OpaqueBasePass, 9, 34
OpaqueBasePass_IndirectOcclusionTexture, OpaqueBasePass, 9, 35
OpaqueBasePass_ResolvedSceneDepthTexture, OpaqueBasePass, 9, 36
OpaqueBasePass_DBufferATexture, OpaqueBasePass, 9, 37
OpaqueBasePass_DBufferBTexture, OpaqueBasePass, 9, 38
OpaqueBasePass_DBufferCTexture, OpaqueBasePass, 9, 39
OpaqueBasePass_DBufferRenderMask, OpaqueBasePass, 9, 40
OpaqueBasePass_DBufferATextureSampler, OpaqueBasePass, 8, 41
OpaqueBasePass_DBufferBTextureSampler, OpaqueBasePass, 8, 42
OpaqueBasePass_DBufferCTextureSampler, OpaqueBasePass, 8, 43
OpaqueBasePass_PreIntegratedGFTexture, OpaqueBasePass, 5, 44
OpaqueBasePass_PreIntegratedGFSampler, OpaqueBasePass, 8, 45
OpaqueBasePass_EyeAdaptationBuffer, OpaqueBasePass, 16, 46
BasePass_Forward_DirectionalLightShadowmapAtlas, BasePass, 9, 0
BasePass_Forward_ShadowmapSampler, BasePass, 8, 1
BasePass_Forward_DirectionalLightStaticShadowmap, BasePass, 5, 2
BasePass_Forward_StaticShadowmapSampler, BasePass, 8, 3
BasePass_Forward_ForwardLocalLightBuffer, BasePass, 16, 4
BasePass_Forward_NumCulledLightsGrid, BasePass, 16, 5
BasePass_Forward_CulledLightDataGrid, BasePass, 16, 6
BasePass_ForwardISR_DirectionalLightShadowmapAtlas, BasePass, 9, 7
BasePass_ForwardISR_ShadowmapSampler, BasePass, 8, 8
BasePass_ForwardISR_DirectionalLightStaticShadowmap, BasePass, 5, 9
BasePass_ForwardISR_StaticShadowmapSampler, BasePass, 8, 10
BasePass_ForwardISR_ForwardLocalLightBuffer, BasePass, 16, 11
BasePass_ForwardISR_NumCulledLightsGrid, BasePass, 16, 12
BasePass_ForwardISR_CulledLightDataGrid, BasePass, 16, 13
BasePass_Reflection_SkyLightCubemap, BasePass, 9, 14
BasePass_Reflection_SkyLightCubemapSampler, BasePass, 8, 15
BasePass_Reflection_SkyLightBlendDestinationCubemap, BasePass, 5, 16
BasePass_Reflection_SkyLightBlendDestinationCubemapSampler, BasePass, 8, 17
BasePass_Reflection_ReflectionCubemap, BasePass, 5, 18
BasePass_Reflection_ReflectionCubemapSampler, BasePass, 8, 19
BasePass_Reflection_PreIntegratedGF, BasePass, 5, 20
BasePass_Reflection_PreIntegratedGFSampler, BasePass, 8, 21
BasePass_PlanarReflection_PlanarReflectionTexture, BasePass, 5, 22
BasePass_PlanarReflection_PlanarReflectionSampler, BasePass, 8, 23
BasePass_Fog_FogInscatteringColorCubemap, BasePass, 5, 24
BasePass_Fog_FogInscatteringColorSampler, BasePass, 8, 25
BasePass_Fog_IntegratedLightScattering, BasePass, 9, 26
BasePass_Fog_IntegratedLightScatteringSampler, BasePass, 8, 27
BasePass_FogISR_FogInscatteringColorCubemap, BasePass, 5, 28
BasePass_FogISR_FogInscatteringColorSampler, BasePass, 8, 29
BasePass_FogISR_IntegratedLightScattering, BasePass, 9, 30
BasePass_FogISR_IntegratedLightScatteringSampler, BasePass, 8, 31
MobileBasePass_Fog_FogInscatteringColorCubemap, MobileBasePass, 5, 0
MobileBasePass_Fog_FogInscatteringColorSampler, MobileBasePass, 8, 1
MobileBasePass_Fog_IntegratedLightScattering, MobileBasePass, 9, 2
MobileBasePass_Fog_IntegratedLightScatteringSampler, MobileBasePass, 8, 3
MobileBasePass_Forward_DirectionalLightShadowmapAtlas, MobileBasePass, 9, 4
MobileBasePass_Forward_ShadowmapSampler, MobileBasePass, 8, 5
MobileBasePass_Forward_DirectionalLightStaticShadowmap, MobileBasePass, 5, 6
MobileBasePass_Forward_StaticShadowmapSampler, MobileBasePass, 8, 7
MobileBasePass_Forward_ForwardLocalLightBuffer, MobileBasePass, 16, 8
MobileBasePass_Forward_NumCulledLightsGrid, MobileBasePass, 16, 9
MobileBasePass_Forward_CulledLightDataGrid, MobileBasePass, 16, 10
MobileBasePass_ForwardMMV_DirectionalLightShadowmapAtlas, MobileBasePass, 9, 11
MobileBasePass_ForwardMMV_ShadowmapSampler, MobileBasePass, 8, 12
MobileBasePass_ForwardMMV_DirectionalLightStaticShadowmap, MobileBasePass, 5, 13
MobileBasePass_ForwardMMV_StaticShadowmapSampler, MobileBasePass, 8, 14
MobileBasePass_ForwardMMV_ForwardLocalLightBuffer, MobileBasePass, 16, 15
MobileBasePass_ForwardMMV_NumCulledLightsGrid, MobileBasePass, 16, 16
MobileBasePass_ForwardMMV_CulledLightDataGrid, MobileBasePass, 16, 17
MobileBasePass_PlanarReflection_PlanarReflectionTexture, MobileBasePass, 5, 18
MobileBasePass_PlanarReflection_PlanarReflectionSampler, MobileBasePass, 8, 19
MobileBasePass_SceneTextures_SceneColorTexture, MobileBasePass, 9, 20
MobileBasePass_SceneTextures_SceneColorTextureSampler, MobileBasePass, 8, 21
MobileBasePass_SceneTextures_SceneDepthTexture, MobileBasePass, 9, 22
MobileBasePass_SceneTextures_SceneDepthTextureSampler, MobileBasePass, 8, 23
MobileBasePass_SceneTextures_CustomDepthTexture, MobileBasePass, 9, 24
MobileBasePass_SceneTextures_CustomDepthTextureSampler, MobileBasePass, 8, 25
MobileBasePass_SceneTextures_CustomStencilTexture, MobileBasePass, 12, 26
MobileBasePass_SceneTextures_SceneVelocityTexture, MobileBasePass, 9, 27
MobileBasePass_SceneTextures_SceneVelocityTextureSampler, MobileBasePass, 8, 28
MobileBasePass_SceneTextures_GBufferATexture, MobileBasePass, 9, 29
MobileBasePass_SceneTextures_GBufferBTexture, MobileBasePass, 9, 30
MobileBasePass_SceneTextures_GBufferCTexture, MobileBasePass, 9, 31
MobileBasePass_SceneTextures_GBufferDTexture, MobileBasePass, 9, 32
MobileBasePass_SceneTextures_SceneDepthAuxTexture, MobileBasePass, 9, 33
MobileBasePass_SceneTextures_GBufferATextureSampler, MobileBasePass, 8, 34
MobileBasePass_SceneTextures_GBufferBTextureSampler, MobileBasePass, 8, 35
MobileBasePass_SceneTextures_GBufferCTextureSampler, MobileBasePass, 8, 36
MobileBasePass_SceneTextures_GBufferDTextureSampler, MobileBasePass, 8, 37
MobileBasePass_SceneTextures_SceneDepthAuxTextureSampler, MobileBasePass, 8, 38
MobileBasePass_ReflectionsParameters_SkyLightCubemap, MobileBasePass, 9, 39
MobileBasePass_ReflectionsParameters_SkyLightCubemapSampler, MobileBasePass, 8, 40
MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemap, MobileBasePass, 5, 41
MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemapSampler, MobileBasePass, 8, 42
MobileBasePass_ReflectionsParameters_ReflectionCubemap, MobileBasePass, 5, 43
MobileBasePass_ReflectionsParameters_ReflectionCubemapSampler, MobileBasePass, 8, 44
MobileBasePass_ReflectionsParameters_PreIntegratedGF, MobileBasePass, 5, 45
MobileBasePass_ReflectionsParameters_PreIntegratedGFSampler, MobileBasePass, 8, 46
MobileBasePass_PreIntegratedGFTexture, MobileBasePass, 5, 47
MobileBasePass_PreIntegratedGFSampler, MobileBasePass, 8, 48
MobileBasePass_EyeAdaptationBuffer, MobileBasePass, 16, 49
MobileBasePass_RWOcclusionBufferUAV, MobileBasePass, 17, 50
MobileBasePass_AmbientOcclusionTexture, MobileBasePass, 9, 51
MobileBasePass_AmbientOcclusionSampler, MobileBasePass, 8, 52
MobileBasePass_ScreenSpaceShadowMaskTexture, MobileBasePass, 9, 53
MobileBasePass_ScreenSpaceShadowMaskSampler, MobileBasePass, 8, 54
TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 0
TranslucentBasePass_Shared_Forward_ShadowmapSampler, TranslucentBasePass, 8, 1
TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 2
TranslucentBasePass_Shared_Forward_StaticShadowmapSampler, TranslucentBasePass, 8, 3
TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer, TranslucentBasePass, 16, 4
TranslucentBasePass_Shared_Forward_NumCulledLightsGrid, TranslucentBasePass, 16, 5
TranslucentBasePass_Shared_Forward_CulledLightDataGrid, TranslucentBasePass, 16, 6
TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 7
TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler, TranslucentBasePass, 8, 8
TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 9
TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler, TranslucentBasePass, 8, 10
TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, TranslucentBasePass, 16, 11
TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid, TranslucentBasePass, 16, 12
TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid, TranslucentBasePass, 16, 13
TranslucentBasePass_Shared_Reflection_SkyLightCubemap, TranslucentBasePass, 9, 14
TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler, TranslucentBasePass, 8, 15
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, TranslucentBasePass, 5, 16
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, TranslucentBasePass, 8, 17
TranslucentBasePass_Shared_Reflection_ReflectionCubemap, TranslucentBasePass, 5, 18
TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler, TranslucentBasePass, 8, 19
TranslucentBasePass_Shared_Reflection_PreIntegratedGF, TranslucentBasePass, 5, 20
TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler, TranslucentBasePass, 8, 21
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture, TranslucentBasePass, 5, 22
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler, TranslucentBasePass, 8, 23
TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap, TranslucentBasePass, 5, 24
TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler, TranslucentBasePass, 8, 25
TranslucentBasePass_Shared_Fog_IntegratedLightScattering, TranslucentBasePass, 9, 26
TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 27
TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap, TranslucentBasePass, 5, 28
TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler, TranslucentBasePass, 8, 29
TranslucentBasePass_Shared_FogISR_IntegratedLightScattering, TranslucentBasePass, 9, 30
TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 31
TranslucentBasePass_SceneTextures_SceneColorTexture, TranslucentBasePass, 9, 32
TranslucentBasePass_SceneTextures_SceneDepthTexture, TranslucentBasePass, 9, 33
TranslucentBasePass_SceneTextures_GBufferATexture, TranslucentBasePass, 9, 34
TranslucentBasePass_SceneTextures_GBufferBTexture, TranslucentBasePass, 9, 35
TranslucentBasePass_SceneTextures_GBufferCTexture, TranslucentBasePass, 9, 36
TranslucentBasePass_SceneTextures_GBufferDTexture, TranslucentBasePass, 9, 37
TranslucentBasePass_SceneTextures_GBufferETexture, TranslucentBasePass, 9, 38
TranslucentBasePass_SceneTextures_GBufferFTexture, TranslucentBasePass, 9, 39
TranslucentBasePass_SceneTextures_GBufferVelocityTexture, TranslucentBasePass, 9, 40
TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture, TranslucentBasePass, 9, 41
TranslucentBasePass_SceneTextures_CustomDepthTexture, TranslucentBasePass, 9, 42
TranslucentBasePass_SceneTextures_CustomStencilTexture, TranslucentBasePass, 12, 43
TranslucentBasePass_SceneTextures_PointClampSampler, TranslucentBasePass, 8, 44
TranslucentBasePass_Strata_MaterialTextureArray, TranslucentBasePass, 9, 45
TranslucentBasePass_Strata_TopLayerTexture, TranslucentBasePass, 9, 46
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture, TranslucentBasePass, 9, 47
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler, TranslucentBasePass, 8, 48
TranslucentBasePass_OIT_OutOITSampleCount, TranslucentBasePass, 13, 49
TranslucentBasePass_OIT_OutOITSampleColor, TranslucentBasePass, 13, 50
TranslucentBasePass_OIT_OutOITSampleTrans, TranslucentBasePass, 13, 51
TranslucentBasePass_OIT_OutOITSampleDepth, TranslucentBasePass, 13, 52
TranslucentBasePass_HZBTexture, TranslucentBasePass, 9, 53
TranslucentBasePass_HZBSampler, TranslucentBasePass, 8, 54
TranslucentBasePass_PrevSceneColor, TranslucentBasePass, 9, 55
TranslucentBasePass_PrevSceneColorSampler, TranslucentBasePass, 8, 56
TranslucentBasePass_VolumetricCloudColor, TranslucentBasePass, 9, 57
TranslucentBasePass_VolumetricCloudColorSampler, TranslucentBasePass, 8, 58
TranslucentBasePass_VolumetricCloudDepth, TranslucentBasePass, 9, 59
TranslucentBasePass_VolumetricCloudDepthSampler, TranslucentBasePass, 8, 60
TranslucentBasePass_TranslucencyLightingVolumeAmbientInner, TranslucentBasePass, 9, 61
TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter, TranslucentBasePass, 9, 62
TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner, TranslucentBasePass, 9, 63
TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter, TranslucentBasePass, 9, 64
TranslucentBasePass_RadianceProbeIndirectionTexture, TranslucentBasePass, 9, 65
TranslucentBasePass_RadianceCacheFinalRadianceAtlas, TranslucentBasePass, 9, 66
TranslucentBasePass_RadianceCacheFinalIrradianceAtlas, TranslucentBasePass, 9, 67
TranslucentBasePass_RadianceCacheProbeOcclusionAtlas, TranslucentBasePass, 9, 68
TranslucentBasePass_RadianceCacheDepthAtlas, TranslucentBasePass, 9, 69
TranslucentBasePass_ProbeWorldOffset, TranslucentBasePass, 16, 70
TranslucentBasePass_Radiance, TranslucentBasePass, 9, 71
TranslucentBasePass_Normal, TranslucentBasePass, 9, 72
TranslucentBasePass_SceneDepth, TranslucentBasePass, 9, 73
TranslucentBasePass_TranslucencyGIVolume0, TranslucentBasePass, 9, 74
TranslucentBasePass_TranslucencyGIVolume1, TranslucentBasePass, 9, 75
TranslucentBasePass_TranslucencyGIVolumeHistory0, TranslucentBasePass, 9, 76
TranslucentBasePass_TranslucencyGIVolumeHistory1, TranslucentBasePass, 9, 77
TranslucentBasePass_TranslucencyGIVolumeSampler, TranslucentBasePass, 8, 78
TranslucentBasePass_PreIntegratedGFTexture, TranslucentBasePass, 5, 79
TranslucentBasePass_PreIntegratedGFSampler, TranslucentBasePass, 8, 80
TranslucentBasePass_EyeAdaptationBuffer, TranslucentBasePass, 16, 81
TranslucentBasePass_SceneColorCopyTexture, TranslucentBasePass, 9, 82
TranslucentBasePass_SceneColorCopySampler, TranslucentBasePass, 8, 83
TranslucentBasePass_BlueNoise_ScalarTexture, TranslucentBasePass, 5, 84
TranslucentBasePass_BlueNoise_Vec2Texture, TranslucentBasePass, 5, 85
LightmapResourceCluster_LightMapTexture, LightmapResourceCluster, 5, 0
LightmapResourceCluster_SkyOcclusionTexture, LightmapResourceCluster, 5, 1
LightmapResourceCluster_AOMaterialMaskTexture, LightmapResourceCluster, 5, 2
LightmapResourceCluster_StaticShadowTexture, LightmapResourceCluster, 5, 3
LightmapResourceCluster_VTLightMapTexture, LightmapResourceCluster, 6, 4
LightmapResourceCluster_VTLightMapTexture_1, LightmapResourceCluster, 6, 5
LightmapResourceCluster_VTSkyOcclusionTexture, LightmapResourceCluster, 6, 6
LightmapResourceCluster_VTAOMaterialMaskTexture, LightmapResourceCluster, 6, 7
LightmapResourceCluster_VTStaticShadowTexture, LightmapResourceCluster, 6, 8
LightmapResourceCluster_LightMapSampler, LightmapResourceCluster, 8, 9
LightmapResourceCluster_LightMapSampler_1, LightmapResourceCluster, 8, 10
LightmapResourceCluster_SkyOcclusionSampler, LightmapResourceCluster, 8, 11
LightmapResourceCluster_AOMaterialMaskSampler, LightmapResourceCluster, 8, 12
LightmapResourceCluster_StaticShadowTextureSampler, LightmapResourceCluster, 8, 13
LightmapResourceCluster_LightmapVirtualTexturePageTable0, LightmapResourceCluster, 5, 14
LightmapResourceCluster_LightmapVirtualTexturePageTable1, LightmapResourceCluster, 5, 15
IndirectLightingCache_IndirectLightingCacheTexture0, IndirectLightingCache, 5, 0
IndirectLightingCache_IndirectLightingCacheTexture1, IndirectLightingCache, 5, 1
IndirectLightingCache_IndirectLightingCacheTexture2, IndirectLightingCache, 5, 2
IndirectLightingCache_IndirectLightingCacheTextureSampler0, IndirectLightingCache, 8, 3
IndirectLightingCache_IndirectLightingCacheTextureSampler1, IndirectLightingCache, 8, 4
IndirectLightingCache_IndirectLightingCacheTextureSampler2, IndirectLightingCache, 8, 5
MobileDirectionalLight_DirectionalLightShadowTexture, MobileDirectionalLight, 5, 0
MobileDirectionalLight_DirectionalLightShadowSampler, MobileDirectionalLight, 8, 1
PlanarReflectionStruct_PlanarReflectionTexture, PlanarReflectionStruct, 5, 0
PlanarReflectionStruct_PlanarReflectionSampler, PlanarReflectionStruct, 8, 1
ForwardLightData_DirectionalLightShadowmapAtlas, ForwardLightData, 9, 0
ForwardLightData_ShadowmapSampler, ForwardLightData, 8, 1
ForwardLightData_DirectionalLightStaticShadowmap, ForwardLightData, 5, 2
ForwardLightData_StaticShadowmapSampler, ForwardLightData, 8, 3
ForwardLightData_ForwardLocalLightBuffer, ForwardLightData, 16, 4
ForwardLightData_NumCulledLightsGrid, ForwardLightData, 16, 5
ForwardLightData_CulledLightDataGrid, ForwardLightData, 16, 6
ReflectionStruct_SkyLightCubemap, ReflectionStruct, 9, 0
ReflectionStruct_SkyLightCubemapSampler, ReflectionStruct, 8, 1
ReflectionStruct_SkyLightBlendDestinationCubemap, ReflectionStruct, 5, 2
ReflectionStruct_SkyLightBlendDestinationCubemapSampler, ReflectionStruct, 8, 3
ReflectionStruct_ReflectionCubemap, ReflectionStruct, 5, 4
ReflectionStruct_ReflectionCubemapSampler, ReflectionStruct, 8, 5
ReflectionStruct_PreIntegratedGF, ReflectionStruct, 5, 6
ReflectionStruct_PreIntegratedGFSampler, ReflectionStruct, 8, 7
VirtualShadowMap_ProjectionData, VirtualShadowMap, 16, 0
VirtualShadowMap_PageTable, VirtualShadowMap, 16, 1
VirtualShadowMap_PageFlags, VirtualShadowMap, 16, 2
VirtualShadowMap_PageRectBounds, VirtualShadowMap, 16, 3
VirtualShadowMap_PhysicalPagePool, VirtualShadowMap, 9, 4
LocalVFLooseParameters_GPUSkinPassThroughPositionBuffer, LocalVFLooseParameters, 6, 0
LocalVFLooseParameters_GPUSkinPassThroughPreviousPositionBuffer, LocalVFLooseParameters, 6, 1
LocalVF_VertexFetch_TexCoordBuffer, LocalVF, 6, 0
LocalVF_VertexFetch_PositionBuffer, LocalVF, 6, 1
LocalVF_VertexFetch_PreSkinPositionBuffer, LocalVF, 6, 2
LocalVF_VertexFetch_PackedTangentsBuffer, LocalVF, 6, 3
LocalVF_VertexFetch_ColorComponentsBuffer, LocalVF, 6, 4
Material_Texture2D_0, Material, 5, 0
Material_Texture2D_0Sampler, Material, 8, 1
Material_Texture2D_1, Material, 5, 2
Material_Texture2D_1Sampler, Material, 8, 3
Material_Wrap_WorldGroupSettings, Material, 8, 4
Material_Clamp_WorldGroupSettings, Material, 8, 5
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=GLSL_ES3_1_ANDROID -entry=Main -shaderPlatformName=OPENGL_ES3_1_ANDROID -ps C:/UnrealProject/UnrealEngine/ARProject/Saved/ShaderDebugInfo/OPENGL_ES3_1_ANDROID/M_SceneDepthOcclusion_a3bcf64b430c9b16/Default/FLocalVertexFactory/TMobileBasePassPSFNoLightMapPolicyLDRGamma32/0/MobileBasePassPixelShader.usf -cflags=1310720 -hlslccflags=655596 -nocrashreports
#endif /*DIRECT COMPILE*/


#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 387453108
Strata, 158337041
DrawRectangleParameters, 3145984
InstancedView, 446694145
SceneTexturesStruct, 158928480
MobileReflectionCapture, 2425088
InstanceVF, 104204038
SingleLayerWater, 1641252
PrimitiveDither, 1048832
PrimitiveFade, 1048832
DeferredDecal, 2097668
MobileSceneTextures, 11010716
Primitive, 48234752
InstanceCulling, 3146265
SpeedTreeData, 39846144
Atmosphere, 11534592
OpaqueBasePass, 411569516
BasePass, 165483073
MobileBasePass, 416289728
TranslucentBasePass, 205849421
LightmapResourceCluster, 226692878
PrecomputedLightingBuffer, 15728896
IndirectLightingCache, 69011717
MobileDirectionalLight, 24445232
PlanarReflectionStruct, 22348032
ForwardLightData, 180884436
ReflectionStruct, 206569728
ReflectionCaptureES31, 943719169
ReflectionCaptureSM5, -1076886783
VirtualShadowMap, 277877352
DeferredLightUniforms, 10486016
LocalVFLooseParameters, 2490654
LocalVF, 105252632
Material, 88934664
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_AtmosphereTransmittanceTexture, View, 5, 25
View_AtmosphereTransmittanceTextureSampler, View, 8, 26
View_AtmosphereIrradianceTexture, View, 5, 27
View_AtmosphereIrradianceTextureSampler, View, 8, 28
View_AtmosphereInscatterTexture, View, 5, 29
View_AtmosphereInscatterTextureSampler, View, 8, 30
View_PerlinNoiseGradientTexture, View, 5, 31
View_PerlinNoiseGradientTextureSampler, View, 8, 32
View_PerlinNoise3DTexture, View, 5, 33
View_PerlinNoise3DTextureSampler, View, 8, 34
View_SobolSamplingTexture, View, 5, 35
View_SharedPointWrappedSampler, View, 8, 36
View_SharedPointClampedSampler, View, 8, 37
View_SharedBilinearWrappedSampler, View, 8, 38
View_SharedBilinearClampedSampler, View, 8, 39
View_SharedBilinearAnisoClampedSampler, View, 8, 40
View_SharedTrilinearWrappedSampler, View, 8, 41
View_SharedTrilinearClampedSampler, View, 8, 42
View_PreIntegratedBRDF, View, 5, 43
View_PreIntegratedBRDFSampler, View, 8, 44
View_PrimitiveSceneData, View, 6, 45
View_InstanceSceneData, View, 6, 46
View_InstancePayloadData, View, 6, 47
View_LightmapSceneData, View, 6, 48
View_SkyIrradianceEnvironmentMap, View, 6, 49
View_TransmittanceLutTexture, View, 5, 50
View_TransmittanceLutTextureSampler, View, 8, 51
View_SkyViewLutTexture, View, 5, 52
View_SkyViewLutTextureSampler, View, 8, 53
View_DistantSkyLightLutTexture, View, 5, 54
View_DistantSkyLightLutTextureSampler, View, 8, 55
View_CameraAerialPerspectiveVolume, View, 5, 56
View_CameraAerialPerspectiveVolumeSampler, View, 8, 57
View_CameraAerialPerspectiveVolumeMieOnly, View, 5, 58
View_CameraAerialPerspectiveVolumeMieOnlySampler, View, 8, 59
View_CameraAerialPerspectiveVolumeRayOnly, View, 5, 60
View_CameraAerialPerspectiveVolumeRayOnlySampler, View, 8, 61
View_HairScatteringLUTTexture, View, 5, 62
View_HairScatteringLUTSampler, View, 8, 63
View_LTCMatTexture, View, 5, 64
View_LTCMatSampler, View, 8, 65
View_LTCAmpTexture, View, 5, 66
View_LTCAmpSampler, View, 8, 67
View_ShadingEnergyGGXSpecTexture, View, 5, 68
View_ShadingEnergyGGXGlassTexture, View, 5, 69
View_ShadingEnergyClothSpecTexture, View, 5, 70
View_ShadingEnergyDiffuseTexture, View, 5, 71
View_ShadingEnergySampler, View, 8, 72
View_SSProfilesTexture, View, 5, 73
View_SSProfilesSampler, View, 8, 74
View_SSProfilesTransmissionSampler, View, 8, 75
View_SSProfilesPreIntegratedTexture, View, 5, 76
View_SSProfilesPreIntegratedSampler, View, 8, 77
View_WaterIndirection, View, 6, 78
View_WaterData, View, 6, 79
View_RectLightAtlasTexture, View, 5, 80
View_RectLightAtlasSampler, View, 8, 81
View_IESAtlasTexture, View, 5, 82
View_IESAtlasSampler, View, 8, 83
View_LandscapeWeightmapSampler, View, 8, 84
View_LandscapeIndirection, View, 6, 85
View_LandscapePerComponentData, View, 6, 86
View_VTFeedbackBuffer, View, 7, 87
View_EditorVisualizeLevelInstanceIds, View, 6, 88
View_EditorSelectedHitProxyIds, View, 6, 89
View_PhysicsFieldClipmapBuffer, View, 6, 90
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_OpaqueRoughRefractionTexture, Strata, 9, 2
Strata_BSDFOffsetTexture, Strata, 9, 3
Strata_BSDFTileTexture, Strata, 9, 4
Strata_BSDFTileCountBuffer, Strata, 16, 5
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 11
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 12
MobileReflectionCapture_Texture, MobileReflectionCapture, 5, 0
MobileReflectionCapture_TextureSampler, MobileReflectionCapture, 8, 1
InstanceVF_VertexFetch_InstanceOriginBuffer, InstanceVF, 6, 0
InstanceVF_VertexFetch_InstanceTransformBuffer, InstanceVF, 6, 1
InstanceVF_VertexFetch_InstanceLightmapBuffer, InstanceVF, 6, 2
InstanceVF_InstanceCustomDataBuffer, InstanceVF, 6, 3
SingleLayerWater_SceneColorWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 0
SingleLayerWater_SceneColorWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 1
SingleLayerWater_SceneDepthWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 2
SingleLayerWater_SceneDepthWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 3
SingleLayerWater_CustomDepthTexture, SingleLayerWater, 9, 4
SingleLayerWater_CustomStencilTexture, SingleLayerWater, 12, 5
SingleLayerWater_CustomDepthSampler, SingleLayerWater, 8, 6
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTexture, SingleLayerWater, 9, 7
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapSampler, SingleLayerWater, 8, 8
SingleLayerWater_BlueNoise_ScalarTexture, SingleLayerWater, 5, 9
SingleLayerWater_BlueNoise_Vec2Texture, SingleLayerWater, 5, 10
DeferredDecal_PreviousFrameNormal, DeferredDecal, 5, 0
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomStencilTexture, MobileSceneTextures, 12, 6
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 7
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 8
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 9
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 10
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 14
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 15
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 16
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 17
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 18
InstanceCulling_InstanceIdsBuffer, InstanceCulling, 16, 0
InstanceCulling_PageInfoBuffer, InstanceCulling, 16, 1
OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 0
OpaqueBasePass_Shared_Forward_ShadowmapSampler, OpaqueBasePass, 8, 1
OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 2
OpaqueBasePass_Shared_Forward_StaticShadowmapSampler, OpaqueBasePass, 8, 3
OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer, OpaqueBasePass, 16, 4
OpaqueBasePass_Shared_Forward_NumCulledLightsGrid, OpaqueBasePass, 16, 5
OpaqueBasePass_Shared_Forward_CulledLightDataGrid, OpaqueBasePass, 16, 6
OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 7
OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler, OpaqueBasePass, 8, 8
OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 9
OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler, OpaqueBasePass, 8, 10
OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, OpaqueBasePass, 16, 11
OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid, OpaqueBasePass, 16, 12
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid, OpaqueBasePass, 16, 13
OpaqueBasePass_Shared_Reflection_SkyLightCubemap, OpaqueBasePass, 9, 14
OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler, OpaqueBasePass, 8, 15
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, OpaqueBasePass, 5, 16
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, OpaqueBasePass, 8, 17
OpaqueBasePass_Shared_Reflection_ReflectionCubemap, OpaqueBasePass, 5, 18
OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler, OpaqueBasePass, 8, 19
OpaqueBasePass_Shared_Reflection_PreIntegratedGF, OpaqueBasePass, 5, 20
OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler, OpaqueBasePass, 8, 21
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture, OpaqueBasePass, 5, 22
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler, OpaqueBasePass, 8, 23
OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap, OpaqueBasePass, 5, 24
OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler, OpaqueBasePass, 8, 25
OpaqueBasePass_Shared_Fog_IntegratedLightScattering, OpaqueBasePass, 9, 26
OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 27
OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap, OpaqueBasePass, 5, 28
OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler, OpaqueBasePass, 8, 29
OpaqueBasePass_Shared_FogISR_IntegratedLightScattering, OpaqueBasePass, 9, 30
OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 31
OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs, OpaqueBasePass, 13, 32
OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV, OpaqueBasePass, 13, 33
OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture, OpaqueBasePass, 9, 34
OpaqueBasePass_IndirectOcclusionTexture, OpaqueBasePass, 9, 35
OpaqueBasePass_ResolvedSceneDepthTexture, OpaqueBasePass, 9, 36
OpaqueBasePass_DBufferATexture, OpaqueBasePass, 9, 37
OpaqueBasePass_DBufferBTexture, OpaqueBasePass, 9, 38
OpaqueBasePass_DBufferCTexture, OpaqueBasePass, 9, 39
OpaqueBasePass_DBufferRenderMask, OpaqueBasePass, 9, 40
OpaqueBasePass_DBufferATextureSampler, OpaqueBasePass, 8, 41
OpaqueBasePass_DBufferBTextureSampler, OpaqueBasePass, 8, 42
OpaqueBasePass_DBufferCTextureSampler, OpaqueBasePass, 8, 43
OpaqueBasePass_PreIntegratedGFTexture, OpaqueBasePass, 5, 44
OpaqueBasePass_PreIntegratedGFSampler, OpaqueBasePass, 8, 45
OpaqueBasePass_EyeAdaptationBuffer, OpaqueBasePass, 16, 46
BasePass_Forward_DirectionalLightShadowmapAtlas, BasePass, 9, 0
BasePass_Forward_ShadowmapSampler, BasePass, 8, 1
BasePass_Forward_DirectionalLightStaticShadowmap, BasePass, 5, 2
BasePass_Forward_StaticShadowmapSampler, BasePass, 8, 3
BasePass_Forward_ForwardLocalLightBuffer, BasePass, 16, 4
BasePass_Forward_NumCulledLightsGrid, BasePass, 16, 5
BasePass_Forward_CulledLightDataGrid, BasePass, 16, 6
BasePass_ForwardISR_DirectionalLightShadowmapAtlas, BasePass, 9, 7
BasePass_ForwardISR_ShadowmapSampler, BasePass, 8, 8
BasePass_ForwardISR_DirectionalLightStaticShadowmap, BasePass, 5, 9
BasePass_ForwardISR_StaticShadowmapSampler, BasePass, 8, 10
BasePass_ForwardISR_ForwardLocalLightBuffer, BasePass, 16, 11
BasePass_ForwardISR_NumCulledLightsGrid, BasePass, 16, 12
BasePass_ForwardISR_CulledLightDataGrid, BasePass, 16, 13
BasePass_Reflection_SkyLightCubemap, BasePass, 9, 14
BasePass_Reflection_SkyLightCubemapSampler, BasePass, 8, 15
BasePass_Reflection_SkyLightBlendDestinationCubemap, BasePass, 5, 16
BasePass_Reflection_SkyLightBlendDestinationCubemapSampler, BasePass, 8, 17
BasePass_Reflection_ReflectionCubemap, BasePass, 5, 18
BasePass_Reflection_ReflectionCubemapSampler, BasePass, 8, 19
BasePass_Reflection_PreIntegratedGF, BasePass, 5, 20
BasePass_Reflection_PreIntegratedGFSampler, BasePass, 8, 21
BasePass_PlanarReflection_PlanarReflectionTexture, BasePass, 5, 22
BasePass_PlanarReflection_PlanarReflectionSampler, BasePass, 8, 23
BasePass_Fog_FogInscatteringColorCubemap, BasePass, 5, 24
BasePass_Fog_FogInscatteringColorSampler, BasePass, 8, 25
BasePass_Fog_IntegratedLightScattering, BasePass, 9, 26
BasePass_Fog_IntegratedLightScatteringSampler, BasePass, 8, 27
BasePass_FogISR_FogInscatteringColorCubemap, BasePass, 5, 28
BasePass_FogISR_FogInscatteringColorSampler, BasePass, 8, 29
BasePass_FogISR_IntegratedLightScattering, BasePass, 9, 30
BasePass_FogISR_IntegratedLightScatteringSampler, BasePass, 8, 31
MobileBasePass_Fog_FogInscatteringColorCubemap, MobileBasePass, 5, 0
MobileBasePass_Fog_FogInscatteringColorSampler, MobileBasePass, 8, 1
MobileBasePass_Fog_IntegratedLightScattering, MobileBasePass, 9, 2
MobileBasePass_Fog_IntegratedLightScatteringSampler, MobileBasePass, 8, 3
MobileBasePass_Forward_DirectionalLightShadowmapAtlas, MobileBasePass, 9, 4
MobileBasePass_Forward_ShadowmapSampler, MobileBasePass, 8, 5
MobileBasePass_Forward_DirectionalLightStaticShadowmap, MobileBasePass, 5, 6
MobileBasePass_Forward_StaticShadowmapSampler, MobileBasePass, 8, 7
MobileBasePass_Forward_ForwardLocalLightBuffer, MobileBasePass, 16, 8
MobileBasePass_Forward_NumCulledLightsGrid, MobileBasePass, 16, 9
MobileBasePass_Forward_CulledLightDataGrid, MobileBasePass, 16, 10
MobileBasePass_ForwardMMV_DirectionalLightShadowmapAtlas, MobileBasePass, 9, 11
MobileBasePass_ForwardMMV_ShadowmapSampler, MobileBasePass, 8, 12
MobileBasePass_ForwardMMV_DirectionalLightStaticShadowmap, MobileBasePass, 5, 13
MobileBasePass_ForwardMMV_StaticShadowmapSampler, MobileBasePass, 8, 14
MobileBasePass_ForwardMMV_ForwardLocalLightBuffer, MobileBasePass, 16, 15
MobileBasePass_ForwardMMV_NumCulledLightsGrid, MobileBasePass, 16, 16
MobileBasePass_ForwardMMV_CulledLightDataGrid, MobileBasePass, 16, 17
MobileBasePass_PlanarReflection_PlanarReflectionTexture, MobileBasePass, 5, 18
MobileBasePass_PlanarReflection_PlanarReflectionSampler, MobileBasePass, 8, 19
MobileBasePass_SceneTextures_SceneColorTexture, MobileBasePass, 9, 20
MobileBasePass_SceneTextures_SceneColorTextureSampler, MobileBasePass, 8, 21
MobileBasePass_SceneTextures_SceneDepthTexture, MobileBasePass, 9, 22
MobileBasePass_SceneTextures_SceneDepthTextureSampler, MobileBasePass, 8, 23
MobileBasePass_SceneTextures_CustomDepthTexture, MobileBasePass, 9, 24
MobileBasePass_SceneTextures_CustomDepthTextureSampler, MobileBasePass, 8, 25
MobileBasePass_SceneTextures_CustomStencilTexture, MobileBasePass, 12, 26
MobileBasePass_SceneTextures_SceneVelocityTexture, MobileBasePass, 9, 27
MobileBasePass_SceneTextures_SceneVelocityTextureSampler, MobileBasePass, 8, 28
MobileBasePass_SceneTextures_GBufferATexture, MobileBasePass, 9, 29
MobileBasePass_SceneTextures_GBufferBTexture, MobileBasePass, 9, 30
MobileBasePass_SceneTextures_GBufferCTexture, MobileBasePass, 9, 31
MobileBasePass_SceneTextures_GBufferDTexture, MobileBasePass, 9, 32
MobileBasePass_SceneTextures_SceneDepthAuxTexture, MobileBasePass, 9, 33
MobileBasePass_SceneTextures_GBufferATextureSampler, MobileBasePass, 8, 34
MobileBasePass_SceneTextures_GBufferBTextureSampler, MobileBasePass, 8, 35
MobileBasePass_SceneTextures_GBufferCTextureSampler, MobileBasePass, 8, 36
MobileBasePass_SceneTextures_GBufferDTextureSampler, MobileBasePass, 8, 37
MobileBasePass_SceneTextures_SceneDepthAuxTextureSampler, MobileBasePass, 8, 38
MobileBasePass_ReflectionsParameters_SkyLightCubemap, MobileBasePass, 9, 39
MobileBasePass_ReflectionsParameters_SkyLightCubemapSampler, MobileBasePass, 8, 40
MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemap, MobileBasePass, 5, 41
MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemapSampler, MobileBasePass, 8, 42
MobileBasePass_ReflectionsParameters_ReflectionCubemap, MobileBasePass, 5, 43
MobileBasePass_ReflectionsParameters_ReflectionCubemapSampler, MobileBasePass, 8, 44
MobileBasePass_ReflectionsParameters_PreIntegratedGF, MobileBasePass, 5, 45
MobileBasePass_ReflectionsParameters_PreIntegratedGFSampler, MobileBasePass, 8, 46
MobileBasePass_PreIntegratedGFTexture, MobileBasePass, 5, 47
MobileBasePass_PreIntegratedGFSampler, MobileBasePass, 8, 48
MobileBasePass_EyeAdaptationBuffer, MobileBasePass, 16, 49
MobileBasePass_RWOcclusionBufferUAV, MobileBasePass, 17, 50
MobileBasePass_AmbientOcclusionTexture, MobileBasePass, 9, 51
MobileBasePass_AmbientOcclusionSampler, MobileBasePass, 8, 52
MobileBasePass_ScreenSpaceShadowMaskTexture, MobileBasePass, 9, 53
MobileBasePass_ScreenSpaceShadowMaskSampler, MobileBasePass, 8, 54
TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 0
TranslucentBasePass_Shared_Forward_ShadowmapSampler, TranslucentBasePass, 8, 1
TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 2
TranslucentBasePass_Shared_Forward_StaticShadowmapSampler, TranslucentBasePass, 8, 3
TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer, TranslucentBasePass, 16, 4
TranslucentBasePass_Shared_Forward_NumCulledLightsGrid, TranslucentBasePass, 16, 5
TranslucentBasePass_Shared_Forward_CulledLightDataGrid, TranslucentBasePass, 16, 6
TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 7
TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler, TranslucentBasePass, 8, 8
TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 9
TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler, TranslucentBasePass, 8, 10
TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, TranslucentBasePass, 16, 11
TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid, TranslucentBasePass, 16, 12
TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid, TranslucentBasePass, 16, 13
TranslucentBasePass_Shared_Reflection_SkyLightCubemap, TranslucentBasePass, 9, 14
TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler, TranslucentBasePass, 8, 15
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, TranslucentBasePass, 5, 16
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, TranslucentBasePass, 8, 17
TranslucentBasePass_Shared_Reflection_ReflectionCubemap, TranslucentBasePass, 5, 18
TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler, TranslucentBasePass, 8, 19
TranslucentBasePass_Shared_Reflection_PreIntegratedGF, TranslucentBasePass, 5, 20
TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler, TranslucentBasePass, 8, 21
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture, TranslucentBasePass, 5, 22
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler, TranslucentBasePass, 8, 23
TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap, TranslucentBasePass, 5, 24
TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler, TranslucentBasePass, 8, 25
TranslucentBasePass_Shared_Fog_IntegratedLightScattering, TranslucentBasePass, 9, 26
TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 27
TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap, TranslucentBasePass, 5, 28
TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler, TranslucentBasePass, 8, 29
TranslucentBasePass_Shared_FogISR_IntegratedLightScattering, TranslucentBasePass, 9, 30
TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 31
TranslucentBasePass_SceneTextures_SceneColorTexture, TranslucentBasePass, 9, 32
TranslucentBasePass_SceneTextures_SceneDepthTexture, TranslucentBasePass, 9, 33
TranslucentBasePass_SceneTextures_GBufferATexture, TranslucentBasePass, 9, 34
TranslucentBasePass_SceneTextures_GBufferBTexture, TranslucentBasePass, 9, 35
TranslucentBasePass_SceneTextures_GBufferCTexture, TranslucentBasePass, 9, 36
TranslucentBasePass_SceneTextures_GBufferDTexture, TranslucentBasePass, 9, 37
TranslucentBasePass_SceneTextures_GBufferETexture, TranslucentBasePass, 9, 38
TranslucentBasePass_SceneTextures_GBufferFTexture, TranslucentBasePass, 9, 39
TranslucentBasePass_SceneTextures_GBufferVelocityTexture, TranslucentBasePass, 9, 40
TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture, TranslucentBasePass, 9, 41
TranslucentBasePass_SceneTextures_CustomDepthTexture, TranslucentBasePass, 9, 42
TranslucentBasePass_SceneTextures_CustomStencilTexture, TranslucentBasePass, 12, 43
TranslucentBasePass_SceneTextures_PointClampSampler, TranslucentBasePass, 8, 44
TranslucentBasePass_Strata_MaterialTextureArray, TranslucentBasePass, 9, 45
TranslucentBasePass_Strata_TopLayerTexture, TranslucentBasePass, 9, 46
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture, TranslucentBasePass, 9, 47
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler, TranslucentBasePass, 8, 48
TranslucentBasePass_OIT_OutOITSampleCount, TranslucentBasePass, 13, 49
TranslucentBasePass_OIT_OutOITSampleColor, TranslucentBasePass, 13, 50
TranslucentBasePass_OIT_OutOITSampleTrans, TranslucentBasePass, 13, 51
TranslucentBasePass_OIT_OutOITSampleDepth, TranslucentBasePass, 13, 52
TranslucentBasePass_HZBTexture, TranslucentBasePass, 9, 53
TranslucentBasePass_HZBSampler, TranslucentBasePass, 8, 54
TranslucentBasePass_PrevSceneColor, TranslucentBasePass, 9, 55
TranslucentBasePass_PrevSceneColorSampler, TranslucentBasePass, 8, 56
TranslucentBasePass_VolumetricCloudColor, TranslucentBasePass, 9, 57
TranslucentBasePass_VolumetricCloudColorSampler, TranslucentBasePass, 8, 58
TranslucentBasePass_VolumetricCloudDepth, TranslucentBasePass, 9, 59
TranslucentBasePass_VolumetricCloudDepthSampler, TranslucentBasePass, 8, 60
TranslucentBasePass_TranslucencyLightingVolumeAmbientInner, TranslucentBasePass, 9, 61
TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter, TranslucentBasePass, 9, 62
TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner, TranslucentBasePass, 9, 63
TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter, TranslucentBasePass, 9, 64
TranslucentBasePass_RadianceProbeIndirectionTexture, TranslucentBasePass, 9, 65
TranslucentBasePass_RadianceCacheFinalRadianceAtlas, TranslucentBasePass, 9, 66
TranslucentBasePass_RadianceCacheFinalIrradianceAtlas, TranslucentBasePass, 9, 67
TranslucentBasePass_RadianceCacheProbeOcclusionAtlas, TranslucentBasePass, 9, 68
TranslucentBasePass_RadianceCacheDepthAtlas, TranslucentBasePass, 9, 69
TranslucentBasePass_ProbeWorldOffset, TranslucentBasePass, 16, 70
TranslucentBasePass_Radiance, TranslucentBasePass, 9, 71
TranslucentBasePass_Normal, TranslucentBasePass, 9, 72
TranslucentBasePass_SceneDepth, TranslucentBasePass, 9, 73
TranslucentBasePass_TranslucencyGIVolume0, TranslucentBasePass, 9, 74
TranslucentBasePass_TranslucencyGIVolume1, TranslucentBasePass, 9, 75
TranslucentBasePass_TranslucencyGIVolumeHistory0, TranslucentBasePass, 9, 76
TranslucentBasePass_TranslucencyGIVolumeHistory1, TranslucentBasePass, 9, 77
TranslucentBasePass_TranslucencyGIVolumeSampler, TranslucentBasePass, 8, 78
TranslucentBasePass_PreIntegratedGFTexture, TranslucentBasePass, 5, 79
TranslucentBasePass_PreIntegratedGFSampler, TranslucentBasePass, 8, 80
TranslucentBasePass_EyeAdaptationBuffer, TranslucentBasePass, 16, 81
TranslucentBasePass_SceneColorCopyTexture, TranslucentBasePass, 9, 82
TranslucentBasePass_SceneColorCopySampler, TranslucentBasePass, 8, 83
TranslucentBasePass_BlueNoise_ScalarTexture, TranslucentBasePass, 5, 84
TranslucentBasePass_BlueNoise_Vec2Texture, TranslucentBasePass, 5, 85
LightmapResourceCluster_LightMapTexture, LightmapResourceCluster, 5, 0
LightmapResourceCluster_SkyOcclusionTexture, LightmapResourceCluster, 5, 1
LightmapResourceCluster_AOMaterialMaskTexture, LightmapResourceCluster, 5, 2
LightmapResourceCluster_StaticShadowTexture, LightmapResourceCluster, 5, 3
LightmapResourceCluster_VTLightMapTexture, LightmapResourceCluster, 6, 4
LightmapResourceCluster_VTLightMapTexture_1, LightmapResourceCluster, 6, 5
LightmapResourceCluster_VTSkyOcclusionTexture, LightmapResourceCluster, 6, 6
LightmapResourceCluster_VTAOMaterialMaskTexture, LightmapResourceCluster, 6, 7
LightmapResourceCluster_VTStaticShadowTexture, LightmapResourceCluster, 6, 8
LightmapResourceCluster_LightMapSampler, LightmapResourceCluster, 8, 9
LightmapResourceCluster_LightMapSampler_1, LightmapResourceCluster, 8, 10
LightmapResourceCluster_SkyOcclusionSampler, LightmapResourceCluster, 8, 11
LightmapResourceCluster_AOMaterialMaskSampler, LightmapResourceCluster, 8, 12
LightmapResourceCluster_StaticShadowTextureSampler, LightmapResourceCluster, 8, 13
LightmapResourceCluster_LightmapVirtualTexturePageTable0, LightmapResourceCluster, 5, 14
LightmapResourceCluster_LightmapVirtualTexturePageTable1, LightmapResourceCluster, 5, 15
IndirectLightingCache_IndirectLightingCacheTexture0, IndirectLightingCache, 5, 0
IndirectLightingCache_IndirectLightingCacheTexture1, IndirectLightingCache, 5, 1
IndirectLightingCache_IndirectLightingCacheTexture2, IndirectLightingCache, 5, 2
IndirectLightingCache_IndirectLightingCacheTextureSampler0, IndirectLightingCache, 8, 3
IndirectLightingCache_IndirectLightingCacheTextureSampler1, IndirectLightingCache, 8, 4
IndirectLightingCache_IndirectLightingCacheTextureSampler2, IndirectLightingCache, 8, 5
MobileDirectionalLight_DirectionalLightShadowTexture, MobileDirectionalLight, 5, 0
MobileDirectionalLight_DirectionalLightShadowSampler, MobileDirectionalLight, 8, 1
PlanarReflectionStruct_PlanarReflectionTexture, PlanarReflectionStruct, 5, 0
PlanarReflectionStruct_PlanarReflectionSampler, PlanarReflectionStruct, 8, 1
ForwardLightData_DirectionalLightShadowmapAtlas, ForwardLightData, 9, 0
ForwardLightData_ShadowmapSampler, ForwardLightData, 8, 1
ForwardLightData_DirectionalLightStaticShadowmap, ForwardLightData, 5, 2
ForwardLightData_StaticShadowmapSampler, ForwardLightData, 8, 3
ForwardLightData_ForwardLocalLightBuffer, ForwardLightData, 16, 4
ForwardLightData_NumCulledLightsGrid, ForwardLightData, 16, 5
ForwardLightData_CulledLightDataGrid, ForwardLightData, 16, 6
ReflectionStruct_SkyLightCubemap, ReflectionStruct, 9, 0
ReflectionStruct_SkyLightCubemapSampler, ReflectionStruct, 8, 1
ReflectionStruct_SkyLightBlendDestinationCubemap, ReflectionStruct, 5, 2
ReflectionStruct_SkyLightBlendDestinationCubemapSampler, ReflectionStruct, 8, 3
ReflectionStruct_ReflectionCubemap, ReflectionStruct, 5, 4
ReflectionStruct_ReflectionCubemapSampler, ReflectionStruct, 8, 5
ReflectionStruct_PreIntegratedGF, ReflectionStruct, 5, 6
ReflectionStruct_PreIntegratedGFSampler, ReflectionStruct, 8, 7
VirtualShadowMap_ProjectionData, VirtualShadowMap, 16, 0
VirtualShadowMap_PageTable, VirtualShadowMap, 16, 1
VirtualShadowMap_PageFlags, VirtualShadowMap, 16, 2
VirtualShadowMap_PageRectBounds, VirtualShadowMap, 16, 3
VirtualShadowMap_PhysicalPagePool, VirtualShadowMap, 9, 4
LocalVFLooseParameters_GPUSkinPassThroughPositionBuffer, LocalVFLooseParameters, 6, 0
LocalVFLooseParameters_GPUSkinPassThroughPreviousPositionBuffer, LocalVFLooseParameters, 6, 1
LocalVF_VertexFetch_TexCoordBuffer, LocalVF, 6, 0
LocalVF_VertexFetch_PositionBuffer, LocalVF, 6, 1
LocalVF_VertexFetch_PreSkinPositionBuffer, LocalVF, 6, 2
LocalVF_VertexFetch_PackedTangentsBuffer, LocalVF, 6, 3
LocalVF_VertexFetch_ColorComponentsBuffer, LocalVF, 6, 4
Material_Texture2D_0, Material, 5, 0
Material_Texture2D_0Sampler, Material, 8, 1
Material_Texture2D_1, Material, 5, 2
Material_Texture2D_1Sampler, Material, 8, 3
Material_Wrap_WorldGroupSettings, Material, 8, 4
Material_Clamp_WorldGroupSettings, Material, 8, 5
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=GLSL_ES3_1_ANDROID -entry=Main -shaderPlatformName=OPENGL_ES3_1_ANDROID -ps C:/UnrealProject/UnrealEngine/ARProject/Saved/ShaderDebugInfo/OPENGL_ES3_1_ANDROID/M_SceneDepthOcclusion_a3bcf64b430c9b16/Default/FLocalVertexFactory/TMobileBasePassPSFNoLightMapPolicyLDRGamma32/0/MobileBasePassPixelShader.usf -cflags=1310720 -hlslccflags=655596 -nocrashreports
#endif /*DIRECT COMPILE*/
